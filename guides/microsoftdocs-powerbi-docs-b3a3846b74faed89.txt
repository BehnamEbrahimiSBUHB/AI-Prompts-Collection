Directory structure:
└── visuals/
    ├── about-dialog.md
    ├── add-colors-power-bi-visual.md
    ├── add-tooltips.md
    ├── adding-external-libraries.md
    ├── advanced-edit-mode.md
    ├── analytics-pane.md
    ├── authentication-api.md
    ├── bookmarks-support.md
    ├── capabilities.md
    ├── changelog.md
    ├── conditional-format.md
    ├── context-menu.md
    ├── create-bar-chart.md
    ├── create-display-dialog-box.md
    ├── create-r-based-power-bi-desktop.md
    ├── create-react-visual.md
    ├── create-ssl-certificate.md
    ├── custom-visual-develop-tutorial-format-options.md
    ├── custom-visual-licenses.md
    ├── dataview-mappings.md
    ├── detect-filter-api.md
    ├── develop-circle-card.md
    ├── develop-power-bi-visuals.md
    ├── drill-down-support.md
    ├── drilldown-api.md
    ├── dynamic-drill-down.md
    ├── dynamic-format.md
    ├── enable-sync-slicers.md
    ├── entra-id-authentication.md
    ├── environment-setup.md
    ├── event-service.md
    ├── fetch-more-data.md
    ├── file-download-api.md
    ├── filter-api.md
    ├── format-pane-example.md
    ├── format-pane-general.md
    ├── formatting-model-alignmentgroup.md
    ├── formatting-model-card.md
    ├── formatting-model-colorpicker.md
    ├── formatting-model-container.md
    ├── formatting-model-dropdown.md
    ├── formatting-model-flagselection.md
    ├── formatting-model-fontcontrol.md
    ├── formatting-model-fontpicker.md
    ├── formatting-model-group.md
    ├── formatting-model-marginpadding.md
    ├── formatting-model-numupdown.md
    ├── formatting-model-slider.md
    ├── formatting-model-textarea.md
    ├── formatting-model-textinput.md
    ├── formatting-model-toggleswitch.md
    ├── funnel-plot-from-r.md
    ├── guidelines-powerbi-visuals.md
    ├── hierarchy-filter-api.md
    ├── high-contrast-support.md
    ├── highlight.md
    ├── identity-filter-api.md
    ├── import-visual.md
    ├── index.yml
    ├── landing-page.md
    ├── launch-url.md
    ├── licensing-api.md
    ├── licensing-faq.yml
    ├── local-storage.md
    ├── localization.md
    ├── mobile-development.md
    ├── no-dataroles-support.md
    ├── objects-properties.md
    ├── office-store.md
    ├── on-object-formatting-api.md
    ├── package-visual.md
    ├── performance-tips.md
    ├── permissions-api.md
    ├── power-bi-custom-visuals-certified.md
    ├── power-bi-custom-visuals-faq.yml
    ├── power-bi-custom-visuals-organization.md
    ├── power-bi-custom-visuals-troubleshoot.md
    ├── power-bi-custom-visuals.md
    ├── power-bi-visuals-concept.md
    ├── samples.md
    ├── selection-api.md
    ├── sort-options.md
    ├── submission-testing.md
    ├── subselection-api.md
    ├── supportskeyboardfocus-feature.md
    ├── supportsmultivisualselection-feature.md
    ├── TOC.yml
    ├── total-subtotal-api.md
    ├── unit-tests-introduction.md
    ├── utils-chart.md
    ├── utils-color.md
    ├── utils-dataview.md
    ├── utils-formatting-model.md
    ├── utils-formatting.md
    ├── utils-interactivity-selections.md
    ├── utils-on-object.md
    ├── utils-svg.md
    ├── utils-test.md
    ├── utils-tooltip.md
    ├── utils-type.md
    ├── visual-api.md
    ├── visual-display-warning-icon.md
    ├── visual-project-structure.md
    ├── visuals-how-to-debug.md
    └── visuals-interactions.md

================================================
FILE: powerbi-docs/developer/visuals/about-dialog.md
================================================
---
title: Power BI visuals About dialog
description: Learn what each of the tabs in the Power BI visuals About dialog describes and what each permission setting does.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-admin
ms.custom:
ms.topic: concept-article
ms.date: 07/15/2024
#customer intent: As a Power BI user, I want to know what permissions a visual requests so that I can make an informed decision about using it.
---

# The Power BI visuals *About* dialog

Every visual has an *About* dialog that gives you information about the visual, including the version number, who created it, and what permission it requests. 

To open the *About* dialog, right-click the visual and select **About**.

:::image type="content" source="./media/about-dialog/open-about-dialog.png" alt-text="Screenshot showing how to open the About dialog.":::

The *About* dialog for custom visuals has three tabs that show the following information:

* [About](#about)
* [Certification](#certification)
* [Privileges](#privileges)

## About

The *About* tab provides the following information:

* **Name**: The name of the visual.
* **Publisher**: The name of the publisher of the visual.
* **ID**: The ID of the visual.
* **Version**: The version of the visual.
* **Source**: The source of the visual, if available.
* **Support**: Link to support information, if available.

:::image type="content" source="./media/about-dialog/about-dialog.png" alt-text="Screenshot of the About dialog.":::

## Certification

This section tells you if a visual is certified by Microsoft. Certification means that the visual meets certain specified code requirements and testing by the Power BI team.
For more information about certified visuals, see [Certified Power BI visuals](./power-bi-custom-visuals-certified.md).

## Privileges

Power BI visuals sometimes require access to data or other resources in your organization. This section describes what permissions a visual might need in order to work properly in the current version.
It's important to note that the admin can choose to block a visual from requesting a certain permission through the [Power BI visuals admin settings](/fabric/admin/organizational-visuals). If a visual requests a permission that's disables, the visual can't use that permission.

:::image type="content" source="./media/about-dialog/about-privileges.png" alt-text="Screenshot of list of privileges in the About dialog.":::

The following are the permissions a visual might request:

* [Call Power BI local storage APIs](#call-power-bi-local-storage-apis)
* [Access URLs](#access-urls)
* [Call Power BI Download APIs](#call-power-bi-download-apis)
* [Make calls on behalf of signed in users](#make-calls-on-behalf-of-signed-in-users)

Visuals can request permission for any or the following privileges:

### Call Power BI local storage APIs

The visual might want to [store data locally](./local-storage.md) on the user's device to help improve performance. The admin can [choose to block this permission](/fabric/admin/organizational-visuals#local-storage) in which case the visual can't store data locally.

### Access URLs

This privilege allows a visual to send HTTP requests to specific URLs that the visual builder declares in advance.

There's no tenant admin switch for this permission. As long as [noncertified visuals are allowed](/fabric/admin/organizational-visuals#certified-power-bi-visuals), this privilege is granted.

### Call Power BI Download APIs

The [file download API](./file-download-api.md) lets users download data from a custom visual into a file on their storage device. Downloading data from a visual requires user consent and admin permission provided in the [Allow downloads from custom visuals tenant switch](/fabric/admin/organizational-visuals#export-data-to-file). If the admin doesn't enable this switch, the visual can't download data from Power BI.

If the visual has permission to call the download API, it can export files of the following types:

* .txt
* .csv
* .json
* .tmplt
* .xml
* .pdf
* .xlsx

### Make calls on behalf of signed in users

The visual might need to obtain a Microsoft Entra ID (formerly known as Azure AD) access tokens for signed-in users, to facilitate single sign-on authentication. Permission to access tokens requires user consent and admin permission provided in the [Obtain Microsoft Entra access token tenant switch](/fabric/admin/organizational-visuals#obtain-microsoft-entra-access-token). If the admin doesn't enable this switch, the visual can't access a token or make API calls on behalf of the user.

## Related content

* [About tenant settings](/fabric/admin/tenant-settings-index)
* [Manage Power BI visuals admin settings](/fabric/admin/organizational-visuals).



================================================
FILE: powerbi-docs/developer/visuals/add-colors-power-bi-visual.md
================================================
---
title: Add colors to your Power BI custom visuals
description: This article describes how to add colors to your Power BI custom visuals and how to handle data points for a visual with color.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 3/10/2025
# Customer intent: As a developer, I want to learn how to add colors to my custom visuals in Power BI so that I can create more visually appealing reports.
---

# Add colors to your Power BI visuals

This article describes how to add colors to your custom visuals and how to handle data points for a visual that has defined colors.

[`IVisualHost`](visual-api.md#visualconstructoroptions), the collection of properties and services that interact with the visual host, can define colors in custom visuals with the `colorPalette` service. The example code in this article modifies the [SampleBarChart visual](https://github.com/microsoft/PowerBI-visuals-sampleBarChart). For the SampleBarChart visual source code, see [barChart.ts](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/master/src/barChart.ts).

To get started creating visuals, see [Developing a a Power BI circle card visual](develop-circle-card.md).

## Add color to data points

To represent each data point in a different color, add the `color` variable to the `BarChartDataPoint` interface, as shown in the following example:

```typescript
/**
 * Interface for BarChart data points.
 *
 * @interface
 * @property {number} value    - Data value for point.
 * @property {string} category - Corresponding category of data value.
 * @property {string} color    - Color corresponding to data point.
 */
interface BarChartDataPoint {
    value: number;
    category: string;
    color: string;
};
```

## Use the color palette service

The `colorPalette` service manages the colors used in your visual. An instance of the `colorPalette` service is available on `IVisualHost`.

Define the color palette in the `update` method with the following code:

```typescript
constructor(options: VisualConstructorOptions) {
        this.host = options.host; // host: IVisualHost
        ...
    }

public update(options: VisualUpdateOptions) {

    let colorPalette: IColorPalette = host.colorPalette;
    ...
}
```

## Assigning color to data points

Next, specify `dataPoints`. In this example, each of the `dataPoints` has a defined value, category, and color property. `dataPoints` can also include other properties.

In `SampleBarChart`, the `visualTransform` method is a part of the Bar Chart viewmodel. Because the `visualTransform` method iterates through all the `dataPoints` calculations, it's the ideal place to assign colors, as in the following code:

```typescript

public update(options: VisualUpdateOptions) {
    ....
    let viewModel: BarChartViewModel = visualTransform(options, this.host);
    ....
}

function visualTransform(options: VisualUpdateOptions, host: IVisualHost): BarChartViewModel {
    let colorPalette: IColorPalette = host.colorPalette; // host: IVisualHost
    for (let i = 0, len = Math.max(category.values.length, dataValue.values.length); i < len; i++) {
        barChartDataPoints.push({
            category: category.values[i],
            value: dataValue.values[i],
            color: colorPalette.getColor(category.values[i]).value,
        });
    }
}
```

Then, apply the data from `dataPoints` to the [d3](https://d3js.org/)-selection `barSelection` inside the `update` method:

```typescript
// This code is for d3 v5
// in d3 v5 for this case we should use merge() after enter() and apply changes on barSelectionMerged
this.barSelection = this.barContainer
    .selectAll('.bar')
    .data(this.barDataPoints);

const barSelectionMerged = this.barSelection
    .enter()
    .append('rect')
    .merge(<any>this.barSelection);

barSelectionMerged.classed('bar', true);

barSelectionMerged
.attr("width", xScale.bandwidth())
.attr("height", d => height - yScale(<number>d.value))
.attr("y", d => yScale(<number>d.value))
.attr("x", d => xScale(d.category))
.style("fill", (dataPoint: BarChartDataPoint) => dataPoint.color)
.style("stroke", (dataPoint: BarChartDataPoint) => dataPoint.strokeColor)
.style("stroke-width", (dataPoint: BarChartDataPoint) => `${dataPoint.strokeWidth}px`);

this.barSelection
    .exit()
    .remove();
```

## Related content

* [Capabilities and properties of Power BI visuals](capabilities.md).
* [How to debug Power BI visuals](visuals-how-to-debug.md)



================================================
FILE: powerbi-docs/developer/visuals/add-tooltips.md
================================================
---
title: Add tooltips to Power BI custom visuals
description: Learn how to configure simple or modern tooltips in Power BI custom visuals that provide more details to users.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 03/29/2025
# Customer intent: As a developer, I want to learn how to add tooltips to my custom visuals in Power BI so that I can provide more details to users.
---

# Add tooltips to your Power BI visuals

[Tooltips](../../create-reports/desktop-tooltips.md) are an elegant way of providing more contextual information and detail to data points on a visual. The Power BI tooltips API can handle the following interactions:

* Show a tooltip.
* Hide a tooltip.
* Move a tooltip.

Tooltips can display a textual element with a title, a value in a given color, and opacity at a specified set of coordinates. This data is provided to the API, and the Power BI host renders it the same way it renders tooltips for native visuals.

You can change the style of your tooltips or add drilling actions by enabling the [modern tooltips](#add-modern-tooltips-support-to-the-report-page) feature.

The following image shows a tooltip in a sample bar chart:

:::image type="content" source="media/add-tooltips/tooltips-in-samplebarchart.png" alt-text="Screenshot that shows sample bar chart tooltips.":::

The above tooltip image illustrates a single bar category and value. You can extend the tooltip to display multiple values.

## Manage tooltips

You can manage the tooltips in your visual through the `ITooltipService` interface. `ITooltipService` notifies the host that a tooltip needs to be displayed, removed, or moved.

```typescript
    interface ITooltipService {
        enabled(): boolean;
        show(options: TooltipShowOptions): void;
        move(options: TooltipMoveOptions): void;
        hide(options: TooltipHideOptions): void;
    }
```

Your visual should detect mouse events within the visual and call the `show()`, `move()`, and `hide()` delegates, as needed, with the appropriate content populated in the Tooltip `options` objects.
`TooltipShowOptions` and `TooltipHideOptions` in turn define what to display and how to behave in these events.

Calling these methods involves user events such as mouse moves and touch events, so it's a good idea to create listeners for these events, which would in turn invoke the `TooltipService` members.
The following example aggregates in a class called `TooltipServiceWrapper`.

### The TooltipServiceWrapper class

The basic idea behind this class is to hold the instance of the `TooltipService`, listen for D3 mouse events over relevant elements, and then make the calls to `show()` and `hide()` the elements when needed.

The class holds and manages any relevant state and logic for these events, which are mostly geared at interfacing with the underlying D3 code. The D3 interfacing and conversion is out of scope for this article.

The example code in this article is based on the [SampleBarChart visual](https://github.com/Microsoft/PowerBI-visuals-sampleBarChart). You can examine the source code in [barChart.ts.](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/main/src/barChart.ts)

### Create TooltipServiceWrapper

The bar chart constructor now has a `TooltipServiceWrapper` member, which is instantiated in the constructor with the host `tooltipService` instance.

```typescript
        private tooltipServiceWrapper: ITooltipServiceWrapper;

        this.tooltipServiceWrapper = createTooltipServiceWrapper(this.host.tooltipService, options.element);
```

The `TooltipServiceWrapper` class holds the `tooltipService` instance, also as the root D3 element of the visual and touch parameters.

```typescript
    class TooltipServiceWrapper implements ITooltipServiceWrapper {
        private handleTouchTimeoutId: number;
        private visualHostTooltipService: ITooltipService;
        private rootElement: Element;
        private handleTouchDelay: number;

        constructor(tooltipService: ITooltipService, rootElement: Element, handleTouchDelay: number) {
            this.visualHostTooltipService = tooltipService;
            this.handleTouchDelay = handleTouchDelay;
            this.rootElement = rootElement;
        }
        .
        .
        .
    }
```

The single entry point for this class to register event listeners is the `addTooltip` method.

### The addTooltip method

```typescript
        public addTooltip<T>(
            selection: d3.Selection<Element>,
            getTooltipInfoDelegate: (args: TooltipEventArgs<T>) => VisualTooltipDataItem[],
            getDataPointIdentity: (args: TooltipEventArgs<T>) => ISelectionId,
            reloadTooltipDataOnMouseMove?: boolean): void {

            if (!selection || !this.visualHostTooltipService.enabled()) {
                return;
            }
        ...
        ...
        }
```

* **selection: d3.Selection\<Element\>**: The d3 elements over which tooltips are handled.
* **getTooltipInfoDelegate: (args: TooltipEventArgs\<T\>) => VisualTooltipDataItem[]**: The delegate for populating the tooltip content (what to display) per context.
* **getDataPointIdentity: (args: TooltipEventArgs\<T\>) => ISelectionId**: The delegate for retrieving the data point ID (unused in this sample).
* **reloadTooltipDataOnMouseMove? boolean**: A Boolean that indicates whether to refresh the tooltip data during a MouseMove event (unused in this sample).

As you can see, `addTooltip` exits with no action if the `tooltipService` is disabled or there's no real selection.

### Call the show method to display a tooltip

The `addTooltip` method next listens to the D3 `mouseover` event, as shown in the following code:

```typescript
        ...
        ...
        selection.on("mouseover.tooltip", () => {
            // Ignore mouseover while handling touch events
            if (!this.canDisplayTooltip(d3.event))
                return;

            let tooltipEventArgs = this.makeTooltipEventArgs<T>(rootNode, true, false);
            if (!tooltipEventArgs)
                return;

            let tooltipInfo = getTooltipInfoDelegate(tooltipEventArgs);
            if (tooltipInfo == null)
                return;

            let selectionId = getDataPointIdentity(tooltipEventArgs);

            this.visualHostTooltipService.show({
                coordinates: tooltipEventArgs.coordinates,
                isTouchEvent: false,
                dataItems: tooltipInfo,
                identities: selectionId ? [selectionId] : [],
            });
        });
```

* **makeTooltipEventArgs**: Extracts the context from the D3 selected elements into a tooltipEventArgs. It calculates the coordinates as well.
* **getTooltipInfoDelegate**: It then builds the tooltip content from the tooltipEventArgs. It's a callback to the BarChart class, because it is the visual's logic. It's the actual text content to display in the tooltip.
* **getDataPointIdentity**: Unused in this sample.
* **this.visualHostTooltipService.show**: The call to display the tooltip.  

Additional handling can be found in the sample for `mouseout` and `mousemove` events.

For more information, see the [SampleBarChart visual repository](https://github.com/Microsoft/PowerBI-visuals-sampleBarChart/commit/981b021612d7b333adffe9f723ab27783c76fb14).

### Populate the tooltip content by the getTooltipData method

The BarChart class was added with a `getTooltipData` member, which simply extracts the `category`, `value`, and `color` of the data point into a VisualTooltipDataItem[] element.

```typescript
        private static getTooltipData(value: any): VisualTooltipDataItem[] {
            return [{
                displayName: value.category,
                value: value.value.toString(),
                color: value.color,
                header: 'ToolTip Title'
            }];
        }
```

In the preceding implementation, the `header` member is constant, but you can use it for more complex implementations, which require dynamic values. You can populate the `VisualTooltipDataItem[]` with more than one element, which adds multiple lines to the tooltip. It can be useful in visuals such as stacked bar charts where the tooltip might display data from more than a single data point.

### Call the addTooltip method

The final step is to call the `addTooltip` method when the actual data might change. This call takes place in the `BarChart.update()` method. A call is made to monitor the selection of all the "bar" elements, passing only the `BarChart.getTooltipData()`, as mentioned previously.

```typescript
        this.tooltipServiceWrapper.addTooltip(this.barContainer.selectAll('.bar'),
            (tooltipEvent: TooltipEventArgs<number>) => BarChart.getTooltipData(tooltipEvent.data),
            (tooltipEvent: TooltipEventArgs<number>) => null);
```

## Add tooltips support to the report page

To add report page tooltips support (the ability to modify tooltips in the format pane of the report page), add a `tooltips` [object](objects-properties.md) in the *capabilities.json* file.

For example:

```json
{
    "tooltips": {
        "supportedTypes": {
            "default": true,
            "canvas": true
        },
        "roles": [
            "tooltips"
        ]
    }
}
```

You can then define the tooltips from the [**Formatting pane**](../../create-reports/desktop-accessibility-creating-tools.md#formatting-pane) of the report page.

* `supportedTypes`: The tooltip configuration supported by the visual and reflected in the fields well.
  * `default`: Specifies whether the "automatic" tooltips binding via the data field is supported.
  * `canvas`: Specifies whether the report page tooltips are supported.
* `roles`: (Optional) After it's defined, it instructs what data roles are bound to the selected tooltip option in the fields well.

:::image type="content" source="media/add-tooltips/report-page-tooltips.png" alt-text="Screenshot that shows the Report page tooltip dialog.":::

For more information, see [Report page tooltips usage guidelines](https://powerbi.microsoft.com/blog/power-bi-desktop-march-2018-feature-summary/#tooltips).

To display the report page tooltip, after the Power BI host calls `ITooltipService.Show(options: TooltipShowOptions)` or `ITooltipService.Move(options: TooltipMoveOptions)`, it consumes the selectionId (`identities` property of the preceding `options` argument). To be retrieved by the tooltip, SelectionId should represent the selected data (category, series, and so on) of the item you hovered over.

An example of sending the selectionId to tooltip display calls is shown in the following code:

```typescript
    this.tooltipServiceWrapper.addTooltip(this.barContainer.selectAll('.bar'),
        (tooltipEvent: TooltipEventArgs<number>) => BarChart.getTooltipData(tooltipEvent.data),
        (tooltipEvent: TooltipEventArgs<number>) => tooltipEvent.data.selectionID);
```

## Add modern tooltips support to the report page

From API version 3.8.3 you can also create [*modern* visual tooltips](../../create-reports/desktop-visual-tooltips.md). Modern visual tooltips add data point drill actions to your tooltips, and update the style to match your report theme. To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

:::image type="content" source="media/add-tooltips/modern-tooltip.png" alt-text="Screenshot that shows a modern tooltip.":::

To manage report page modern tooltips support, add the `supportEnhancedTooltips` property to the `tooltips` [object](objects-properties.md) in the *capabilities.json* file.

For example:

```json
{
    "tooltips": {
        ... ,
        "supportEnhancedTooltips": true
    }
}
```

See an example of the modern tooltips feature being used in the [SampleBarChart](https://github.com/microsoft/PowerBI-visuals-sampleBarChart) code.

> [!NOTE]
> Adding this feature to the *capabilities.json* file gives the user the possibility of enabling this feature for the report. Keep in mind that the user will still have to **[enable the modern tooltip feature](../../create-reports/desktop-visual-tooltips.md#turn-on-the-new-tooltips)** in the report settings.

## Related content

* [Tooltip utils](utils-tooltip.md)
* [Customize tooltips in Power BI](../../create-reports/desktop-custom-tooltips.md)
* [Create tooltips based on report pages in Power BI Desktop](../../create-reports/desktop-tooltips.md)



================================================
FILE: powerbi-docs/developer/visuals/adding-external-libraries.md
================================================
---
title:  Adding external libraries to Power BI visuals
description: Learn how to install, import, and call external libraries in Power BI visuals to enhance your visualizations with additional functionality.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 3/09/2025
#customer intent: As a developer, I want to learn how to use external libraries in Power BI visuals so I can enhance my visualizations with additional functionality.
---

# How to add external libraries

This article describes how to use external libraries in Power BI visuals. This article also describes how to install, import, and call external libraries from a Power BI visual's code.

## JavaScript libraries

1. Install an external JavaScript library by using a package manager, such as *npm* or *yarn*.
2. Import the required modules into the source files using the external library.

>[!NOTE]
> To add typings to your JavaScript library, and get [Intellisense](https://code.visualstudio.com/docs/editor/intellisense) and compile-time safety, make sure that you install the appropriate package.

### Installing the D3 library

This section provides an example of installing the [D3 library](https://www.npmjs.com/package/d3) and the [@types/d3](https://www.npmjs.com/package/@types/d3) package using [npm](https://www.npmjs.com/) in the code of a Power BI visual.

For a full example, see the [Power BI visualizations](https://github.com/microsoft/powerbi-visuals-gantt/blob/master/src/gantt.ts#L29) code.

1. Install the *d3* package and the *@types/d3* package.

    ```powershell
    npm install d3@5 --save
    npm install @types/d3@5 --save
    ```

2. Import the *d3* library in the files that use it, such as *visual.ts*.

    ```typescript
    import * as d3 from "d3";
    ```

## CSS framework

1. Install an external CSS framework by using any package manager, such as *npm* or *yarn*.
2. In the *.less* file of the visual, include the `import` statement.

### Installing bootstrap

This section provides an example of installing [bootstrap](https://www.npmjs.com/package/bootstrap) using [npm](https://www.npmjs.com/).

For a full example, see the [Power BI visualizations](https://github.com/Microsoft/powerbi-visuals-sankey/blob/c8200da56913cd8b253be949a35fad0f4472b6de/style/visual.less#L32) code.

1. Install the *bootstrap* package.

    ```powershell
    npm install bootstrap --save
    ```

2. Include the `import` statement in *visual.less*.

    ```less
    @import (less) "node_modules/bootstrap/dist/css/bootstrap.css";
    ```

## Related content

[Set up your environment for developing a Power BI visual](environment-setup.md)



================================================
FILE: powerbi-docs/developer/visuals/advanced-edit-mode.md
================================================
---
title: Advanced edit mode in Power BI visuals
description: Learn how to enable and use the Advanced edit mode to configure advanced UI controls in Power BI visuals.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: conceptual
ms.date: 02/05/2025
---

# Advanced edit mode in Power BI visuals

Advanced edit mode enables you to use advanced UI controls in your Power BI visual. From report editing mode, select the **Edit** button on a visual and set the edit mode to **Advanced**. The visual uses the `EditMode` flag to determine if it should display this UI control.

:::image type="content" source="media/advanced-edit-mode/edit-mode.png" alt-text="Screenshot that shows how to open Edit Mode.":::

By default, the visual doesn't support advanced edit mode (`"advancedEditModeSupport: 0"`). To enable Advanced edit mode, add a line to the visual's *capabilities.json* file by setting the `advancedEditModeSupport` property.

The possible values are:

- `0` - **NotSupported**. The visual doesn't support Advanced edit mode. The **Edit** button is not displayed on this visual.
- `1` - **SupportedNoAction**. The visual supports Advanced edit mode and doesn't require any further changes.
Power BI doesn't switch the visual to *Focus* Mode. Developers can use this setting as an external button to run several processes in the same viewport.
- `2` - **SupportedInFocus**. The visual supports Advanced edit mode and requires the host to enter Focus mode when entering Advanced edit mode.

## Enter advanced edit mode

An **Edit** button is displayed if:

- The `advancedEditModeSupport` property is set in the *capabilities.json* file to either `SupportedNoAction` or `SupportedInFocus`.
- The visual is viewed in report editing mode.

If `advancedEditModeSupport` property is missing from the *capabilities.json* file or set to `NotSupported`, the **Edit** button doesn't appear.

When you select **Edit**, the visual gets an update() call with EditMode set to `Advanced`. Depending on the value that's set in the *capabilities.json* file, the following actions occur:

- `SupportedNoAction`: The host doesn’t require further action.
- `SupportedInFocus`: The host pops out the visual in Focus mode.

You can read more about how to configure the *capabilities.json* file in [Capabilities and properties of Power BI visuals](capabilities.md). 

## Exit advanced edit mode

The **Back to report** button appears if the `advancedEditModeSupport` property is set in the *capabilities.json* file to `SupportedInFocus`. 

## Related content

[Add conditional formatting](conditional-format.md)



================================================
FILE: powerbi-docs/developer/visuals/analytics-pane.md
================================================
---
title: The Analytics pane in Power BI visuals
description: Learn how to manage the Analytics pane to create dynamic reference lines, like min, max, or average, in Power BI visuals.
author: billmath
ms.author: billmath
ms.reviewer: ''
featuredvideoid: ''
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 01/13/2024
#customer intent: As a developer, I want to learn how to manage the Analytics pane in Power BI visuals so that I can create dynamic reference lines, like min, max, or average, in my visuals.
---

# The Analytics pane in Power BI visuals

The [Analytics pane](../../transform-model/desktop-analytics-pane.md) allows you to add dynamic reference lines, like min, max, or average, to your visuals. These lines can help you zoom in on important trends or insights. This article discusses how to create Power BI visuals that can present and manage dynamic reference lines in the **Analytics** pane.

:::image type="content" source="media/analytics-pane/visualization-pane-analytics-tab.png" alt-text="Screenshot of the Analytics pane in the Visualizations section.":::

> [!NOTE]
> The **Analytics** pane is available in API version 2.5.0. To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

## Manage the Analytics pane

Managing properties in the [**Analytics** pane](../../transform-model/desktop-analytics-pane.md) is similar to the managing properties in the [**Format** pane](./custom-visual-develop-tutorial-format-options.md). You define an [object](objects-properties.md) in the visual's [*capabilities.json*](capabilities.md) file.

For the **Analytics** pane, the object is defined as follows:

### [API 5.1+](#tab/API-5-1)

Under the object's definition, add only the object name, property name and type as explained [here](./format-pane-general.md).
Example:

```json
{
  "objects": {
    "YourAnalyticsPropertiesCard": {
      "properties": {
        "show": {
          "type": {
            "bool": true
          }
        },
        "displayName": {
          "type": {
            "text": true
          }
        },
      ... //any other properties for your Analytics card
      }
    }
  ...
  }
}
```

### [Older APIs (before 5.1)](#tab/Old-API)

1. Under the object's definition, add the `displayName` and an `objectCategory` field with a value of `2`.

    >[!NOTE]
    >The `objectCategory` field defines the aspect of the visual that the object controls (1=Formatting, 2=Analytics). Use `Formatting` for elements such as look and feel, colors, axes, and labels. Use `Analytics` for elements such as forecasts, reference lines, and shapes.
    >
    > If the `objectCategory` value isn't specified, it defaults to `Formatting`.

1. Add the following two properties to the object:
   * `show` of type `bool` with a default value of `true`
   * `displayName` of type `text` with a default value of `true`

```json
{
  "objects": {
    "YourAnalyticsPropertiesCard": {
      "displayName": "Your analytics properties card's name",
      "objectCategory": 2,
      "properties": {
        "show": {
          "type": {
            "bool": true
          }
        },
        "displayName": {
          "type": {
            "text": true
          }
        },
      ... //any other properties for your Analytics card
      }
    }
  ...
  }
}
```

---

In the formatting settings card, specify that this card belongs to the analytics pane by setting the `set card analyticsPane` parameter to `true`. By default, `analyticsPane` parameter is false and the card will be added to formatting pane. See the following implementations:

#### [Using FormattingModel Utils](#tab/API-5-1-Impl-FormattingModel-Utils)

```typescript
class YourAnalyticsCardSettings extends FormattingSettingsCard {
    show = new formattingSettings.ToggleSwitch({
        name: "show",
        displayName: undefined,
        value: false,
        topLevelToggle: true
    });

    displayNameProperty = new formattingSettings.TextInput({
        displayName: "displayName",
        name: "displayName",
        placeholder: "",
        value: "Analytics Instance",
    });

    name: string = "YourAnalyticsPropertiesCard";
    displayName: string = "Your analytics properties card's name";
    analyticsPane: boolean = true; // <===  Add and set analyticsPane variable to true 
    slices = [this.show, this.displayNameProperty];
}
```

#### [Without FormattingModel Utils](#tab/API-5-1-Without-FormattingModel-Utils)

```typescript
      const show: powerbi.visuals.EnabledSlice = {
          uid: "enableAxisCard_topLevelToggle_show_uid",
          suppressDisplayName: true,
          control: {
              type: powerbi.visuals.FormattingComponent.ToggleSwitch,
              properties: {
                  descriptor: {
                      objectName: "YourAnalyticsPropertiesCard",
                      propertyName: "show"
                  },
                  value: false
              }
          }
      }
        
      const displayNameProperty: powerbi.visuals.FormattingSlice = {
          uid: "enableAxisCard_displayName_uid",
          suppressDisplayName: true,
          control: {
              type: powerbi.visuals.FormattingComponent.TextInput,
              properties: {
                  descriptor: {
                      objectName: "YourAnalyticsPropertiesCard",
                      propertyName: "displayName"
                  },
                  value: "Analytics Instance",
                  placeholder: ""
              }
          }
      }

      const averageLineCard: powerbi.visuals.FormattingCard = {
          displayName: "Your analytics properties card's name",
          uid: "yourAnalyticsCard_uid",
          analyticsPane: true, // <===  Add and set analyticsPane variable to true 
          topLevelToggle: show,
          groups: [{
              displayName: undefined,
              uid: "yourAnalyticsCard_group_uid",
              slices: [displayNameProperty],
          }]
      };
```

---

Define other properties the same way that you do for **Format** objects, and enumerate objects just as you do in the **Format** pane.

> [!NOTE]
>
> * Use the **Analytics** pane only for objects that add new information or shed new light on the presented information (for example, dynamic reference lines that illustrate important trends).
> * Any options that control the look and feel of the visual (that is, formatting) should be limited to the **Formatting** pane.

## Considerations and limitations

* The **Analytics** pane has no multi-instance support yet. The only [selector](objects-properties.md#objects-selectors-types) an object can have is *static* (that is, `selector: null`), and Power BI visuals can't have multiple instances of a user-defined card.
* Properties of type `integer` aren't displayed correctly. As a workaround, use type `numeric` instead.

## Related content

[Add conditional formatting](conditional-format.md)


================================================
FILE: powerbi-docs/developer/visuals/authentication-api.md
================================================
---
title: The authentication API in Power BI custom visuals
description: This article describes the Authentication API needed to obtain Microsoft Entra ID access tokens for single sign-on (SSO) users.
author: billmath
ms.author: billmath
ms.reviewer: tebercov , david
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 06/26/2024
#customer intent: To understand how to use the Authentication API in Power BI custom visuals.
---

# Authentication API

The Authentication API enables visuals to obtain Microsoft Entra ID (formerly known as Azure AD) access tokens for signed-in users, facilitating single sign-on authentication.

Power BI administrators can enable or disable the API through a [global switch](/fabric/admin/organizational-visuals). The default setting blocks (disables) the API.

The API is applicable only for AppSource visuals, and not for private visuals. Visuals that are under development can be tested in debug mode before they're published.

## Supported environments

The following environments are supported:

* Web
* Desktop
* RS Desktop
* Mobile

## Unsupported environments

The following environments aren't yet supported:

* RS Service
* Embedded analytics
* Teams

## How to use the Authentication API

In the *capabilities.json* file, add the "AADAuthentication" privilege with a Microsoft Entra ID registered application URI for each supported cloud. Fabric generates a token according to the audience configured for the current cloud, and delivers it to the visual.  
The visual can then utilize the token to authenticate against the respective audience, representing its backend service:

```json
"privileges": [
    {
        "name": "AADAuthentication",
        "parameters": {
            "COM": "https://contoso.com",
            "CN": "https://contoso.cn"
        }
    }
]
```

In the *pbiviz.json* file, set the API version to **5.9.1** or higher:

The newly exposed **AcquireAADTokenService** contains two methods:

* **acquireAADToken**: Returns an authentication token payload of type `AcquireAADTokenResult` for the visual or null if it can't be fetched.

    ```typescript
     /**
     * Enum representing the various clouds supported by the Authentication API.
     */
    export const enum CloudName {
        COM = "COM",         // Commercial Cloud
        CN = "CN",           // China Cloud
        GCC = "GCC",         // US Government Community Cloud
        GCCHIGH = "GCCHIGH", // US Government Community Cloud High
        DOD = "DOD",         // US Department of Defense Cloud
    }
 
    /**
     * Interface representing information about the user associated with the token.
     */
    export interface AcquireAADTokenUserInfo {
        userId?: string;   // Unique identifier for the user
        tenantId?: string; // Unique identifier for the tenant
    }
 
    /**
     * Interface representing information about the fabric environment.
     */
    export interface AcquireAADTokenFabricInfo {
        cloudName?: CloudName; // Name of the cloud environment
    }
 
    /**
     * Interface representing the result of acquiring a Microsoft Entra ID token.
     */
    export interface AcquireAADTokenResult {
        accessToken?: string;       // Access token issued by Microsoft Entra ID
        expiresOn?: number;         // Expiration time of the access token
        userInfo?: AcquireAADTokenUserInfo;     // Information about the user associated with the token
        fabricInfo?: AcquireAADTokenFabricInfo; // Information about the fabric environment
    }
    ```

* **acquireAADTokenstatus**: Returns one of the following privilege statuses associated with acquiring the token.

  * **Allowed**: The privilege is allowed in the current environment.
  * **NotDeclared**: The privilege declaration is missing in visual capabilities section.
  * **NotSupported**: The privilege isn't supported in the current environment.
  * **DisabledByAdmin**: The Fabric administrator denied privilege usage.

The following sample code demonstrates how to acquire a Microsoft Entra ID token using the API:

 ```typescript
    // Step 1: Check the status of AAD token acquisition 
    const acquireTokenStatus = await this.acquireAADTokenService.acquireAADTokenstatus(); 
 
    // Step 2: Verify if acquiring the token is allowed 
    if (acquireTokenStatus === PrivilegeStatus.Allowed) { 
 
        // Step 3: Acquire the Microsoft Entra ID token
        const acquireAADTokenResult: AcquireAADTokenResult = await this.acquireAADTokenService.acquireAADToken(); 
 
        // Step 4: Confirm successful acquisition of the access token
        if (acquireAADTokenResult.accessToken) { 
 
            // Step 5: Call your backend API with the obtained token 
        } 
    } 
 
    // Step 6: Handle unsuccessful AAD token acquisition 
```

## Considerations and limitations

Token acquisition is blocked if any of the following conditions apply:​

* The tenant switch is turned off.

* The user isn't signed in (in Desktop).

* The ISV didn't preauthorize the Power BI application.

* The format of the AADAuthentication privilege parameter is invalid.

* The visual isn't publicly approved or isn't a debug visual.

* The visual’s backend service, configured as the audience by the visual, doesn't have appropriate consents for the Graph API in the consumer tenant using the visual. For more about consent, see [tenant administrator consent](entra-id-authentication.md#isv-consent).

## Related content

[Microsoft Entra ID application setup](./entra-id-authentication.md)



================================================
FILE: powerbi-docs/developer/visuals/bookmarks-support.md
================================================
---
title: Add bookmark support for Power BI custom visuals
description: Learn how to add bookmark support to your custom visuals in Power BI so that you can switch between different bookmarked states.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 04/03/2025
#customer intent: As a custom visuals developer, I want to learn how to add bookmark support to my visuals in Power BI so that I can switch between different bookmarked states.
---

# Add bookmark support to visuals in Power BI reports

With Power BI report bookmarks, you can capture and save a configured view of a report page. Then you can go back to the saved view quickly and easily whenever you want. The bookmark saves the entire configuration, including selections and filters.

For more information about bookmarks, see [Use bookmarks to share insights and build stories in Power BI](../../create-reports/desktop-bookmarks.md).

## Visuals that support bookmarks

A Power BI visual that supports bookmarks has to be able to save and provide the correct information when needed.
If your visual interacts with other visuals, selects data points, or filters other visuals, you need to save the bookmarked state in the visual's *filterState* properties.

> [!NOTE]
>> Creating a visual that supports bookmarks requires:
>
> - Visual API version 1.11.0 or later for non-filter visuals that use `SelectionManager`.
> - Visual API version 2.6.0 or later for filter visuals.
> - To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

## How Power BI visuals interact with Power BI in report bookmarks

Let's say you want to create several bookmarks on a report page with each bookmark having different data points selected.

First, select one or more data points in your visual. The visual passes your selections to the host. Then select **Add** in the [**Bookmark pane**](../../consumer/end-user-bookmarks.md). Power BI saves the current selections for the new bookmark.

Do this several times to create new bookmarks. After you create the bookmarks, you can switch between them.

Each time you select a bookmark, Power BI restores the saved filter or selection state and passes it to the visuals. The visuals in the report are highlighted or filtered according to the state stored in the bookmark. To restore the correct state, your visual must pass the correct selection state to the host (for example, the colors of rendered data points).

The new selection state (or filter) is communicated through the `options.jsonFilters` property in the `update` method. The `jsonFilters` can be either [`Advanced Filter`](filter-api.md#the-advanced-filter-api) or [`Tuple Filter`](filter-api.md#the-tuple-filter-api-multi-column-filter).

- If your visual contains selected data points, [reset the selection](#visuals-with-selection) to that of the selected bookmark by using the callback function, `registerOnSelectCallback`, in `ISelectionManager`.
- If your visual uses filters to select data, [reset the filter](#visuals-with-a-filter) values to the corresponding values of the selected bookmark.

## Visuals with selection

> [!NOTE]
> InteractivityService has been deprecated.

If your visual interacts with other visuals using [Selection](https://github.com/PowerBi-Projects/PowerBI-visuals/blob/master/Tutorial/Selection.md), you can add bookmark support in one of two ways:

- Through [InteractivityService](#use-interactivityservice-to-restore-bookmark-selections---deprecated) to manage selections, use the `applySelectionFromFilter`. This is deprecated method.
- Through [SelectionManager](#use-selectionmanager-to-restore-bookmark-selections).

### Use **InteractivityService** to restore bookmark selections - deprecated

If your visual uses [InteractivityService](https://github.com/microsoft/powerbi-visuals-utils-interactivityutils/blob/master/src/interactivityService.ts), you don't need any other actions to support the bookmarks in your visual.

When you select a bookmark, the utility automatically handles the visual's selection state.

### Use SelectionManager to restore bookmark selections

You can save and recall bookmark selections using the `ISelectionManager.registerOnSelectCallback` method as follows:

When you select a bookmark, Power BI calls the `callback` method of the visual with the corresponding selections.

```typescript
this.selectionManager.registerOnSelectCallback(
    (ids: ISelectionId[]) => {
        //called when a selection was set by Power BI
    });
);
```

Let's assume you created a data point in the [visualTransform](https://github.com/Microsoft/PowerBI-visuals-sampleBarChart/blob/master/src/barChart.ts#L74) method of your visual.

The `datapoints` looks like this:

```typescript
visualDataPoints.push({
    category: categorical.categories[0].values[i],
    color: getCategoricalObjectValue<Fill>(categorical.categories[0], i, 'colorSelector', 'fill', defaultColor).solid.color,
    selectionId: host.createSelectionIdBuilder()
        .withCategory(categorical.categories[0], i)
        .createSelectionId(),
    selected: false
});
```

You now have `visualDataPoints` as your data points and the `ids` array passed to the `callback` function.

At this point, the visual should compare the `ISelectionId[]` array with the selections in your `visualDataPoints` array, and then mark the corresponding data points as selected.

```typescript
this.selectionManager.registerOnSelectCallback(
    (ids: ISelectionId[]) => {
        visualDataPoints.forEach(dataPoint => {
            ids.forEach(bookmarkSelection => {
                if (bookmarkSelection.equals(dataPoint.selectionId)) {
                    dataPoint.selected = true;
                }
            });
        });
    });
);
```

After you update the data points, they'll reflect the current selection state stored in the `filter` object. Then, when the data points are rendered, the custom visual's selection state matches the state of the bookmark.

## Visuals with a filter

Let's assume that the visual creates a filter of data by date range. You have `startDate` and `endDate` as the start and end dates of the range.

The visual creates an advanced filter and calls the host method `applyJsonFilter` to filter data by the relevant conditions.

The target is the table used for filtering.

```typescript
import { AdvancedFilter } from "powerbi-models";

const filter: IAdvancedFilter = new AdvancedFilter(
    target,
    "And",
    {
        operator: "GreaterThanOrEqual",
        value: startDate
            ? startDate.toJSON()
            : null
    },
    {
        operator: "LessThanOrEqual",
        value: endDate
            ? endDate.toJSON()
            : null
    });

this.host.applyJsonFilter(
    filter,
    "general",
    "filter",
    (startDate && endDate)
        ? FilterAction.merge
        : FilterAction.remove
);
```

Each time you select a bookmark, the custom visual gets an `update` call.

In the `update` method, the visual checks the filter in the object:

```typescript
const filter: IAdvancedFilter = FilterManager.restoreFilter(
    && options.jsonFilters
    && options.jsonFilters[0] as any
) as IAdvancedFilter;
```

If the `filter` object isn't null, the visual restores the filter conditions from the object:

```typescript
const jsonFilters: AdvancedFilter = this.options.jsonFilters as AdvancedFilter[];

if (jsonFilters
    && jsonFilters[0]
    && jsonFilters[0].conditions
    && jsonFilters[0].conditions[0]
    && jsonFilters[0].conditions[1]
) {
    const startDate: Date = new Date(`${jsonFilters[0].conditions[0].value}`);
    const endDate: Date = new Date(`${jsonFilters[0].conditions[1].value}`);

    // apply restored conditions
} else {
    // apply default settings
}
```

After that, the visual changes its internal state to match the current conditions. The internal state includes the data points and visualization objects (lines, rectangles, and so on).

The [Timeline Slicer](../../visuals/desktop-slicer-filter-date-range.md) visual changes the range selector to the corresponding data ranges.

## Save the filter state of the visual

In addition to saving the conditions of the filter for the bookmark, you also can save other filter aspects.

For example, the [Timeline Slicer](https://github.com/microsoft/powerbi-visuals-timeline/commit/8b7d82dd23cd2bd71817f1bc5d1e1732347a185e) stores the `Granularity` property values as a filter state. It allows the granularity of the timeline (days, months, years, etc.) to change as you change bookmarks.

The `filterState` property saves a filter aspect as a property. The visual can store various `filterState` values in bookmarks.

To save a property value as a filter state, set the object property as `"filterState": true` in the *capabilities.json* file.

## Related content

- [What are bookmarks](../../consumer/end-user-bookmarks.md)
- [Create bookmarks in desktop reports](../../create-reports/desktop-bookmarks.md#create-report-bookmarks)



================================================
FILE: powerbi-docs/developer/visuals/capabilities.md
================================================
---
title: Capabilities and properties of Power BI visuals
description: This article describes the capabilities.json file and properties of Power BI visuals that can be defined in the file.
author: billmath
ms.author: billmath
ms.reviewer:
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 12/12/2023
#customer intent: To understand the capabilities.json file and properties of Power BI visuals.
---

# Capabilities and properties of Power BI visuals

Every visual has a *capabilities.json* file that is created automatically when you run the `pbiviz new <visual project name>` command to [create a new visual](develop-circle-card.md). The *capabilities.json* file describes the visual to the host.

The *capabilities.json* file tells the host what kind of data the visual accepts, what customizable attributes to put on the properties pane, and other information needed to create the visual. Starting from API v4.6.0, **all properties on the capabilities model are *optional* except `privileges`, which are *required*.**

The *capabilities.json* file lists the root objects in the following format:

```json
{
    "privileges": [ ... ],
    "dataRoles": [ ... ],
    "dataViewMappings": [ ... ],
    "objects":  { ... },
    "supportsHighlight": true|false,
    "advancedEditModeSupport": 0|1|2,
    "sorting": { ... }
    ...
}
```

When you create a new visual, the default *capabilities.json* file includes the following root objects:

* [privileges](#privileges-define-the-special-permissions-that-your-visual-requires)
* [dataRoles](#dataroles-define-the-data-fields-that-your-visual-expects)
* [dataViewMappings](#dataviewmappings-how-you-want-the-data-mapped)
* [objects](#objects-define-property-pane-options)

The above objects are the ones needed for data-binding. They can be edited as necessary for your visual.

The following other root objects are optional and can be added as needed:

* [tooltips](add-tooltips.md#add-tooltips-support-to-the-report-page)
* [supportsHighlight](highlight.md)
* [sorting](sort-options.md)
* [drilldown](drill-down-support.md)
* [expandCollapse](dataview-mappings.md#expand-and-collapse-row-headers)
* [supportsKeyboardFocus](supportskeyboardfocus-feature.md)
* [supportsSynchronizingFilterState](enable-sync-slicers.md)
* [advancedEditModeSupport](advanced-edit-mode.md)
* [supportsLandingPage](landing-page.md#create-a-landing-page)
* [supportsEmptyDataView](landing-page.md#create-a-landing-page)
* [supportsMultiVisualSelection](supportsmultivisualselection-feature.md)
* [subtotals](total-subtotal-api.md)
* [keepAllMetadataColumns](dataview-mappings.md#keep-all-metadata-columns)
* [migration](identity-filter-api.md)

You can find all these objects and their parameters in the [*capabilities.json* schema](https://github.com/microsoft/powerbi-visuals-api/blob/master/schema.capabilities.json#L4-L65)

## privileges: define the special permissions that your visual requires

Privileges are special operations your visual requires access to in order to operate. Privileges take an array of `privilege` objects, which defines all privilege properties. The following sections describe the privileges that are available in Power BI.

> [!NOTE]
> From API v4.6.0, privileges **must** be specified in the *capabilities.json* file.  In earlier versions, remote access is automatically granted and downloading to files isn't possible. To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

### Define privileges

A JSON privilege definition contains these components:

* `name` - (string) The name of the privilege.
* `essential` - (Boolean) Indicates whether the visual functionality requires this privilege. A value of `true` means the privilege is required; `false` means the privilege isn't mandatory.
* `parameters` - (string array)(optional) Arguments. If `parameters` is missing, it's considered an empty array.

The following are types of privileges that must be defined:

* [Access External resources](#allow-web-access)
* [Download to file](#download-to-file)
* [Local storage privileges](#local-storage-privileges)

>[!NOTE]
>Even with these privileges granted in the visual, the admin has to enable the switch in the admin settings to allow people in their organization to benefit from these settings.

#### Allow web access

To allow a visual to access an external resource or web site, add that information as a *privilege* in the capabilities section. The privilege definition includes an optional list of URLs the visual is allowed to access in the format `http://xyz.com` or `https://xyz.com`. Each URL can also include a wildcard to specify subdomains.

The following code is an example of privileges setting allowing access to external resources:

```json
{
    "name": "WebAccess",
    "essential": true,
    "parameters": [ "https://*.microsoft.com", "http://example.com" ]
}
```

The preceding `WebAccess` privilege means that the visual needs to access any subdomain of the `microsoft.com` domain via HTTPS protocol only and `example.com` without subdomains via HTTP, and that this access privilege is essential for the visual to work.

#### Download to file

To allow the user to export data from a visual into a file, set `ExportContent` to `true`.

This `ExportContent` setting enables the visual to export data to files in the following formats:

* .txt
* .csv
* .json
* .tmplt
* .xml
* .pdf
* .xlsx

This setting is separate from and not affected by download restrictions applied in the organization's [export and sharing](/power-bi/admin/service-admin-portal-export-sharing) tenant settings.

The following code is an example of a privileges setting that allows downloading to a file:

```json
"privileges": [
    {
        "name": "ExportContent",
        "essential": true
    }
]
```

#### Local storage privileges

This privilege allows a custom visual to store information on the user's local browser.

The following is an example of a privileges setting that allows use of the local storage:

```json
"privileges": [
    {
        "name": "LocalStorage",
        "essential": true
    }
]
```

#### No privileges needed

If the visual doesn't requires any special permissions, the `privileges` array should be empty:

```json
  "privileges": []
```

#### Multiple privileges

The following example shows how to set several privileges for a custom visual.

```json
"privileges": [
    {
        "name": "WebAccess",
        "essential": true,
        "parameters": [ "https://*.virtualearth.net" ]
    },
    {
        "name": "ExportContent",
        "essential": false
    }
]
```

## dataroles: define the data fields that your visual expects

To define fields that can be bound to data, you use `dataRoles`. `dataRoles` is an array of `DataViewRole` objects, which defines all the required properties. The `dataRoles` objects are the **fields** that appear on the [Properties pane](../../visuals/service-getting-started-with-color-formatting-and-axis-properties.md).

The user drags data fields into them to bind data the data fields to the objects.

### DataRole properties

Define DataRoles with the following properties:

* **name**: The internal name of this data field (must be unique).
* **displayName**: The name displayed to the user in the **Properties** pane.
* **kind**: The kind of field:
  * `Grouping`: Set of discrete values that are used to group measure fields.
  * `Measure`: Single numeric values.
  * `GroupingOrMeasure`: Values that can be used as either a grouping or a measure.
* **description**: A short text description of the field (optional).
* **requiredTypes**: The required type of data for this data role. Values that don't match are set to null (optional).
* **preferredTypes**: The preferred type of data for this data role (optional).

#### Valid data types for requiredTypes and preferredTypes

* **bool**: A boolean value
* **integer**: An integer value
* **numeric**: A numeric value
* **text**: A text value
* **geography**: A geographic data

### dataRoles example

```json
"dataRoles": [
    {
        "displayName": "My Category Data",
        "name": "myCategory",
        "kind": "Grouping",
        "requiredTypes": [
            {
                "text": true
            },
            {
                "numeric": true
            },
            {
                "integer": true
            }
        ],
        "preferredTypes": [
            {
                "text": true
            }
        ]
    },
    {
        "displayName": "My Measure Data",
        "name": "myMeasure",
        "kind": "Measure",
        "requiredTypes": [
            {
                "integer": true
            },
            {
                "numeric": true
            }
        ],
        "preferredTypes": [
            {
                "integer": true
            }
        ]
    }
]
...
}
```

The preceding data roles would create the fields that are displayed in the following image:

![Data role fields](media/capabilities/data-role-display.png)

## dataViewMappings: how you want the data mapped

The `dataViewMappings` objects describe how the data roles relate to each other and  allow you to specify conditional requirements for the displaying data views.

Most visuals provide a single mapping, but you can provide multiple dataViewMappings. Each valid mapping produces a data view.

```json
"dataViewMappings": [
    {
        "conditions": [ ... ],
        "categorical": { ... },
        "table": { ... },
        "single": { ... },
        "matrix": { ... }
    }
]
```

For more information, see [Understand data view mapping in Power BI visuals](dataview-mappings.md).

## objects: define property pane options

Objects describe customizable properties that are associated with the visual. The objects defined in this section are the objects that appear in the [Format pane](../../create-reports/service-the-report-editor-take-a-tour.md#format-your-visuals). Each object can have multiple properties, and each property has a type associated with it.

```json
"objects": {
    "myCustomObject": {
        "properties": { ... }
    }
}
```

For example, to support [dynamic format strings](../../create-reports/desktop-custom-format-strings.md) in your custom visual, define the following object:

```json
"objects": {
        "general": {
            "properties": {
                "formatString": {
                    "type": {
                        "formatting": {
                            "formatString": true
                        }
                    }
                }
            }
        },
```

For more information, see [Objects and properties of Power BI visuals](objects-properties.md).

## Related content

* [Understand data view mapping in Power BI visuals](dataview-mappings.md)
* [Objects and properties of Power BI visuals](objects-properties.md)
* [Sorting options for Power BI visuals](sort-options.md)



================================================
FILE: powerbi-docs/developer/visuals/changelog.md
================================================
---
title: Power BI visuals API changelog
description: This article provides a list of each Power BI visuals API version and the main changes made to each update.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 07/03/2024
---

# Power BI visuals API changelog

This page contains a short summary of the existing API versions and what to expect in the upcoming version. Versions listed here are considered stable and don't change.

<!--- ## Coming soon
https://github.com/microsoft/powerbi-visuals-api/blob/main/CHANGELOG.md
* Authentication API extensions --->

## API v5.10.0

* **DataViewMetadataColumn** has a new property called `sourceFieldParameters`. This property indicates if the current field is the result of a field parameter. If a single field can originate from multiple field parameters, this property lists all the related field parameters.
* Supports Desktop June 2024

## API v5.9.1

* [`acquireAADTokenService`](./authentication-api.md): Enhanced to support the following clouds.
  * Commercial Cloud
  * China Cloud
  * US Government Community Cloud
  * US Government Community Cloud High
  * US Department of Defense Cloud

## API v5.9.0

* [**Hierarchical identity filter API**](./hierarchy-filter-api.md): Allows you to create a visual that uses Matrix DataView Mapping to filter data based on data points that use a hierarchical structure. This is useful for custom visuals that leverage group-on keys semantic models and want to filter hierarchies based on data points.
* [`acquireAADTokenService`](./authentication-api.md): Extended with additional properties
* Supports Desktop March 2024

## API v5.8.0

* [**Local storage API**](./local-storage.md): A new version of local storage API available for all custom visuals and controlled by a global setting that is *on* by default. The admin can Turn off the global setting to disable both the legacy API and the new version of the API.
* [**On-object support for custom visuals**](./on-object-formatting-api.md): On object support for custom visuals to optimize the user experience and provide a unified authoring experience on par with out of the box visuals.
* Supports Desktop February 2024

## API v5.7.0

* [**Power BI Custom Visuals Authentication API**](./authentication-api.md): Allows Custom Visuals to obtain Microsoft Entra access tokens through single sign-on (SSO), facilitating secure and efficient user-contextual operations.
* [**Dynamic drill control**](./dynamic-drill-down.md): Allows the visual to enable or disable the drill feature dynamically using an API call.
  * When the drill feature is enabled, all the functionalities of drilldown and expand/collapse features are available. These functionalities include API calls, context menu commands, header drill buttons, and support for hierarchy data.
  * When the drill feature is disabled, these functionalities aren't available.
* Supports Desktop December 2023

## API v5.4.0

* [**Improved keyboard navigation**](./supportskeyboardfocus-feature.md#enhanced-keyboard-accessibility): Improves accessibility and usability of your visuals by providing more options for interacting with visual using the keyboard.
* [**Detect filter use in reports**](./detect-filter-api.md): Detect if there are any filters applied to a report.
* Supports Desktop May 2023

## API v5.3.0

* SelectionId's update-fix for [matrix](./dataview-mappings.md#matrix-data-mapping) `dataView`.  
  > [!NOTE]
  > The selectionId's core data might change. Therefore, a persisted selectionId/identityIndex using an older API version might not be relevant in matrix visuals.
* [`downloadService`](./file-download-api.md): Adds a new method `exportVisualsContentExtended` that returns expanded result information of the download.
* Supports Desktop March 2023

## API v5.2.0

* **[Customized data reduction](./fetch-more-data.md#customized-data-reduction)** - This feature added to *capabilities.json* schema allows the [data fetch window](./fetch-more-data.md) to be modified dynamically by the custom visual code the report author.
* Supports Desktop December 2022

## API v5.1.0

* **[Custom sorting](./sort-options.md#custom-sorting)** - improved custom sorting for tables
* **[Subtotals](./total-subtotal-api.md)** - new *Subtotals Type* indicates if totals should be retrieved before or after the rest of the data
* **[Identity filter](./identity-filter-api.md)** - filter categorical data
* **[New format pane](./format-pane-general.md)** - design a custom visual that supports the new format pane design
* Supports Desktop October 2022

## API v4.7.0

* **[Licensing API](licensing-api.md)** - Sell, manage, and enforce licenses directly through the commercial marketplace.
* **[Drilldown API](drilldown-api.md)** - Create a visual that can trigger a drilldown operation on its own, without user interaction.  
* Supports Desktop July 2022

## API v4.6.0

* New capabilities property: [privileges](capabilities.md) and two privileges:
  * web access
  * download file from custom visual
* Added two corresponding [tenant admin switches](https://go.microsoft.com/fwlink/?linkid=2195700&clcid=0x409)
* **[Download API](./file-download-api.md)** to allow downloading visual to file
* Supports Desktop June 2022

## API v4.2.0

* New flags to [expand and collapse row headers](./dataview-mappings.md#expand-and-collapse-row-headers)
* Supports Desktop February 2022

## API v3.8.0

* Supports Desktop May 2021 and later.

## API v3.7.0

* Supports Desktop April 2021 and later.

## API v3.6.0

* Visual can receive updates from Power BI [without the need to bind any data](no-dataroles-support.md).
* Supports Desktop 2021 February and later.
* Supports Desktop RS May 2021 and later.

## API v3.4.0

* `fetchMoreData` : new `aggregateSegments` parameter (default true), for supporting no-aggregation fetchMoreData
* Supports Desktop 2020 November and later.
* Supports Desktop RS January 2021 and later.

## API v3.2.0

* Supports **[supportsMultiVisualSelection](./supportsmultivisualselection-feature.md)**
* Supports Desktop 2019 September and later.
* Supports Desktop RS January 2020 and later.

## API v2.6.0

* Adds **isInFocus** to update option and **switchFocusModeState** method to visual host
* Supports **subtotals** customization
* Supports Desktop 2019 June and later.
* Supports Desktop RS May 2019 and later.

## API v2.5.0

* Supports **[Analytics Pane](./analytics-pane.md)**
* Supports `SelectionIdBuilder` **withMatrixNode** and **withTable** methods
* No longer supports `DataRepetitionSelector` interface, replaced with `data.CustomVisualOpaqueIdentity` interface

## API v2.3.0

* **[Landing Page API](./landing-page.md)**
* **[Local Storage API](./local-storage.md)**
* **[Tuple filter API (multi-column filter)](./filter-api.md#the-tuple-filter-api-multi-column-filter)**
* **[Rendering Events API](./event-service.md)**

## API v2.2.0

* Supports **[restoring JSON Filter from DataView](./filter-api.md#restore-the-json-filter-from-the-data-view)**
* **[ContextMenu API](./context-menu.md)**
* Supports **[Drillthrough](../../create-reports/desktop-drillthrough.md)** feature

## API v2.1.0

* Performance enhancements:
  * Faster load times
  * Smaller memory footprint
  * Optimized data and event transactions  

### Release notes

* Refactored filtering APIs will be available in API 2.2 and are not supported in API 2.1.
* Visuals will only receive the dataView type that was declared in their capabilities. Visuals that used multiple dataView types will break as a result of this update.
* No longer supports `DataViewScopeIdentity` interface, replaced with `data.DataRepetitionSelector` interface. If you used key property of the `DataViewScopeIdentity` interface, you can replace it with `JSON.stringify(identity)`
* `undefined` is replaced with `null` inside the dataView. When iterating over an array using `var item in myArray` it skips on `undefined`, but doesn’t skip on `null`. Visuals that use this pattern may be broken by this update. Make sure to check for `null` in arrays:

   ```typescript
   for (var item in myArray) {
     if (!item) {
       continue;
     }
     console.log(item);
   }
   ```

* The `proto` property no longer stores hidden metadata\data inside the dataView. Visuals that access properties via `proto` may be broken by this update.

## API v1.13.0

* Supports **[Sync Slicers](./enable-sync-slicers.md)**, note this only works for single field slicers due to PBI current code state, [read more](../../visuals/power-bi-visualization-slicers.md).
* Accessibility: **[High-contrast support](./high-contrast-support.md)**
* Accessibility: Allow Keyboard Focus flag

## API v1.12.0

* Supports Themes
* Supports **[fetchMoreData](./fetch-more-data.md)**, note the **Fetch More Data API** overcomes the hard limit of 30K data points
* **[Canvas Tooltips API](./add-tooltips.md#add-tooltips-support-to-the-report-page)**

## API v1.11.0

* **[FilterManager API](./filter-api.md)**
* Supports **[Bookmarks](./bookmarks-support.md)** 

## API v1.10.0

* Adds `ILocalizationManager`
* **Authentication API**

## API v1.9.0

* **[launchUrl API](./launch-url.md)**

## API v1.8.0

* Supports new type **fillRule** (gradient) in capabilities schema
* Supports **rule** property in capabilities schema for object properties

## API v1.7.0

* Supports **[RESJSON](./localization.md#step-5---add-a-resources-file-for-each-language)**

## API v1.6.2

* Supports **[Edit mode](./advanced-edit-mode.md)** for visual to enter in-visual edit mode
* Supports **[Interactive (html) R Power BI visuals](https://github.com/PowerBi-Projects/PowerBI-visuals/blob/master/RVisualTutorial/CreateRHTML.md)**, based on html

## API v1.5.0

* Supports **[Allow interactions](./visuals-interactions.md)** for visual interactivity

## API v1.4.0

* Supports **[Localization](./localization.md)**

## API v1.3.0

* Supports **[Tooltips](./add-tooltips.md)**

## API v1.2.0

* Adds **colorPalette** to manage the colors used on your visual.
* Supports **Multiple selection** - selectionManager can accept an array of `SelectionId`.
* Supports **[R visuals](https://github.com/PowerBi-Projects/PowerBI-visuals/blob/master/RVisualTutorial/CreateRHTML.md)** using R scripts

## API v1.1.0

* Supports debug visual in iFrame
* Adds lightweight sandbox with faster initialization of the iFrame
* Fixes [Capabilities.objects does not support "text" type](https://github.com/Microsoft/PowerBI-visuals-tools/issues/12) issue
* Supports `pbiviz update` to update visual API type definitions and schema
* Supports `--api-version` flag in `pbiviz new` to create visuals with a specific API version
* Supports alpha release of API v1.2.0

### Visual Host

* Adds **createSelectionIdBuilder** to create unique identifiers used for data selection
* Adds **createSelectionManager** to manage the selection state of the visual and communicates changes to the visual host
* Adds an array of default **colors** to use in visuals

## API v1.0.0

* Initial API release



================================================
FILE: powerbi-docs/developer/visuals/conditional-format.md
================================================
---
title: Conditional formatting of Power BI custom visuals
description: Learn how to customize your Power BI visual by applying conditional formatting functionality based on data values.
author: billmath
ms.author: billmath
ms.reviewer: Jenny, Aleksei
ms.service: powerbi
ms.topic: how-to
ms.subservice: powerbi-custom-visuals
ms.date: 08/19/2024
#customer intent: As a Power BI visual developer, I want to learn how to apply conditional formatting to my custom visual so I can customize the visual appearance based on the data values.
---

# Add conditional formatting

[Conditional formatting](../../visuals/service-tips-and-tricks-for-color-formatting.md#add-conditional-formatting-for-visuals) lets a report creator specify how colors are displayed in a report, according to a numerical value.

This article describes how to add the conditional formatting functionality to your Power BI visual.

Currently, conditional formatting can only be applied to color.

## Add conditional formatting to your project

This section shows how to add conditional formatting to an existing Power BI visual. The example code in this article is based on the [SampleBarChart](https://github.com/microsoft/PowerBI-visuals-sampleBarChart) visual. You can examine the source code in [barChart.ts](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/master/src/barChart.ts).

### Add a conditional color formatting entry in the format pane

In this section you learn how to add a conditional color formatting entry, to a data point in format pane.

1. Use the `propertyInstanceKind` array in `VisualObjectInstance`, which is exposed by `powerbi-visuals-api`. Verify that your file includes this import:

    ```typescript
    import powerbiVisualsApi from "powerbi-visuals-api";
    ```

2. To specify the appropriate type of formatting (*Constant*, *ConstantOrRule*, or *Rule*), use  the `VisualEnumerationInstanceKinds` enum. Add the following import to your file:

    ```typescript
    import VisualEnumerationInstanceKinds = powerbiVisualsApi.VisualEnumerationInstanceKinds;
    ```

3. Set formatting property instance kind

#### [getFormattingModel API method](#tab/getFormattingModel)

To format properties that support conditional formatting, set the required instance kind in their `descriptor`.

```typescript
 public getFormattingModel(): powerbi.visuals.FormattingModel {
    // ...
    formattingGroup.slices.push(
        {
            uid: `colorSelector${barDataPoint_indx}_uid`,
            displayName: barDataPoint.category,
            control: {
                type: powerbi.visuals.FormattingComponent.ColorPicker,
                properties: {
                    descriptor: {
                        objectName: "colorSelector",
                        propertyName: "fill",                
                        selector: dataViewWildcard.createDataViewWildcardSelector(dataViewWildcard.DataViewWildcardMatchingOption.InstancesAndTotals),
                        altConstantValueSelector: barDataPoint.selectionId.getSelector(),
                        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule // <=== Support conditional formatting
                    },
                    value: { value: barDataPoint.color }
                }
            }
        }
    );
    // ...
 }
```

#### [enumerateObjectInstances API method - deprecated](#tab/enumerateObjectInstances)

List all the properties that you'd like to support conditional formatting, under `propertyInstanceKind` array. Define these properties in the `enumerateObjectInstances` method.

```typescript
public enumerateObjectInstances(options: EnumerateVisualObjectInstancesOptions): VisualObjectInstanceEnumeration {
        …
        case 'colorSelector':
            …
                objectEnumeration.push({
                    objectName: objectName,
                    displayName: barDataPoint.category,
                    properties: {
                        fill: {
                            solid: {
                                color: barDataPoint.color
                            }
                        }
                    },
                    selector: dataViewWildcard.createDataViewWildcardSelector(dataViewWildcard.DataViewWildcardMatchingOption.InstancesAndTotals),
                    altConstantValueSelector: barDataPoint.selectionId.getSelector(),

                    // List your conditional formatting properties
                    propertyInstanceKind: {
                        fill: VisualEnumerationInstanceKinds.ConstantOrRule
                    }
                });
            }
        …
}
```

---

`VisualEnumerationInstanceKinds.ConstantOrRule` creates the conditional formatting UI entry alongside the constant formatting UI element.

:::image type="content" source="media/conditional-formatting/conditional-formatting-ui.png" alt-text="Screenshot of the conditional formatting button, as it appears in Power BI, next to the regular color button.":::

### Define how conditional formatting behaves

Define how formatting is applied to your data points.

Using `createDataViewWildcardSelector` declared under `powerbi-visuals-utils-dataviewutils`, specify whether to apply conditional formatting to instances, totals, or both. For more information, see [DataViewWildcard](utils-dataview.md#).

Make the following changes to the properties you want to apply conditional formatting to:

* Replace the `selector` value with the `dataViewWildcard.createDataViewWildcardSelector(dataViewWildcardMatchingOption)` call. `DataViewWildcardMatchingOption` defines whether conditional formatting is applied to instances, totals, or both.

* Add the `altConstantValueSelector` property with the value previously defined for the `selector` property.

#### [getFormattingModel API method](#tab/getFormattingModel)

For formatting properties that support conditional formatting, set the required instance kind in their `descriptor`.

```typescript
 
 public getFormattingModel(): powerbi.visuals.FormattingModel {
    // ...

    formattingGroup.slices.push(
        {
            uid: `colorSelector${barDataPoint_indx}_uid`,
            displayName: barDataPoint.category,
            control: {
                type: powerbi.visuals.FormattingComponent.ColorPicker,
                properties: {
                    descriptor: {
                        objectName: "colorSelector",
                        propertyName: "fill",                
                        // Define whether the conditional formatting will apply to instances, totals, or both
                        selector: dataViewWildcard.createDataViewWildcardSelector(dataViewWildcard.DataViewWildcardMatchingOption.InstancesAndTotals),

                        // Add this property with the value previously defined for the selector property
                        altConstantValueSelector: barDataPoint.selectionId.getSelector(),

                        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule
                    },
                    value: { value: barDataPoint.color }
                }
            }
        }
    );

    // ...
 }
    
```

#### [enumerateObjectInstances API method - deprecated](#tab/enumerateObjectInstances)

List all the properties that want to support conditional formatting under the `propertyInstanceKind` array. Define these properties in the `enumerateObjectInstances` method.

```typescript
public enumerateObjectInstances(options: EnumerateVisualObjectInstancesOptions): VisualObjectInstanceEnumeration {
        …
        case 'colorSelector':
            …
                objectEnumeration.push({
                    objectName: objectName,
                    displayName: barDataPoint.category,
                    properties: {
                        fill: {
                            solid: {
                                color: barDataPoint.color
                            }
                        }
                    },
                    // Define whether the conditional formatting will apply to instances, totals, or both
                    selector: dataViewWildcard.createDataViewWildcardSelector(dataViewWildcard.DataViewWildcardMatchingOption.InstancesAndTotals),

                    // Add this property with the value previously defined for the selector property
                    altConstantValueSelector: barDataPoint.selectionId.getSelector(),

                    propertyInstanceKind: {
                        fill: VisualEnumerationInstanceKinds.ConstantOrRule
                    }
                });
            }
        …
}
```

---

## Considerations and limitations

Conditional formatting isn't supported for the following visuals:

* Table based visuals

* Matrix based visuals

We recommend that you don’t use conditional formatting with series. Instead, allow customers to format each series individually, making it easy to visually distinguish between series. Most out-of-the-box visuals with series share this approach.

## Related content

[DataViewUtils](utils-dataview.md)



================================================
FILE: powerbi-docs/developer/visuals/context-menu.md
================================================
---
title: Add context menu to Power BI custom visual
description: Learn how you can use the sample BarChart visual to add a context menu that displays on a Power BI visual.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 07/22/2024
#customer intent: As a Power BI visual developer, I want to learn how to add a context menu to my visual so that I can perform various operations on the visual.
---

# Add a context menu to your Power BI Visual

Every Power BI visual can display a context menu. The context menu allows you to perform various operations on the visual, such as analyzing, summarizing, or copying it.
When you right-click anywhere inside a visual's viewport (or long-press for touch devices), the context menu displays.
There are two modes of context menus for each visual. The mode that displays depends on where you click inside the visual:

* Call the context menu on **empty space** to see the basic context menu for the visual.
* Call the context menu on a specific **data point** for added options that can be applied to that data point. In this case, the context menu also contains the options *Show data point as a table*, *Include*, and *Exclude*, which will apply the corresponding filter to that data point.

## [Context menu on empty space](#tab/EmptySpace)

>[!div class="mx-imgBorder"]
>:::image type="content" source="media/context-menu/context-menu-called-on-empty-space-in-barchart.png" alt-text="Screenshot of a visual with the basic context menu called from an empty space.":::

## [Context menu on data point](#tab/DataPoint)

>[!div class="mx-imgBorder"]
>:::image type="content" source="media/context-menu/datapoint-context-menu-in-barchart.png" alt-text="Screenshot of a visual with the basic context menu called from a data point.":::

---

To have Power BI display a context menu for your visual, use `selectionManager.showContextMenu()` with parameters `selectionId` and a position (as an `{x:, y:}` object).

> [!NOTE]
>
> * The `selectionManager.showContextMenu()` is available from Visuals API version 2.2.0. To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.
> * All visuals published to AppSource must support both `ContextMenu` modes (empty space and data point).

The following example shows how to add a context menu to a visual. The code is taken from the `barChart.ts` file, which is part of the [sample BarChart visual](https://github.com/Microsoft/PowerBI-visuals-sampleBarChart):

```typescript
constructor(options: VisualConstructorOptions) {
        ...
        this.handleContextMenu();
    }

private handleContextMenu() {
        this.rootSelection.on('contextmenu', (event: PointerEvent, dataPoint) => {
            this.selectionManager.showContextMenu(dataPoint ? dataPoint: {}, {
                x: mouseEvent.clientX,
                y: mouseEvent.clientY
            });
            mouseEvent.preventDefault();
        });
    }
```

## Related content

* [Add interactivity into visual by Power BI visuals selections](selection-api.md)
* [Build a bar chart](create-bar-chart.md)

More questions? [Ask the Power BI Community](https://community.powerbi.com)



================================================
FILE: powerbi-docs/developer/visuals/create-bar-chart.md
================================================
---
title: Build a bar chart visual in Power BI 
description: Learn how to build a sample Power BI visual with code using this step-by-step guide. This sample visual displays a bar chart.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: tutorial
ms.date: 05/13/2024
#customer intent: As a Power BI visual developer, I want to learn how to build a bar chart visual so I can display data in a simple, visual format.
---

# Tutorial: Build a bar chart

This tutorial shows you how to develop a Power BI visual that displays data in the form of a simple bar chart. This visual supports a minimal amount of customization. Other pages of this documentation explain how to add further customization like [context menus](context-menu.md), [tool-tips](add-tooltips.md), and more.

In this tutorial, you learn how to:

> [!div class="checklist"]
>
> * Define the capabilities of your visual
> * Understand the source code used to build a visual
> * Render the visual
> * Add objects to the properties pane
> * Package the visual

## Set up your environment

[!INCLUDE[Power B I tutorials prerequisites](../../includes/visual-tutorial-prerequisites.md)]

>[!NOTE]
>If the D3 JavaScript library wasn't installed as part of your setup, install it now. From PowerShell, run `npm i d3@latest --save`

Creating a bar chart visual involves the following steps:

1. [Create a new project](#create-a-new-project)
2. [Define the capabilities](#define-capabilities) file -`capabilities.json`
3. Create the [visual API](#visual-api)
4. [Package](#package-the-visual) your visual -*pbiviz.json*

## Create a new project

The purpose of this tutorial is to help you understand how a visual is structured and written. You can follow these instructions to create a bar code visual from scratch, or you can [clone the source code repository](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/tree/main) and use it to follow along without creating your own visual.

## [Create a new visual](#tab/CreateNewVisual)

1. Open **PowerShell** and navigate to the folder you want to create your project in.

2. Enter the following command:

    ```PowerShell
    pbiviz new BarChart
    ```

    You should now have a folder called *BarChart* containing the visual's files.

3. In **VS Code**, open the [*tsconfig.json*] (visual-project-structure.md#tsconfigjson) file and change the name of "files" to "src/barChart.ts".

    ```typescript
    "files": [
    "src/barChart.ts"
    ]
    ```

    The *tsconfig.json* "files" object points to the file where the main class of the visual is located.

    Your final *tsconfig.json* file should look like [this](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/main/tsconfig.json).

4. The [*package.json*](visual-project-structure.md#packagejson) file contains a list of project dependencies. Replace your *package.json* file with [this one](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/main/package.json).

## [Clone source code](#tab/CloneSourcecode)

```typescript
git clone
```

---

You should now have a new folder for your visual with the following files and folders:

:::image type="content" source="./media/create-bar-chart/visual-structure.png" alt-text="Screenshot showing the structure of visuals.":::

For a detailed explanation of the function of each of these files, see [Power BI visual project structure](visual-project-structure.md).

The two files we focus on in this tutorial are the *capabilities.json* file, which describes the visual to the host, and the *src/barchart.ts* file, which contains the visual's API.

## Define capabilities

The [*capabilities.json*](capabilities.md) file is where we bind data to the host. We describe the kind of data fields it accepts and what features the visual should have.

:::image type="content" source="./media/create-bar-chart/data-binding.png" alt-text="Screenshot showing how to bind data in the field bucket.":::

### Define data roles

Variables are defined and bound in the [`dataRoles`](capabilities.md#dataroles-define-the-data-fields-that-your-visual-expects) section of the capabilities file. We want our bar chart to accept two types of variables:

* **Categorical** data represented by the different bars on the chart
* **Numerical**, or measured data, which is represented by the height of each bar

In **Visual Studio Code**, in the *capabilities.json* file, confirm that the following JSON fragment appears in the object labeled "dataRoles".

```json
    "dataRoles": [
        {
            "displayName": "Category Data",
            "name": "category",
            "kind": "Grouping"
        },
        {
            "displayName": "Measure Data",
            "name": "measure",
            "kind": "Measure"
        }
    ],
```

### Map the data

 Next, add [data mapping](dataview-mappings.md) to tell the host what to do with these variables:

Replace the content of the "dataViewMappings" object with the following code:

```json
"dataViewMappings": [
        {
            "conditions": [
                {
                    "category": {
                        "max": 1
                    },
                    "measure": {
                        "max": 1
                    }
                }
            ],
            "categorical": {
                "categories": {
                    "for": {
                        "in": "category"
                    }
                },
                "values": {
                    "select": [
                        {
                            "bind": {
                                "to": "measure"
                            }
                        }
                    ]
                }
            }
        }
    ],
```

The above code creates the "conditions" that each data-role object can hold only one field at a time. Notice that we use the data-role's internal `name` to refer to each field.

It also sets the [categorical data mapping](dataview-mappings.md#categorical-data-mapping) so that each field is mapped to the correct variable.

### Define objects for the properties pane

The ["objects"](objects-properties.md) section of the *capabilities* file is where we define the customizable features that should appear on the [format pane](../../create-reports/service-the-report-editor-take-a-tour.md#format-your-visuals). These features don't affect the content of the chart but they can change its look and feel.

For more information on objects and how they work, see [Objects](objects-properties.md).

The following objects are optional. Add them if you want to go through the optional sections of this tutorial to add colors and render the X-axis.

Replace the content of the "objects" section with the following code:

```json
     "objects": {
        "enableAxis": {
            "properties": {
                "show": {
                    "type": {
                        "bool": true
                    }
                },
                "fill": {
                    "type": {
                        "fill": {
                            "solid": {
                                "color": true
                            }
                        }
                    }
                }
            }
        },
        "colorSelector": {
            "properties": {
                "fill": {
                    "type": {
                        "fill": {
                            "solid": {
                                "color": true
                            }
                        }
                    }
                }
            }
        }
     },
```

Save the *capabilities.json* file.

Your final *capabilities* file should look like [the one in this example](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/main/capabilities.json).

## Visual API

All visuals start with a class that implements the `IVisual` interface. The *src/visual.ts* file is the default file that contains this class.

In this tutorial, we call our `IVisual` file *barChart.ts*. [Download the file](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/main/src/barChart.ts) and save it to the */src* folder, if you didn't do so already. In this section, we go through this file in detail and describe the various sections.

### Imports

The first section of the file imports the modules that are needed for this visual. Notice that in addition to the Power BI visual modules, we also import the [d3 library](https://d3js.org/).

The following modules are imported to your *barChart.ts* file:

```typescript
import {
    BaseType,
    select as d3Select,
    Selection as d3Selection
} from "d3-selection";
import {
    ScaleBand,
    ScaleLinear,
    scaleBand,
    scaleLinear
} from "d3-scale";
import "./../style/visual.less";

import { Axis, axisBottom } from "d3-axis";

import powerbi from "powerbi-visuals-api";

type Selection<T extends BaseType> = d3Selection<T, any, any, any>;

// powerbi.visuals
import DataViewCategoryColumn = powerbi.DataViewCategoryColumn;
import Fill = powerbi.Fill;
import ISandboxExtendedColorPalette = powerbi.extensibility.ISandboxExtendedColorPalette;
import ISelectionId = powerbi.visuals.ISelectionId;
import IVisual = powerbi.extensibility.IVisual;
import IVisualHost = powerbi.extensibility.visual.IVisualHost;
import PrimitiveValue = powerbi.PrimitiveValue;
import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;
import DataViewObjectPropertyIdentifier = powerbi.DataViewObjectPropertyIdentifier;

import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
import { FormattingSettingsService } from "powerbi-visuals-utils-formattingmodel";

import { BarChartSettingsModel } from "./barChartSettingsModel";
import { dataViewObjects} from "powerbi-visuals-utils-dataviewutils";
```

### Interfaces

Next, we define the visual interfaces. The following interface is used to describe our bar chart visual:

* BarChartDataPoint

This interface is defined as follows:

```typescript
/**
 * Interface for BarChart data points.
 *
 * @interface
 * @property {PrimitiveValue} value     - Data value for point.
 * @property {string} category          - Corresponding category of data value.
 * @property {string} color             - Color corresponding to data point.
 * @property {string} strokeColor       - Stroke color for data point column.
 * @property {number} strokeWidth       - Stroke width for data point column.
 * @property {ISelectionId} selectionId - Id assigned to data point for cross filtering
 *                                        and visual interaction.
 */
interface BarChartDataPoint {
    value: PrimitiveValue;
    category: string;
    color: string;
    strokeColor: string;
    strokeWidth: number;
    selectionId: ISelectionId;
}
```

### Visual transform

Now that the data structure is defined, we need to map data onto it using the `createSelectorDataPoints` function. This function receives data from the data view and transforms it to a format the visual can use. In this case, it returns the `BarChartDataPoint[]` interface described in the previous section.

The `DataView` contains the data to be visualized. This data can be in different forms, such as categorical or tabular. To build a categorical visual like a bar chart, use the *categorical* property on the `DataView`.

This function is called whenever the visual is updated.

```typescript
/**
 * Function that converts queried data into a viewmodel that will be used by the visual.
 *
 * @function
 * @param {VisualUpdateOptions} options - Contains references to the size of the container
 *                                        and the dataView which contains all the data
 *                                        the visual had queried.
 * @param {IVisualHost} host            - Contains references to the host which contains services
 */
function createSelectorDataPoints(options: VisualUpdateOptions, host: IVisualHost): BarChartDataPoint[] {
    const barChartDataPoints: BarChartDataPoint[] = []
    const dataViews = options.dataViews;

    if (!dataViews
        || !dataViews[0]
        || !dataViews[0].categorical
        || !dataViews[0].categorical.categories
        || !dataViews[0].categorical.categories[0].source
        || !dataViews[0].categorical.values
    ) {
        return barChartDataPoints;
    }

    const categorical = dataViews[0].categorical;
    const category = categorical.categories[0];
    const dataValue = categorical.values[0];

    const colorPalette: ISandboxExtendedColorPalette = host.colorPalette;

    const strokeColor: string = getColumnStrokeColor(colorPalette);

    const strokeWidth: number = getColumnStrokeWidth(colorPalette.isHighContrast);

    for (let i = 0, len = Math.max(category.values.length, dataValue.values.length); i < len; i++) {
        const color: string = getColumnColorByIndex(category, i, colorPalette);

        const selectionId: ISelectionId = host.createSelectionIdBuilder()
            .withCategory(category, i)
            .createSelectionId();

        barChartDataPoints.push({
            color,
            strokeColor,
            strokeWidth,
            selectionId,
            value: dataValue.values[i],
            category: `${category.values[i]}`,
        });
    }

    return barChartDataPoints;
}

```

>[!NOTE]
>The next few functions in the *barChart.ts* file deal with color and creating the X axis. Those are optional and are discussed further down in this tutorial. This tutorial will continue from the `IVisual` function.

## Render the visual

Once the data is defined, we render the visual using the BarChart class that implements the`IVisual` interface. The `IVisual` interface is described on the [Visual API](visual-api.md) page. It contains a `constructor` method that creates the visual and an `update` method that is called each time the visual reloads.
Before rendering the visual, we have to declare the members of the class:

```typescript
export class BarChart implements IVisual {
    private svg: Selection<SVGSVGElement>;
    private host: IVisualHost;
    private barContainer: Selection<SVGElement>;
    private xAxis: Selection<SVGGElement>;
    private barDataPoints: BarChartDataPoint[];
    private formattingSettings: BarChartSettingsModel;
    private formattingSettingsService: FormattingSettingsService;

    private barSelection: Selection<BaseType>;

    static Config = {
        xScalePadding: 0.1,
        solidOpacity: 1,
        transparentOpacity: 1,
        margins: {
            top: 0,
            right: 0,
            bottom: 25,
            left: 30,
        },
        xAxisFontMultiplier: 0.04,
    };
}
```

### Construct the visual

The [constructor function](visual-api.md#constructor) is called only once, when the visual is rendered for the first time. It creates empty SVG containers for the bar chart and the X-axis.
Notice that it uses the d3 library to render the SVG.

```typescript
/**
     * Creates instance of BarChart. This method is only called once.
     *
     * @constructor
     * @param {VisualConstructorOptions} options - Contains references to the element that will
     *                                             contain the visual and a reference to the host
     *                                             which contains services.
     */
    constructor(options: VisualConstructorOptions) {
        this.host = options.host;
        //Creating the formatting settings service.
        const localizationManager = this.host.createLocalizationManager();
        this.formattingSettingsService = new FormattingSettingsService(localizationManager);

        this.svg = d3Select(options.element)
            .append('svg')
            .classed('barChart', true);

        this.barContainer = this.svg
            .append('g')
            .classed('barContainer', true);

        this.xAxis = this.svg
            .append('g')
            .classed('xAxis', true);
    }
```

### Update the visual

The [update method](visual-api.md#update) is called every time the size of the visual or one of its values changes.

#### Scaling

We need to scale the visual so that the number of bars and current values fit into the defined width and height limits of the visual. This is similar to the [update method in the Circle card tutorial](develop-circle-card.md#modify-the-visuals-file).

To calculate the scale, we use the `scaleLinear` and `scaleBand` methods that were imported earlier from the `d3-scale` library.

The `options.dataViews[0].categorical.values[0].maxLocal` value holds the largest value of all current data points. This value is used to determine the height of the y axis. The scaling for the width of the x axis is determined by the number of categories bound to the visual in the `barchartdatapoint` interface.

For cases where the X axis is rendered, this visual also handles word breaks in case there isn't enough room to write out the entire name on the X axis.

#### Other update features

In addition to scaling, the update method also handles selections and colors. These features are optional and are discussed later:

```typescript
   /**
     * Updates the state of the visual. Every sequential databinding and resize will call update.
     *
     * @function
     * @param {VisualUpdateOptions} options - Contains references to the size of the container
     *                                        and the dataView which contains all the data
     *                                        the visual had queried.
     */
    public update(options: VisualUpdateOptions) {
        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(BarChartSettingsModel, options.dataViews?.[0]);
        this.barDataPoints = createSelectorDataPoints(options, this.host);
        this.formattingSettings.populateColorSelector(this.barDataPoints);

        const width = options.viewport.width;
        let height = options.viewport.height;

        this.svg
            .attr("width", width)
            .attr("height", height);

        if (this.formattingSettings.enableAxis.show.value) {
            const margins = BarChart.Config.margins;
            height -= margins.bottom;
        }

        this.xAxis
            .style("font-size", Math.min(height, width) * BarChart.Config.xAxisFontMultiplier)
            .style("fill", this.formattingSettings.enableAxis.fill.value.value);

        const yScale: ScaleLinear<number, number> = scaleLinear()
            .domain([0, <number>options.dataViews[0].categorical.values[0].maxLocal])
            .range([height, 0]);

        const xScale: ScaleBand<string> = scaleBand()
            .domain(this.barDataPoints.map(d => d.category))
            .rangeRound([0, width])
            .padding(0.2);

        const xAxis: Axis<string> = axisBottom(xScale);

        this.xAxis.attr('transform', 'translate(0, ' + height + ')')
            .call(xAxis)
            .attr("color", this.formattingSettings.enableAxis.fill.value.value);

        const textNodes: Selection<SVGElement> = this.xAxis.selectAll("text");
        BarChart.wordBreak(textNodes, xScale.bandwidth(), height);

        this.barSelection = this.barContainer
            .selectAll('.bar')
            .data(this.barDataPoints);

        const barSelectionMerged = this.barSelection
            .enter()
            .append('rect')
            .merge(<any>this.barSelection);

        barSelectionMerged.classed('bar', true);

        barSelectionMerged
            .attr("width", xScale.bandwidth())
            .attr("height", (dataPoint: BarChartDataPoint) => height - yScale(<number>dataPoint.value))
            .attr("y", (dataPoint: BarChartDataPoint) => yScale(<number>dataPoint.value))
            .attr("x", (dataPoint: BarChartDataPoint) => xScale(dataPoint.category))
            .style("fill", (dataPoint: BarChartDataPoint) => dataPoint.color)
            .style("stroke", (dataPoint: BarChartDataPoint) => dataPoint.strokeColor)
            .style("stroke-width", (dataPoint: BarChartDataPoint) => `${dataPoint.strokeWidth}px`);

        this.barSelection
            .exit()
            .remove();
    }

    private static wordBreak(
        textNodes: Selection<SVGElement>,
        allowedWidth: number,
        maxHeight: number
    ) {
        textNodes.each(function () {
            textMeasurementService.wordBreak(
                this,
                allowedWidth,
                maxHeight);
        });
    }

```

### Populate the properties pane using the formatting model Utils

The final method in the `IVisual` function is [`getFormattingModel`](visual-api.md#getformattingmodel-optional). This method builds and returns a modern *format pane formatting model* object containing all the [format pane](./format-pane-general.md) components and properties. It then places the object inside the **Format** pane. In our case, we create format cards for `enableAxis` and `colorSelector`, including formatting properties for `show` and `fill`, according to the *"objects"* in the *capabilities.json* file. To add a color picker for each category on the **Property** pane, add a for loop on `barDataPoints` and for each one add a new color picker format property to the formatting model.

To build a formatting model, the developer should be familiar with all its components. Check out the components of the format pane in [`Format Pane`](./format-pane-general.md). Check out `getFormattingModel` API of the [`FormattingModel utils`](./utils-formatting-model.md) in the [formatting model utils repository](https://github.com/microsoft/powerbi-visuals-utils-formattingmodel).

[Download the file](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/main/src/barChartSettingsModel.ts) and save it to the */src* folder.
Declare formatting properties and their values in a formatting settings class:

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";
import { BarChartDataPoint } from "./barChart";

import Card = formattingSettings.SimpleCard;
import Model = formattingSettings.Model;
import Slice = formattingSettings.Slice;
import ColorPicker = formattingSettings.ColorPicker;
import ToggleSwitch = formattingSettings.ToggleSwitch;

/**
 * Enable Axis Formatting Card
 */
class EnableAxisCardSettings extends Card {
    show = new ToggleSwitch({
        name: "show",
        displayName: undefined,
        value: false,
    });

    fill = new ColorPicker({
        name: "fill",
        displayName: "Color",
        value: { value: "#000000" }
    });
    topLevelSlice: ToggleSwitch = this.show;
    name: string = "enableAxis";
    displayName: string = "Enable Axis";
    slices: Slice[] = [this.fill];
}

/**
 * Color Selector Formatting Card
 */
class ColorSelectorCardSettings extends Card {
    name: string = "colorSelector";
    displayName: string = "Data Colors";

    // slices will be populated in barChart settings model `populateColorSelector` method
    slices: Slice[] = [];
}

/**
* BarChart formatting settings model class
*/
export class BarChartSettingsModel extends Model {
    // Create formatting settings model formatting cards
    enableAxis = new EnableAxisCardSettings();
    colorSelector = new ColorSelectorCardSettings();
    cards: Card[] = [this.enableAxis, this.colorSelector];

    /**
     * populate colorSelector object categories formatting properties
     * @param dataPoints 
     */
    populateColorSelector(dataPoints: BarChartDataPoint[]) {
        const slices: Slice[] = this.colorSelector.slices;
        if (dataPoints) {
            dataPoints.forEach(dataPoint => {
                slices.push(new ColorPicker({
                    name: "fill",
                    displayName: dataPoint.category,
                    value: { value: dataPoint.color },
                    selector: dataPoint.selectionId.getSelector(),
                }));
            });
        }
    }
}
```

Build and create the *formatting settings service* model in the visual's *constructor* method. The *formatting settings service* receives the barChart format settings and converts them into a FormattingModel object that's returned in the `getFormattingModel` API.

To use the localization feature, add the localization manager to the formatting settings service.

```typescript
    import { FormattingSettingsService } from "powerbi-visuals-utils-formattingmodel";
    
    // ...
    // declare utils formatting settings service
    private formattingSettingsService: FormattingSettingsService;
    //...

    constructor(options: VisualConstructorOptions) {
        this.host = options.host;
        const localizationManager = this.host.createLocalizationManager();
        this.formattingSettingsService = new FormattingSettingsService(localizationManager);
        
        // Add here rest of your custom visual constructor code
    }

```

Update the formatting settings model using update API. Call the *Update* API each time a formatting property in the properties pane is changed.
Create bar chart selectors data points and populate them in formatting settings model:

```typescript

    // declare formatting settings model for bar chart 
    private formattingSettings: BarChartSettingsModel;

    // ...

    public update(options: VisualUpdateOptions) {
        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(BarChartSettingsModel, options.dataViews[0]);
        this.barDataPoints = createSelectorDataPoints(options, this.host);
        this.formattingSettings.populateColorSelector(this.barDataPoints);

        // Add the rest of your custom visual update API code here

    }
```

Finally, the new API `getFormattingModel` is a simple line of code using the formatting settings service and current formatting settings model that was created in the *update* API above.

```typescript
    public getFormattingModel(): powerbi.visuals.FormattingModel {
        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);
    }
```

## (Optional) Render the X axis (static objects)

You can add objects to the **Property** pane to further customize the visual. These customizations can be user interface changes, or changes related to the data that was queried.

You can toggle these objects on or off in the **Property** pane.

:::image type="content" source="./media/create-bar-chart/property-pane.png" alt-text="Screenshot of objects in the Property pane.":::

This example renders an X-axis on the bar chart as a static object.

We already added the `enableAxis` property to the *capabilities* file and the barChartSettings interface.

## (Optional) Add color (data-bound objects)

Data-bound objects are similar to static objects, but typically deal with data selection. For example, you can use data-bound objects to interactively select the color associated with each data point.

:::image type="content" source="./media/create-bar-chart/object-databound-property.png" alt-text="Screenshot of color selection on properties.":::

We already defined the `colorSelector` object in the *capabilities* file.

Each data point is represented by a different color. We include color in the [BarChartDataPoint interface](#interfaces), and assign a default color to each data point when it's defined in [`IVisualHost`](#visual-transform).

```typescript
function getColumnColorByIndex(
    category: DataViewCategoryColumn,
    index: number,
    colorPalette: ISandboxExtendedColorPalette,
): string {
    if (colorPalette.isHighContrast) {
        return colorPalette.background.value;
    }

    const defaultColor: Fill = {
        solid: {
            color: colorPalette.getColor(`${category.values[index]}`).value,
        }
    };

    const prop: DataViewObjectPropertyIdentifier = {
        objectName: "colorSelector",
        propertyName: "fill"
    };

    let colorFromObjects: Fill;
    if(category.objects?.[index]){
        colorFromObjects = dataViewObjects.getValue(category?.objects[index], prop);
    }

    return colorFromObjects?.solid.color ?? defaultColor.solid.color;
}

function getColumnStrokeColor(colorPalette: ISandboxExtendedColorPalette): string {
    return colorPalette.isHighContrast
        ? colorPalette.foreground.value
        : null;
}

function getColumnStrokeWidth(isHighContrast: boolean): number {
    return isHighContrast
        ? 2
        : 0;
}
```

The `colorPalette` service, in the `createSelectorDataPoints` function, manages these colors. Since `createSelectorDataPoints` iterates through each of the data points, it's an ideal place to assign categorical objects like color.

For more detailed instructions on how to add color to your bar chart go to [Add colors to your Power BI visual](add-colors-power-bi-visual.md).

> [!NOTE]
> Verify that your final *barChart.ts* file looks like this [*barChart.ts* source code](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/main/src/barChart.ts), or download the [*barChart.ts* source code](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/main/src/barChart.ts) and use it to replace your file.

## Test the visual

Run the visual in the **Power BI** server to see how it looks:

1. In **PowerShell**, navigate to the project's folder and start the development app.

    ```powershell
    pbiviz start
    ```

     Your visual is now running while being hosted on your computer.

    >[!IMPORTANT]
    >Do not close the **PowerShell** window until the end of the tutorial. To stop the visual from running, enter <kbd>Ctrl</kbd>+<kbd>C</kbd>, and if prompted to terminate the batch job, enter <kbd>Y</kbd>, and then <kbd>Enter</kbd>.
2. [View the visual in Power BI service](develop-circle-card.md#view-the-visual-in-the-power-bi-service) by selecting the **Developer visual** from the **Visualization pane**.

   :::image type="content" source="./media/create-bar-chart/developer-visual.png" alt-text="Screenshot of developer visual.":::

3. Add data to the visual

   :::image type="content" source="./media/create-bar-chart/adding-data.png" alt-text="Screenshot of data bound to field bucket.":::

4. Drag the edges of the visual to change the size and notice how the scale adjusts.
5. Toggle the X-axis on and off.

   :::image type="content" source="./media/create-bar-chart/object-show-property.png" alt-text="Screenshot of X-Axis on property pane.":::

6. Change the colors of the different categories.

## Add other features

You can further customize your visual by adding more features. You can add features that increase the visual's functionality, enhance its look and feel, or give the user more control over its appearance. For example, you can:

* [Add Selection and Interactions with Other Visuals](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/master/Tutorial/Selection.md)
* [Add a property pane slider that controls opacity](https://github.com/Microsoft/PowerBI-visuals-sampleBarChart/commit/e2e0bc5888d9a3ca305a7a7af5046068645c8b30)
* [Add support for tooltips](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/master/Tutorial/ReportPageTooltips.md)
* [Add a landing page](landing-page.md)
* [Add local language support](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/blob/master/Tutorial/Locale.md)

## Package the visual

Before you can load your visual into [Power BI Desktop](https://powerbi.microsoft.com/desktop/) or share it with the community in the [Power BI Visual Gallery](https://visuals.powerbi.com/), you have to package it.

To prepare the visual for sharing, follow the instructions in [Package a Power BI visual](package-visual.md).

>[!NOTE]
>
>For the full source code of a bar chart with more features, including [tool-tips](add-tooltips.md) and a [context menu](context-menu.md), see [Power BI visuals sample bar chart](https://github.com/microsoft/PowerBI-visuals-sampleBarChart).

## Related content

* [Add a context menu to a visual](context-menu.md)
* [Add a landing page to a visual](landing-page.md)
* [Add locale support](localization.md)



================================================
FILE: powerbi-docs/developer/visuals/create-display-dialog-box.md
================================================
---
title: Creating a dialog box in a Power BI visual
description: Learn how to create a dialog box in a Power BI visual to display additional information to the customer in a separate window.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/30/2023
#customer intent: As a Power BI visual developer, I want to learn how to create a dialog box in my visual so I can display additional information to the customer in a separate window.
---

# Create a dialog box for your Power BI visual

When you create a visual, sometimes it's useful to display additional information to the customer in a separate window. For example, you might want to:

- **Show additional information** - Such as a text note or a video
- **Display an input data dialog box** - Such as a date dialog box

For these purposes, you can create a dialog visual pop-up window, called a *dialog box* in this article.

## Dialog box considerations

When creating a dialog box for your visual, keep in mind that:

- During development, you can specify the size and position of the dialog box.
- When the dialog box is triggered, the report background is grayed.
- The dialog header contains the visual’s icon and its display name as a title.
- The dialog box can have up to three action buttons. You can choose which buttons to display from a [given selection](create-display-dialog-box.md#invoke-the-dialog-box).
- The dialog box uses a rich HTML `iframe`.
- While the dialog box is displayed, no action can be performed in the report until it's dismissed.
- The dialog code can use external npm libraries, just like the visual.

>[!IMPORTANT]
>The dialog box should not be triggered spontaneously. It should be the immediate result of a user action.

## Design a dialog box for your visual

To configure a dialog box, you need to add two components to your code:

- [An implementation file](#create-the-dialog-box-implementation-file) - It's best practice to create an implementation file for each dialog box.
- [Code to invoke your dialog box](#invoke-the-dialog-box) - To invoke your dialog box, add code to the `visual.ts` file.

### Create the dialog box implementation file

We recommend creating an implementation file for each dialog box you create. Place your dialog box files in the `src` folder:

:::image type="content" source="media/create-display-dialog-box/file-location.png" alt-text="Screenshot showing the location of a dialog box implementation file called DatePickerDialog.ts in a Power BI visuals project.":::

Each dialog box implementation file should include the following components:

- [A dialog box class](#create-a-dialog-box-class)
- [A result class](#create-a-result-class)
- [Registration of the dialog class](#add-your-dialog-box-to-the-registry-list)

#### Create a dialog box class

Create a dialog box class for your dialog box. The `initialState` parameter in `openModalDialog` is passed to the dialog contractor upon its creation. Use the `initialState` object to pass parameters to the dialog box, in order to affect its behavior or appearance.

The dialog code can use these `IDialogHost` methods:

- `IDialogHost.setResult(result:object)` - The dialog code returns a result object that is passed back to its calling visual.
- `IDialogHost.close(actionId: DialogAction, result?:object)` - The dialog code can programmatically close the dialog and provide a result object back to its calling visual.

Imports on top of the file:
```typescript
import powerbi from "powerbi-visuals-api";
import DialogConstructorOptions = powerbi.extensibility.visual.DialogConstructorOptions;
import DialogAction = powerbi.DialogAction;
// React imports as an example
import * as ReactDOM from 'react-dom';
import * as React from 'react';
import reactDatepicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
```

This example requires to install these packages:
```console
    npm i react-dom react react-datepicker
```

Class realization:
```typescript
export class DatePickerDialog {
    static id = "DatePickerDialog";

    constructor(options: DialogConstructorOptions, initialState: object) {
        const host = options.host;
        let pickedDate: Date;
        const startDate = new Date(initialState['startDate']);
        
        // Dialog rendering implementation
        ReactDOM.render(
            React.createElement(
                reactDatepicker,
                {
                    inline: true,
                    openToDate: startDate,
                    onChange: (date: Date) => {
                        pickedDate = date
                        host.setResult({ date: pickedDate })
                    }
                },
                null),
            options.element
        );

        document.addEventListener('keydown', e => {
            if (e.code == 'Enter' && pickedDate) {
                host.close(DialogAction.Close, {date: pickedDate});
            }
        });
    }
}
```

#### Create a result class

Create a class that returns the dialog box result, and then add it to the dialog box implementation file.

In the example below, the `DatePickerDialogResult` class returns a date string.

```typescript
export class DatePickerDialogResult {
    date: string;
}
```

#### Add your dialog box to the registry list

Every dialog implementation file needs to include a registry reference. Add the two lines in the example below to the end of your dialog box implementation file. The first line should be identical in every dialog box implementation file. The second line lists your dialog box; modify it according to the name of your dialog box class.

```javascript
globalThis.dialogRegistry = globalThis.dialogRegistry || {};
globalThis.dialogRegistry[DatePickerDialog.id] = DatePickerDialog;

```

### Invoke the dialog box

Before you create a dialog box, you need to decide which buttons it will include. Power BI visuals support the following six dialog box buttons:

```typescript
export enum DialogAction {
        Close = 0,
        OK = 1,
        Cancel = 2,
        Continue = 3,
        No = 4,
        Yes = 5
    }

```

Each dialog box you create needs to be invoked in the `visual.ts` file. In this example, the dialog box is defined with two action buttons.

```typescript
import powerbi from "powerbi-visuals-api";
import DialogAction = powerbi.DialogAction;
const dialogActionsButtons = [DialogAction.OK, DialogAction.Cancel];
```

In this example, the dialog box is invoked by clicking a visual button. The visual button is defined as part of the visual constructor in the `visual.ts` file.

## Define the size and position of the dialog box

From API version 4.0 or later, you can define the size and position of the dialog box using the `DialogOpenOptions` parameter of `openModalDialog`. To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

```typescript
    export interface RectSize {
        width: number;
        height: number;
    }

    export interface DialogOpenOptions {
        title: string;
        size?: RectSize;
        position?: VisualDialogPosition;
        actionButtons: DialogAction[];
    }
```

The position parameter lets you decide where the dialog box should open on the screen. You can choose to open the dialog box in the center of the screen, or you can define a different position relative to the visual.

```typescript
    const enum VisualDialogPositionType {
        Center = 0,
        RelativeToVisual = 1
    }

    export interface VisualDialogPosition {
        type: VisualDialogPositionType;
        left?: number;
        top?: number;
    }
```

- If no type is specified, the default behavior is to open the dialog box in the center.
- The position is given in pixels relative to the top left corner of the visual.

This example shows a 250 x 300 pixel date selection dialog box 100 pixels to the left and 30 pixels below the top of the visual:

```typescript
export class Visual implements IVisual {
    private target: HTMLElement;
    private host: IVisualHost;
 
    constructor(options: VisualConstructorOptions) {
        this.host = options.host;
        this.target = options.element;
        const dialogActionsButtons = [DialogAction.OK, DialogAction.Cancel];

        const sectionDiv = document.createElement("div");

        const span = document.createElement("span");
        span.id = "datePicker";

        let button = document.createElement("button");
        button.id = "DateButton";
        button.innerText = "Date";

        button.onclick = (event) => {
            const initialDialogState = { startDate: new Date() };
            const position = {
                    type: VisualDialogPositionType.RelativeToVisual,
                    left: 100,
                    top: 30
            };

            const size = {width: 250, height: 300};
            const dialogOptions = {
                actionButtons: dialogActionsButtons,
                size: size,
                position: position,
                title: "Select a date"
            };
            this.host.openModalDialog(DatePickerDialog.id, dialogOptions, initialDialogState).
                then(ret => this.handleDialogResult(ret, span)).
                catch(error => this.handleDialogError(error, span));
        }
        sectionDiv.appendChild(button);
        sectionDiv.appendChild(span);
        this.target.appendChild(sectionDiv)
    }

    // Custom logic to handle dialog results
    private handleDialogResult( result: ModalDialogResult, targetElement: HTMLElement){
        if ( result.actionId === DialogAction.OK || result.actionId === DialogAction.Close) {
            const resultState = <DatePickerDialogResult> result.resultState;
            const selectedDate = new Date(resultState.date);
            targetElement.textContent = selectedDate.toDateString();
        }
    }

    // Custom logic to handle errors in dialog
    private handleDialogError( error: any, targetElement: HTMLElement ) {
        targetElement.textContent = "Error: " + JSON.stringify(error);
    }
}
```

## Define how to close the dialog box

The preferred method for closing the dialog box is by the end-user clicking the [x] button, one of the action buttons, or the report background.

You can also program the dialog box to automatically close by calling the `IDialogHost` close method. This method is blocked for five seconds after the dialog is opened, so that the earliest you can automatically close the dialog box is five seconds after it was initiated.

## Don't show dialog box

The dialog box appears with a checkbox that gives the user the option to block dialog boxes.

:::image type="content" source="media/create-display-dialog-box/dont-show-checkbox.png" alt-text="Screenshot showing a checkbox giving the option to block dialog boxes.":::

This checkbox is a security feature that prevents the visual from creating modal dialogs (either intentionally or not) without the user's consent.

This blocking is in effect only for the current session. So if a user blocks the CV modal dialogs but later changes their mind, they can re-enable the dialogs. To do it they need to start a new session (refresh the reports page in Power BI service, or restart Power BI Desktop).

## Considerations and limitations

- As of powerbi-visuals-API 3.8, the dialog icon and title are determined by the visual’s icon and display name and can't be changed.
- The size limitations of the dialog box are described in the table below.

    |Max/min |Width                    |Height                    |
    |--------|-------------------------|--------------------------|
    |Maximum |90% of the browser width |90% of the browser height |
    |Minimum |240 px                   |210 px                    |

- When defining the position of the dialog box, the horizontal position can be a positive or negative integer, depending on which side of the visual you want the box to be. The vertical position can't be negative, as this would place it above the visual.
- The following features don't support the Power BI visuals dialog box:
  - Embedded analytics
  - Publish to web
  - Dashboards

 You can program your visual to detect if the current environment allows opening a dialog box, by checking the boolean `this.host.hostCapabilities.allowModalDialog`.

## Related content

- [Publish a Power BI custom visual](office-store.md)
- [Create a Power BI bar chart visual](create-bar-chart.md)



================================================
FILE: powerbi-docs/developer/visuals/create-r-based-power-bi-desktop.md
================================================
---
title: Create an R-powered Power BI visual 
description: This tutorial describes how to create an R-based visual for Power BI by using the R script editor in Power BI Desktop.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: tutorial
ms.date: 01/11/2024
#customer intent: As a developer, I want to learn how to create an R-powered visual for Power BI so that I can use R scripts to create custom visuals in Power BI.
---

# Tutorial: Create an R-powered Power BI visual

[!INCLUDE[Power B I visuals tutorials overview](../../includes/visual-tutorial-overview.md)]

This article is a step by step guide for creating an R-powered visual for Power BI.

In this tutorial, you learn how to:

> [!div class="checklist"]
>
> * Create an R-powered visual
> * Edit the R-script in Power BI Desktop
> * Add libraries to the dependencies file of the visual
> * Add a static property

## Prerequisites

* A **Power BI Pro** account. [Sign up for a free trial](https://powerbi.microsoft.com/pricing/) before you begin.
* An R engine. You can download one free from many locations, including the [Microsoft R Open download page](https://www.microsoft.com/download/details.aspx?id=51205) and the [CRAN Repository](https://cran.r-project.org/bin/windows/base/). For more information, see [Create Power BI visuals using R](../../create-reports/desktop-r-visuals.md).
* [Power BI Desktop](../../fundamentals/desktop-get-the-desktop.md).
* [Windows PowerShell](/powershell/scripting/install/installing-windows-powershell) version 4 or later for Windows users OR the [Terminal](https://macpaw.com/how-to/use-terminal-on-mac) for OSX users.

## Get started

1. Prepare some sample data for the visual. You can save these values to an Excel database or a *.csv* file and import it into **Power BI Desktop**.

    | MonthNo | Total Units |
    |-----|-----|
    | 1 | 2303 |
    | 2 | 2319 |
    | 3 | 1732 |
    | 4 | 1615 |
    | 5 | 1427 |
    | 6 | 2253 |
    | 7 | 1147 |
    | 8 | 1515 |
    | 9 | 2516 |
    | 10 | 3131 |
    | 11 | 3170 |
    | 12 | 2762 |

1. To create a visual, open **PowerShell** or **Terminal**, and run the following command:

      ```cmd
      pbiviz new rVisualSample -t rvisual
      ```

      This command creates a new folder for the *rVisualSample* visual. The structure is based on the `rvisual` template. It creates a file called *script.r* in the root folder of the visual. This file holds the R-script that is run to generate the image when the visual is rendered. You can create your R-script in **Power BI Desktop**.

1. From the newly created `rVisualSample` directory run the following command:

   ```cmd
   pbiviz start
   ```

1. In **Power BI Desktop**, select **R script visual**:

   :::image type="content" source="./media/create-r-based-power-bi-desktop/r-script-icon.png" alt-text="Screenshot of the R script visual control in the Power BI Desktop.":::

1. Assign data to the developer visual by dragging **MonthNo** and **Total units** to **Values** for the visual.

   :::image type="content" source="./media/create-r-based-power-bi-desktop/add-values.png" alt-text="Screenshot showing where to add data to values.":::

1. Set the aggregation type of **Total units** to *Don't summarize*.

    :::image type="content" source="./media/create-r-based-power-bi-desktop/dont-summarize.png" alt-text="Screenshot of menu with option for not summarizing data.":::

1. From the R-script editor in your **Power BI Desktop**, type the following:

      ```r
      plot(dataset)
      ```

      This command creates a scatter chart using the values in the semantic model as input.

1. Select the **Run script** icon to see the result.

   :::image type="content" source="./media/create-r-based-power-bi-desktop/r-data-values.png" alt-text="Screenshot of R visual chart with data.":::

## Edit the R Script

The R-script can be modified to create other types of visuals. Let's create a line chart next.

1. Paste the following R code into the **R script editor**.

   ```r
   x <- dataset[,1] # get the first column from semantic model
   y <- dataset[,2] # get the second column from semantic model

   columnNames = colnames(dataset) # get column names

   plot(x, y, type="n", xlab=columnNames[1], ylab=columnNames[2]) # draw empty plot with axis and labels only
   lines(x, y, col="green") # draw line plot
   ```

2. Select the **Run script** icon to see the result.

   :::image type="content" source="./media/create-r-based-power-bi-desktop/run-r-script.png" alt-text="Screenshot of the result of running the script, which is a line plot.":::

3. When your R-script is ready, copy it to the `script.r` file located in the root directory of your visual project.

4. In the *capabilities.json* file, change the `dataRoles`: `name` to *dataset*, and set the `dataViewMappings` input to *dataset*.

    ```json
    {
      "dataRoles": [
        {
          "displayName": "Values",
          "kind": "GroupingOrMeasure",
          "name": "dataset"
        }
      ],
      "dataViewMappings": [
        {
          "scriptResult": {
            "dataInput": {
              "table": {
                "rows": {
                  "select": [
                    {
                      "for": {
                        "in": "dataset"
                      }
                    }
                  ],
                  "dataReductionAlgorithm": {
                    "top": {}
                  }
                }
              }
            },
            ...
          }
        }
      ],
    }
    ```

5. Add the following code to support resizing the image in the *src/visual.ts* file.

    ```typescript
      public onResizing(finalViewport: IViewport): void {
          this.imageDiv.style.height = finalViewport.height + "px";
          this.imageDiv.style.width = finalViewport.width + "px";
          this.imageElement.style.height = finalViewport.height + "px";
          this.imageElement.style.width = finalViewport.width + "px";
      }
    ```

## Add libraries to visual package

The `corrplot` package creates a graphical display of a correlation matrix. For more information about `corrplot`, see [An Introduction to corrplot Package](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html).

1. Add the `corrplot` library dependency to the `dependencies.json` file. Here is an example of the file content:

    ```json
    {
      "cranPackages": [
        {
          "name": "corrplot",
          "displayName": "corrplot",
          "url": "https://cran.r-project.org/web/packages/corrplot/"
        }
      ]
    }
    ```

2. Now you can start using the corrplot package in your `script.r` file.

    ```r
    library(corrplot)
    corr <- cor(dataset)
    corrplot(corr, method="circle", order = "hclust")
    ```

    The result of using `corrplot` package looks like this example:

    :::image type="content" source="./media/create-r-based-power-bi-desktop/r-corrplot-result.png" alt-text="Screenshot of the visualization pane with four ovals created by corrplot.":::

## Add a static property to the property pane

Now that we have a basic `corrplot` visual, let's add properties to the property pane that allow the user to change the look and feel to the visual.

We use the `method` argument to configure the shape of the data points. The default script uses a circle. Modify your visual to let the user choose between several options.

1. Define an `object` called *settings* in the *capabilities.json* file and give it the following properties.

    ```json
    "settings": {
      "properties": {
        "method": {
          "type": {
            "enumeration": [
              { "value": "circle" },
              { "value": "square" },
              { "value": "ellipse" },
              { "value": "number" },
              { "value": "shade" },
              { "value": "color" },
              { "value": "pie" }
            ]
          }
        }
      }
    }
    ```

1. Open the *src/settings.ts* file. Create a `VisualCardSettings` class with the public properties `method`, `name`, `displayName` and `slices` as shown in the code box bellow.

    ```typescript
    import ItemDropdown = formattingSettings.ItemDropdown;

    const methodOptions = [
        {
            displayName: "Circle",
            value: "circle"
        },
        {
            displayName: "Square",
            value: "square"
        },
        {
            displayName: "Ellipse",
            value: "ellipse"
        },
        {
            displayName: "Number",
            value: "number"
        },
        {
            displayName: "Shade",
            value: "shade"
        },
        {
            displayName: "Color",
            value: "color"
        },
        {
            displayName: "Pie",
            value: "pie"
        }
    ]

    class VisualCardSettings extends FormattingSettingsCard {
        method: FormattingSettingsSlice = new ItemDropdown({
            name: "method",
            displayName: "Method",
            items: methodOptions,
            value: methodOptions[0]
        });

        name: string = "settings";
        displayName: string = "Settings";
        slices: Array<FormattingSettingsSlice> = [this.method];
    }
    ```

    After these steps, you can change the property of the visual.

    :::image type="content" source="./media/create-r-based-power-bi-desktop/r-data-look-settings.png" alt-text="Screenshot of R visual settings.":::

    Finally, the R-script must have a default property. If the user doesn't change the property value (in this case, the shape setting), the visual uses this value.

    For R runtime variables for the properties, the naming convention is `<objectname>_<propertyname>`, in this case, `settings_method`.

1. Run the following R-script:

    ```r
    library(corrplot)
    corr <- cor(dataset)

    if (!exists("settings_method"))
    {
        settings_method = "circle";
    }

    corrplot(corr, method=settings_method, order = "hclust")
    ```

## Package and import your visual

Now you can package the visual and import it to any Power BI report.

1. Fill in the `displayName`, `supportUrl`, `description`, author's `name` and `email`, and any other important information in the `pbivis.json` file.
1. If you want to change the visual's icon on the visualization pane, replace the **icon.png** file in the **assets** folder.
1. From the root directory of your visual run:

    ```powershell
    pbiviz package
    ```

    For more information on packaging your visual see [Packaging the custom visual](custom-visual-develop-tutorial-format-options.md#packaging-the-custom-visual)

1. Import the visual's pbiviz file to any Power BI report. See [Import a visual file from your local computer into Power BI](import-visual.md#import-a-visual-file-from-your-local-computer-into-power-bi) for instructions on how to do this.

1. Your final visual looks like the following example:

  :::image type="content" source="./media/create-r-based-power-bi-desktop/r-final-settings-value.png" alt-text="Screenshot of R visual settings with changed value.":::

## Related content

* [Use R-powered Power BI visuals in Power BI](../../create-reports/desktop-r-powered-custom-visuals.md).
* [Build a bar chart](create-bar-chart.md)



================================================
FILE: powerbi-docs/developer/visuals/create-react-visual.md
================================================
---
title: Create a React-based visual for Power . 
description: This tutorial shows how to create a Power BI visual using React. It displays a value in a circle. Adaptive size and settings allow you to customize it. 
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: tutorial
ms.date: 10/12/2024
#customer intent: As a Power BI visual developer, I want to learn how to create a Power BI visual using React so I can display a value in a circle.
---

# Tutorial: Create a Power BI visual using React

[!INCLUDE[Power B I visuals tutorials overview](../../includes/visual-tutorial-overview.md)]

In this tutorial, you develop a Power BI visual using [React](https://reactjs.org/). The visual displays a formatted measure value inside a circle. The visual has adaptive size and allows you to customize its settings.

In this tutorial, you learn how to:
> [!div class="checklist"]
>
> * Create a development project for your visual.
> * Develop your visual using React.
> * Configure your visual to process data.
> * Configure your visual to adapt to size changes.
> * Configure adaptive color and border settings for your visual.

>[!NOTE]
>For the full source code of this visual, see [React circle card Power BI visual](https://github.com/Microsoft/powerbi-visuals-circlecard-react).

## Prerequisites

[!INCLUDE[Power B I tutorials prerequisites](../../includes/visual-tutorial-prerequisites.md)]

## Create a development project

In this section, you create a project for the React circle card visual.

1. Open PowerShell and navigate to the folder you want to create your project in.

2. Enter the following command:

    ```PowerShell
    pbiviz new ReactCircleCard
    ```

3. Navigate to the project's folder.

    ```powershell
    cd ReactCircleCard
    ```

4. Start the React circle card visual. Your visual is now running while being hosted on your computer.

    ```powershell
    pbiviz start
    ```

    >[!IMPORTANT]
    >To stop the visual from running, in PowerShell enter <kbd>Ctrl</kbd>+<kbd>C</kbd> and if prompted to terminate the batch job, enter <kbd>Y</kbd>, and press *Enter*.

## View the React circle card in the Power BI service

[!INCLUDE[View the Power BI visual in Power BI service](../../includes/visual-tutorial-view.md)]

## Set up React in your project

In this section, you learn how to set up React for your Power BI visual project.

Open PowerShell and stop the visual from running by entering Ctrl+C. If prompted to terminate the batch job, enter Y, and press *Enter*.

### Install React

To install the required React dependencies, open PowerShell in your *ReactCircleCard* folder, and run the following command:

```powershell
npm i react react-dom
```

### Install React type definitions

To install type definitions for React, open PowerShell in your *reactCircleCard* folder and run the following command:

```powershell
npm i @types/react @types/react-dom
```

### Create a React component class

Follow these steps to create a React component class.

1. Open **VS Code** and navigate to the **reactCircleCard** folder.

2. Create a new file by selecting **File** > **New File**.

3. Copy the following code into the new file.

    ```typescript
    import * as React from "react";

    export class ReactCircleCard extends React.Component<{}>{
        render(){
            return (
                <div className="circleCard">
                    Hello, React!
                </div>
            )
        }
    }

    export default ReactCircleCard;
    ```

4. Select **Save As** and navigate to the **src** folder.

5. Save the file as follows:

    * In the *File name* field, enter **component**.
    * From the *Save as type* drop-down menu, select **TypeScript React**.

### Add React to the visual file

Replace the code in the **visual.ts** file with code that enables using React.

1. In the **src** folder, open **visual.ts** and replace the code in the file with the following code:

    ```typescript
    "use strict";
    import powerbi from "powerbi-visuals-api";

    import DataView = powerbi.DataView;
    import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;
    import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
    import IVisual = powerbi.extensibility.visual.IVisual;

    // Import React dependencies and the added component
    import * as React from "react";
    import * as ReactDOM from "react-dom";
    import ReactCircleCard from "./component";

    import "./../style/visual.less";

    export class Visual implements IVisual {

        constructor(options: VisualConstructorOptions) {

        }

        public update(options: VisualUpdateOptions) {

        }
    }
    ```

    >[!NOTE]
    >As default Power BI TypeScript settings don't recognize React *tsx* files, VS Code highlights `component` as an error.

2. To render the component, add the target HTML element to **visual.ts**. This element is `HTMLElement` in `VisualConstructorOptions`, which is passed into the constructor.

    1. In the **src** folder, open **visual.ts**.

    2. Add the following code to the `Visual` class:

    ```typescript
    private target: HTMLElement;
    private reactRoot: React.ComponentElement<any, any>;
    ```

    3. Add the following lines to the `VisualConstructorOptions` constructor:

    ```Typescript
    this.reactRoot = React.createElement(ReactCircleCard, {});
    this.target = options.element;

    ReactDOM.render(this.reactRoot, this.target);
    ```

    Your **visual.ts** file should now look like this:

    ```Typescript
    "use strict";
    import powerbi from "powerbi-visuals-api";

    import DataView = powerbi.DataView;
    import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;
    import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
    import IVisual = powerbi.extensibility.visual.IVisual;
    import * as React from "react";
    import * as ReactDOM from "react-dom";
    import ReactCircleCard from "./component";    
    
    import "./../style/visual.less";

    export class Visual implements IVisual {
        private target: HTMLElement;
        private reactRoot: React.ComponentElement<any, any>;
    
        constructor(options: VisualConstructorOptions) {
            this.reactRoot = React.createElement(ReactCircleCard, {});
            this.target = options.element;
        
            ReactDOM.render(this.reactRoot, this.target);
        }
    
        public update(options: VisualUpdateOptions) {
    
        }
    }
    ```

3. Save **visual.ts**.

### Edit the tsconfig file

Edit the **tsconfig.json** to work with React.

1. In the **reactCircleCard** folder, open **tsconfig.json** and add two lines to the beginning of the `compilerOptions` item.

    ```json
    "jsx": "react",
    "types": ["react", "react-dom"],
    ```

    Your **tsconfig.json** file should now look like this, and the `component` error in **visual.ts** should be gone.

    ```json
    {
        "compilerOptions": {
            "jsx": "react",
            "types": ["react", "react-dom"],
            "allowJs": false,
            "emitDecoratorMetadata": true,
            "experimentalDecorators": true,
            "target": "es6",
            "sourceMap": true,
            "outDir": "./.tmp/build/",
            "moduleResolution": "node",
            "declaration": true,
            "lib": [
                "es2015",
                "dom"
            ]
        },
        "files": [
            "./src/visual.ts"
        ]
    }
    ```

2. Save **tsconfig.json**.

### Test your visual

Open PowerShell in the *CircleCardVisual* folder, and run your project:

```bash
pbiviz start
```

When you add a new **Developer Visual** to your report in the Power BI service, it looks like this:

>[!div class="mx-imgBorder"]
>![Screenshot showing the hello React message in the newly created developer visual in Power B I service.](media/create-react-visual/hello-react-message-visual.png)

## Configure your visual's data field

Configure your visual's capabilities file so that only one data field can be submitted to the visual's *Measure data* field.

1. In **VS Code**, from the **reactCircleCard** folder, open **capabilities.json**.

2. The `ReactCircleCard` displays a single value, `Measure Data`. Remove the `Category Data` object from `dataRoles`.

    After removing the `Category Data` object, the `dataRoles` key looks like this:

    ```json
    "dataRoles": [
        {
            "displayName": "Measure Data",
            "name": "measure",
            "kind": "Measure"
        }
    ],
    ```

3. Remove all the content of the `objects` key (you'll fill it in later).

    After you remove its content, the `objects` key looks like this:

    ```json
    "objects": {},
    ```

4. Replace the `dataViewMappings` property with the following code. `max: 1` in `measure` specifies that only one data field can be submitted to the visual's *Measure data* field.

    ```json
    "dataViewMappings": [
        {
            "conditions": [
                {
                    "measure": {
                        "max": 1
                    }
                }
            ],
            "single": {
                "role": "measure"
            }
        }
    ]
    ```

5. Save the changes you made to **capabilities.json**.

6. Verify that `pbiviz start` is running and in Power BI service, refresh your *React Circle Card* visual. The **Measure data** field can accept only one data field, as specified by `max: 1`.  

    >[!div class="mx-imgBorder"]
    >![Screenshot showing the measure Data field in the react circle card in Power B I service.](media/create-react-visual/measure-data.png)

## Update the visual's style

In this section, you turn the visual's shape into a circle. Use the **visual.less** file to control the style of your visual.

1. From the **style** folder, open **visual.less**.

2. Replace the content of **visual.less** with the following code.

    ```css
    .circleCard {
        position: relative;
        box-sizing: border-box;
        border: 1px solid #000;
        border-radius: 50%;
        width: 200px;
        height: 200px;
    }

    p {
        text-align: center;
        line-height: 30px;
        font-size: 20px;
        font-weight: bold;

        position: relative;
        top: -30px;
        margin: 50% 0 0 0;
    }
    ```

3. Save **visual.less**.

## Set your visual to receive properties from Power BI

In this section you configure the visual to receive data from Power BI, and send updates to the instances in the **component.tsx** file.

### Render data using React

You can render data using React. The component can display data from its own state.

1. In VS Code, from the **reactCircleCard** folder, open **component.tsx**.

2. Replace the content of **component.tsx** with the following code.

    ```javascript
    import * as React from "react";

    export interface State {
        textLabel: string,
        textValue: string
    }

    export const initialState: State = {
        textLabel: "",
        textValue: ""
    }

    export class ReactCircleCard extends React.Component<{}, State>{
        constructor(props: any){
            super(props);
            this.state = initialState;
        }

        render(){
            const { textLabel, textValue } = this.state;

            return (
                <div className="circleCard">
                    <p>
                        {textLabel}
                        <br/>
                        <em>{textValue}</em>
                    </p>
                </div>
            )
        }
    }
    ```

3. Save **component.tsx**.

### Set your visual to receive data

Visuals receive data as an argument of the `update` method. In this section, you update this method to receive data.

The following code selects `textLabel` and `textValue` from `DataView`, and if the data exists, updates the component state.

1. In VS Code, from the **src** folder, open **visual.ts**.

2. Replace the line `import ReactCircleCard from "./component";` with the following code:

    ```typescript
    import { ReactCircleCard, initialState } from "./component";
    ```

3. Add the following code to the `update` method.

    ```typescript
    if(options.dataViews && options.dataViews[0]){
        const dataView: DataView = options.dataViews[0];

        ReactCircleCard.update({
            textLabel: dataView.metadata.columns[0].displayName,
            textValue: dataView.single.value.toString()
        });
    } else {
        this.clear();
    }
    ```

4. Create a `clear` method by adding the following code below the `update` method.

    ```typescript
    private clear() {
        ReactCircleCard.update(initialState);
    }
    ```

5. Save **visual.ts**

### Set your visual to send data

In this section, you update the visual to send updates to instances in the *component* file.

1. In VS Code, from the **src** folder, open **component.tsx**.

2. Add the following code to the `ReactCircleCard` class:

    ```typescript
    private static updateCallback: (data: object) => void = null;

    public static update(newState: State) {
        if(typeof ReactCircleCard.updateCallback === 'function'){
            ReactCircleCard.updateCallback(newState);
        }
    }

    public state: State = initialState;

    public componentWillMount() {
            ReactCircleCard.updateCallback = (newState: State): void => { this.setState(newState); };
    }

    public componentWillUnmount() {
        ReactCircleCard.updateCallback = null;
    }
    ```

3. Save **component.tsx**.

### View the changes to the visual

Test your *React Circle Card* visual to view the changes you made.

1. Verify that `pbiviz start` is running, and in the Power BI service, refresh your *React Circle Card* visual.

2. Add **Sales** to the visual's *Measure data* field.

>[!div class="mx-imgBorder"]
>![Screenshot of the sales value displayed in the react circle card visual in the Power BI service.](./media/create-react-visual/value-display-circle-powerbi-react.png)

## Make your visual resizable

Currently, your visual has fixed width and height. To make the visual resizable you need to define the `size` variable in both the **visual.ts** and **component.tsx** files. In this section, you make the visual resizable.

After you complete the steps outlined in this section, the circle diameter in your visual will correspond to the minimal width or height size, and you'll be able to resize it in Power BI service.

### Configure the visual.ts file

Get the current size of the visual viewport from the `options` object.

1. In VS Code, from the **src** folder, open **visual.ts**.

2. Insert this code to import the `IViewport` interface.

    ```typescript
    import IViewport = powerbi.IViewport;
    ```

3. Add the `viewport` property to the `visual` class.

    ```typescript
    private viewport: IViewport;
    ```

4. In the `update` method, before `ReactCircleCard.update`, add the following code.

    ```typescript
    this.viewport = options.viewport;
    const { width, height } = this.viewport;
    const size = Math.min(width, height);
    ```

5. In the `update` method, in `ReactCircleCard.update`, add `size`.

    ```typescript
    size,
    ```

6. Save **visual.ts**.

### Configure the component.tsx file

1. In VS Code, from the **src** folder, open **component.tsx**.

2. Add the following code to `export interface State`.

    ```typescript
    size: number
    ```

3. Add the following code to `export const initialState: State`.

    ```typescript
    size: 200
    ```

4. In the `render` method, make the following changes to the code:

    1. Add `size` to `const { textLabel, textValue, size } = this.state;`. This declaration should now look like this:

        ```typescript
        const { textLabel, textValue, size } = this.state;
        ```

    2. Add the following code above `return`.

        ```typescript
        const style: React.CSSProperties = { width: size, height: size };
        ```

    3. Replace the first *return* line `<div className="circleCard">` with:

        ```typescript
        <div className="circleCard" style={style}>
        ```

5. Save **component.tsx**.

### Configure the visual file

1. In VS Code, from the **style** folder, open **visual.less**.

2. In `.circleCard`, replace `width` and `height` with `min-width` and `min-height`.

    ```css
    min-width: 200px;
    min-height: 200px;
    ```

3. Save **visual.less**.

## Make your Power BI visual customizable

In this section, you add the ability to customize your visual, allowing users to make changes to its color and border thickness.

### Add color and thickness to the capabilities file

Add the color and border thickness to the `object` property in *capabilities.json*. 

1. In VS Code, from the **reactCircleCard** folder, open **capabilities.json**.

2. Add the following settings to the `objects` property.

    ```json
    "circle": {
        "properties": {
           "circleColor": {
                "type": {
                    "fill": {
                        "solid": {
                            "color": true
                        }
                    }
                }
            },
            "circleThickness": {
                "type": {
                    "numeric": true
                }
            }
        }
    }
    ```

3. Save **capabilities.json**.

### Add a circle formatting settings class to the settings file

Add the `Circle` formatting settings to *settings.ts*. For more information how to build formatting model settings, see [formatting utils](utils-formatting.md).

1. In VS Code, from the **src** folder, open **settings.ts**.

2. Replace the code in **settings.ts** with the following code:

    ```typescript
   "use strict";

    import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

    import FormattingSettingsCard = formattingSettings.SimpleCard;
    import FormattingSettingsSlice = formattingSettings.Slice;
    import FormattingSettingsModel = formattingSettings.Model;

    /**
    * Circle Formatting Card
    */
    class CircleCardSettings extends FormattingSettingsCard {
        circleColor = new formattingSettings.ColorPicker({
            name: "circleColor", // circle color name should match circle color property name in capabilities.json
            displayName: "Color",
            description: "The fill color of the circle.",
            show: true,
            value: { value: "white" }
        });

        circleThickness = new formattingSettings.NumUpDown({
            name: "circleThickness", // circle thickness name should match circle color property name in capabilities.json
            displayName: "Thickness",
            description: "The circle thickness.",
            show: true,
            value: 2
        });

        name: string = "circle"; // circle card name should match circle object name in capabilities.json
        displayName: string = "Circle";
        show: boolean = true;
        slices: Array<FormattingSettingsSlice> = [this.circleColor, this.circleThickness];
    }

    /**
    * visual settings model class
    *
    */
    export class VisualFormattingSettingsModel extends FormattingSettingsModel {
        // Create formatting settings model circle formatting card
        circleCard = new CircleCardSettings();

        cards = [this.circleCard];
    }
    ```

3. Save **settings.ts**.

### Add a method to apply visual settings

Add the `getFormattingModel` method used to apply visual settings and required imports to the *visual.ts* file.

1. In VS Code, from the **src** folder, open **visual.ts**.

2. Add these `import` statements at the top of **visual.ts**.

    ```typescript
    import { FormattingSettingsService } from "powerbi-visuals-utils-formattingmodel";
    import { VisualFormattingSettingsModel } from "./settings";
    ```

3. Add the following declaration to **Visual**.

    ```typescript
    private formattingSettings: VisualFormattingSettingsModel;
    private formattingSettingsService: FormattingSettingsService;
    ```

4. Add the `getFormattingModel` method to **Visual**.

    ```typescript
    public getFormattingModel(): powerbi.visuals.FormattingModel {
        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);
    }
    ```

5. In the `Visual` class, add the following code line to `constructor` to initialize `formattingSettingsService`

    ```typescript
        this.formattingSettingsService = new FormattingSettingsService();

6. In the `Visual` class, add the following code to `update` to update the visual formatting settings to the latest formatting properties values.

    1. Add this code to the *if* statement after `const size = Math.min(width, height);`.

        ```typescript
        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews[0]);
        const circleSettings = this.formattingSettings.circleCard;
        ```

    2. Add this code to `ReactCircleCard.update` after `size`:

        ```typescript
        borderWidth: circleSettings.circleThickness.value,
        background: circleSettings.circleColor.value.value,
        }
        ```

7. Save **visual.ts**.

### Edit the component file

Edit the component file so that it can render the changes to the visual's color and border thickness.

1. In VS Code, from the **src** folder, open **component.tsx**.

2. Add these values to `State`:

    ```typescript
    background?: string,
    borderWidth?: number
    ```

3. In the `render` method, replace the following code lines:

    1. `const { textLabel, textValue, size } = this.state;` with:

        ```typescript
        const { textLabel, textValue, size, background, borderWidth } = this.state;
        ```

    2. `const style: React.CSSProperties = { width: size, height: size };` with:

        ```typescript
        const style: React.CSSProperties = { width: size, height: size, background, borderWidth };
        ```

4. Save **component.tsx**.

### Review your changes

Experiment with the visual's color and border thickness, which you can now control.

1. Verify that `pbiviz start` is running, and in the Power BI service, refresh your *React Circle Card* visual.

2. Select the **Format** tab and expand **Circle**.

3. Adjust the visual's **Color** and **Thickness** settings, and review their effect on the visual.

>[!div class="mx-imgBorder"]
>![A screenshot of the react circle card visual in Power B I service, showing the color and border thickness format options.](./media/create-react-visual/powerbi-visuals-colored-circle-card.png)

## Related content

* [Add formatting options to the circle card visual](custom-visual-develop-tutorial-format-options.md)
* [Create a Power BI bar chart visual](create-bar-chart.md)
* [Learn how to debug a Power BI visual you created](visuals-how-to-debug.md)




================================================
FILE: powerbi-docs/developer/visuals/create-ssl-certificate.md
================================================
---
title: Create SSL certificates for Power BI visuals
description: Learn how to generate SSL certificates by using Power BI Visual Tools in Windows, Mac, or Linux, or manually.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.custom: linux-related-content
ms.topic: how-to
ms.date: 12/08/2023
# customer intent: As a Power BI visual developer, I want to learn how to generate and install SSL certificates for Power BI visuals so that I can secure my visualizations.
---

# Create an SSL certificate

This article describes how to generate and install Secure Sockets Layer (SSL) certificates for Power BI visuals.

For the Windows, macOS X, and Linux procedures, you must have the Power BI Visual Tools `pbiviz` package installed. For more information, see [Set up your environment for developing a Power BI visual](./environment-setup.md).

## Create a certificate on Windows

To generate a certificate by using the PowerShell cmdlet `New-SelfSignedCertificate` on Windows 8 and later, run the following command:

```powershell
pbiviz --install-cert
```

For Windows 7, the `pbiviz` tool requires the OpenSSL utility to be available from the command line. To install OpenSSL, go to [OpenSSL](https://www.openssl.org) or [OpenSSL Binaries](https://wiki.openssl.org/index.php/Binaries).

## Create a certificate on macOS X

The OpenSSL utility is usually available in the macOS X operating system.

You can also install the OpenSSL utility by running either of the following commands:

- From the *Brew* package manager:
  
  ```cmd
  brew install openssl
  brew link openssl --force
  ```

- By using *MacPorts*:
  
  ```cmd
  sudo port install openssl
  ```

After you install the OpenSSL utility, run the following command to generate a new certificate:

```cmd
pbiviz --install-cert
```

## Create a certificate on Linux

The OpenSSL utility is usually available in the Linux operating system.

Before you begin, run the following commands to make sure `openssl` and `certutil` are installed:

```sh
which openssl
which certutil
```

If `openssl` and `certutil` aren't installed, install the `openssl` and `libnss3` utilities.

### Create the SSL configuration file

Create a file called */tmp/openssl.cnf* that contains the following text:

```
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[ alt_names ]
DNS.1=localhost
```

### Generate root certificate authority

To generate root certificate authority (CA) to sign local certificates, run the following commands:

```sh
touch $HOME/.rnd
openssl req -x509 -nodes -new -sha256 -days 1024 -newkey rsa:2048 -keyout /tmp/local-root-ca.key -out /tmp/local-root-ca.pem -subj "/C=US/CN=Local Root CA/O=Local Root CA"
openssl x509 -outform pem -in /tmp/local-root-ca.pem -out /tmp/local-root-ca.crt
```

### Generate a certificate for localhost 

To generate a certificate for `localhost` using the generated CA and *openssl.cnf*, run the following commands:

```sh
PBIVIZ=`which pbiviz`
PBIVIZ=`dirname $PBIVIZ`
PBIVIZ="$PBIVIZ/../lib/node_modules/powerbi-visuals-tools/certs"
# Make sure that $PBIVIZ contains the correct certificate directory path. ls $PBIVIZ should list 'blank' file.
openssl req -new -nodes -newkey rsa:2048 -keyout $PBIVIZ/PowerBIVisualTest_private.key -out $PBIVIZ/PowerBIVisualTest.csr -subj "/C=US/O=PowerBI Visuals/CN=localhost"
openssl x509 -req -sha256 -days 1024 -in $PBIVIZ/PowerBIVisualTest.csr -CA /tmp/local-root-ca.pem -CAkey /tmp/local-root-ca.key -CAcreateserial -extfile /tmp/openssl.cnf -out $PBIVIZ/PowerBIVisualTest_public.crt
```

### Add root certificates

To add a root certificate to the Chrome browser's database, run:

```sh
certutil -A -n "Local Root CA" -t "CT,C,C" -i /tmp/local-root-ca.pem -d sql:$HOME/.pki/nssdb
```

To add a root certificate to the Mozilla Firefox browser's database, run:

```sh
for certDB in $(find $HOME/.mozilla* -name "cert*.db")
do
certDir=$(dirname ${certDB});
certutil -A -n "Local Root CA" -t "CT,C,C" -i /tmp/local-root-ca.pem -d sql:${certDir}
done
```

To add a system-wide root certificate, run:

```sh
sudo cp /tmp/local-root-ca.pem /usr/local/share/ca-certificates/
sudo update-ca-certificates
```

### Remove root certificates

To remove a root certificate, run:

```sh
sudo rm /usr/local/share/ca-certificates/local-root-ca.pem
sudo update-ca-certificates --fresh
```

## Generate a certificate manually

You can also generate an SSL certificate manually using OpenSSL. You can specify any tools to generate your certificates.

If the OpenSSL utility is already installed, generate a new certificate by running:

```cmd
openssl req -x509 -newkey rsa:4096 -keyout PowerBIVisualTest_private.key -out PowerBIVisualTest_public.crt -days 365
```

You can usually find the `PowerBI-visuals-tools` web server certificates by running one of the following commands:

- For the global instance of the tools:
  
  ```cmd
  %appdata%\npm\node_modules\PowerBI-visuals-tools\certs
  ```

- For the local instance of the tools:
  
  ```cmd
  <Power BI visual project root>\node_modules\PowerBI-visuals-tools\certs
  ```

### PEM format

If you use the Privacy Enhanced Mail (PEM) certificate format, save the certificate file as *PowerBIVisualTest_public.crt*, and save the private key as *PowerBIVisualTest_private.key*.

### PFX format

If you use the Personal Information Exchange (PFX) certificate format, save the certificate file as *PowerBIVisualTest_public.pfx*.

If your PFX certificate file requires a passphrase:

1. In the config file, specify:
   
   ```cmd
   \PowerBI-visuals-tools\config.json
   ```
   
1. In the `server` section, specify the passphrase by replacing the \<YOUR PASSPHRASE> placeholder:

    ```cmd
    "server":{
        "root":"webRoot",
        "assetsRoute":"/assets",
        "privateKey":"certs/PowerBIVisualTest_private.key",
        "certificate":"certs/PowerBIVisualTest_public.crt",
        "pfx":"certs/PowerBIVisualTest_public.pfx",
        "port":"8080",
        "passphrase":"<YOUR PASSPHRASE>"
    }
    ```

## Related content

- [Develop a Power circle card BI visual](develop-circle-card.md)
- [Power BI visuals samples](samples.md)
- [Publish a Power BI visual to AppSource](office-store.md)



================================================
FILE: powerbi-docs/developer/visuals/custom-visual-develop-tutorial-format-options.md
================================================
---
title: Add formatting options to a Power BI custom visual
description: A tutorial on how to add different formatting options to the Power BI custom circle card visual developed in the previous tutorial.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: tutorial
ms.date: 10/10/2024
#customer intent: As a Power BI visual developer, I want to learn how to add formatting options to my custom visual so I can customize the visual appearance.
---

# Tutorial: Add formatting options to the Circle Card visual

When you create a visual, you can add options for customizing its properties. Some of the items that can be to customized  formatted include:

* Title
* Background
* Border
* Shadow
* Colors

In this tutorial, you learn how to:
> [!div class="checklist"]
>
> * Add formatting properties to your visual.
> * Package the visual
> * Import the custom visual to a Power BI Desktop or Service report

## Prerequisite

This tutorial explains how to add common formatting properties to a visual. We'll use the [Circle card](develop-circle-card.md) visual as an example. We'll add the ability to change the color and thickness of the circle. If you don't have the [Circle card](develop-circle-card.md) project folder that you created in that tutorial, redo the tutorial before continuing.

## Adding formatting options

1. In **PowerShell**, Navigate to your circle card project folder and start the circle card visual. Your visual is now running while being hosted on your computer.

    ```powershell
    pbiviz start
    ```

2. In **Power BI**, select the **Format panel**.

    You should see general formatting options, but not any visual formatting options.

    :::image type="content" source="media/custom-visual-develop-tutorial-format-options/view-general-formatting-options.png" alt-text="Screenshot of formatting panel with only general formatting options.":::

3. In **Visual Studio Code**, open the `capabilities.json` file.

4. Before the **dataViewMappings** array, add **objects**.

    ```json
    "objects": {},
    ```

    :::image type="content" source="media/custom-visual-develop-tutorial-format-options/add-objects.png" alt-text="Screenshot of capabilities file with empty objects array.":::

5. Save the `capabilities.json` file.

6. In **Power BI**, review the formatting options again.

    > [!Note]
    > If you don't see the formatting options change, select **Reload Custom Visual**.

    :::image type="content" source="media/custom-visual-develop-tutorial-format-options/view-formatting-options.png" alt-text="Screenshot of general and visual formatting options on the formatting pane.":::

7. Set the **Title** option to *Off*. Notice that the visual no longer displays the measure name at the top-left corner.

      :::image type="content" source="media/custom-visual-develop-tutorial-format-options/tile-option-off.png" alt-text="Screenshot of visualizations pane with the Title switch turned off. ":::

      :::image type="content" source="media/custom-visual-develop-tutorial-format-options/no-name-tile.png" alt-text="Screenshot of circle card visual without the title row.":::

### Adding custom formatting options

Now let's add new group called *color* for configuring the circle color and thickness of the circle's outline.

1. In **PowerShell**, enter <kbd>Ctrl</kbd>+<kbd>C</kbd> to stop the custom visual.

2. In **Visual Studio Code**, in the `capabilities.json` file, insert the following JSON fragment into the object labeled **objects**.

    ```json
        "circle": {
            "properties": {
                "circleColor": {
                    "type": {
                        "fill": {
                            "solid": {
                                "color": true
                            }
                        }
                    }
                },
                "circleThickness": {
                    "type": {
                        "numeric": true
                    }
                }
            }
        }
    ```

    This JSON fragment describes a group called *circle*, which consists of two variables - *circleColor* and *circleThickness*.

3. Save the `capabilities.json` file.

4. In the **Explorer pane**, go to the **src** folder, and then select **settings.ts**. *This file represents the settings for the starter visual*.

5. In the `settings.ts` file, replace the import lines and two classes with the following code.

    ```typescript
    import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

    import FormattingSettingsCard = formattingSettings.SimpleCard;
    import FormattingSettingsSlice = formattingSettings.Slice;
    import FormattingSettingsModel = formattingSettings.Model;

    export class CircleSettings extends FormattingSettingsCard{
        public circleColor = new formattingSettings.ColorPicker({
            name: "circleColor",
            displayName: "Color",
            value: { value: "#ffffff" },
            visible: true
        });

        public circleThickness = new formattingSettings.NumUpDown({
            name: "circleThickness",
            displayName: "Thickness",
            value: 2,
            visible: true
        });

        public name: string = "circle";
        public displayName: string = "Circle";
        public visible: boolean = true;
        public slices: FormattingSettingsSlice[] = [this.circleColor, this.circleThickness]
    }

    export class VisualSettings extends FormattingSettingsModel {
        public circle: CircleSettings = new CircleSettings();
        public cards: FormattingSettingsCard[] = [this.circle];
    }
    ```

    This module defines the two classes. The **CircleSettings** class defines two properties with names that match the objects defined in the capabilities.json file (*circleColor* and *circleThickness*) and sets default values. The **VisualSettings** class defines the circle object according to the properties described in the `capabilities.json` file.

6. Save the `settings.ts` file.

7. Open the `visual.ts` file.

8. In the `visual.ts` file, import the :

    ```typescript
    import { VisualSettings } from "./settings";
    import { FormattingSettingsService } from "powerbi-visuals-utils-formattingmodel";
    ```

    and in the **Visual** class add the following properties:

    ```typescript
    private visualSettings: VisualSettings;
    private formattingSettingsService: FormattingSettingsService;

    ```

    This property stores a reference to the **VisualSettings** object, describing the visual settings.

9. In the **Visual** class, insert the following as the first line of the *constructor*:

    ```typescript
    this.formattingSettingsService = new FormattingSettingsService();
    ```

10. In the **Visual** class, add the following method after the **update** method.

    ```typescript
    public getFormattingModel(): powerbi.visuals.FormattingModel {
        return this.formattingSettingsService.buildFormattingModel(this.visualSettings);
    }
    ```

     This function gets called on every formatting pane render. It allows you to select which of the
     objects and properties you want to expose to the users in the property pane.

11. In the **update** method, after the declaration of the **radius** variable, add the following code.

    ```typescript
    this.visualSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualSettings, options.dataViews[0]);
    this.visualSettings.circle.circleThickness.value = Math.max(0, this.visualSettings.circle.circleThickness.value);
    this.visualSettings.circle.circleThickness.value = Math.min(10, this.visualSettings.circle.circleThickness.value);
    ```

    This code retrieves the format options. It adjusts any value passed into the **circleThickness** property, and converts it to a number between zero and 10.

    :::image type="content" source="media/custom-visual-develop-tutorial-format-options/radius.png" alt-text="Screenshot of setting circle thickness to between zero and 10.":::

12. In the **circle element**, modify the values passed to the **fill style** and **stroke-width style** as follows:

    ```typescript
    .style("fill", this.visualSettings.circle.circleColor.value.value)
    ```

    ```typescript
    .style("stroke-width", this.visualSettings.circle.circleThickness.value)
    ```

    :::image type="content" source="media/custom-visual-develop-tutorial-format-options/circle-element-fill.png" alt-text="Screenshot of circle elements.":::

13. Save the `visual.ts` file.

14. In **PowerShell**, start the visual.

    ```powershell
    pbiviz start
    ```

15. In **Power BI**, in the toolbar floating above the visual, select **Toggle Auto Reload**.

    :::image type="content" source="media/custom-visual-develop-tutorial-format-options/toggle-auto-reload.png" alt-text="Screenshot of Toggle Auto Reload icon.":::

16. In the **visual format** options, expand **Circle**.

    :::image type="content" source="media/custom-visual-develop-tutorial-format-options/circle-format.png" alt-text="Screenshot of the final circle card visuals format pane elements.":::

    Modify the **color** and **thickness** option.

Modify the **thickness** option to a value less than zero, and a value higher than 10. Then notice the visual updates the value to a tolerable minimum or maximum.

## Debugging

For tips about debugging your custom visual, see the [debugging guide](visuals-how-to-debug.md).

## Packaging the custom visual

Now that the visual is completed and ready to be used, it's time to package it. A packaged visual can be imported to Power BI reports or service to be used and enjoyed by others.

When your visual is ready, follow the directions in [Package a Power BI visual](./package-visual.md) and then, if you want, share it with others so they can [import](./import-visual.md) and enjoy it.

## Related content

* [Learn more about the new Format Pane](format-pane-general.md)
* [Create a Power BI bar chart visual](create-bar-chart.md)
* [Learn how to debug a Power BI visual you created](visuals-how-to-debug.md)
* [Power BI visuals project structure](visual-project-structure.md)



================================================
FILE: powerbi-docs/developer/visuals/custom-visual-licenses.md
================================================
---
title: License models for Power BI AppSource visuals
description: This article explains how the business licenses for Power BI visuals purchased on AppSource are enforced.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 06/05/2024
#customer intent: As a Power BI user, I want to understand how the licenses for Power BI visuals purchased on AppSource are enforced so that I can use the visuals correctly.
---

# Power BI AppSource visual license models

When you buy a custom visual from [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals&exp=kyyw&page=1&filters=pay-as-you-go), there are several business and licensing models (pricing, free trials etc.) available. Some visuals have free trial versions, while others have a basic version available for free with extra functionality available for purchase.

>[!NOTE]
>Licensed visuals are supported from the July 2022 desktop.

## No license or partial license

If you try to render an unlicensed visual or a visual that you only have a partial license for, you might see one of the following icons:

* If you have an unlicensed visual in your report, the visual renders with an icon in the corner. Hover over the icon for a link to that visual on AppSource.com.

  :::image type="content" source="media/custom-visual-licenses/unlicensed-icon.png" alt-text="Screenshot showing an unlicensed custom visual with the unlicensed user icon in the corner.":::

* If you have a free version of the visual, a banner appears with a link to upgrade your license. This banner will disappear after a while.

  :::image type="content" source="media/custom-visual-licenses/upgrade-visual-banner.png" alt-text="Screenshot showing a banner offering to upgrade the visual license.":::

* If you try using a feature in the visual that you don't have a license to use, a banner appears with a link to upgrade your license.

  :::image type="content" source="media/custom-visual-licenses/upgrade-banner.png" alt-text="Screenshot showing a banner offering to upgrade the license.":::

* If you have an unlicensed visual in your report, the visual doesn't render, and a button appears enabling you to get a license or contact the report owner.

  :::image type="content" source="media/custom-visual-licenses/get-a-license.png" alt-text="Screenshot showing a button for getting a license or contacting owner.":::

## Unsupported environment

If your report or dashboard contains a visual that isn't supported in your environment, the visual doesn't render and a notification appears.

  :::image type="content" source="media/custom-visual-licenses/unsupported-environment.png" alt-text="Screenshot showing notification of an unsupported environment.":::

For a list of unsupported environments see [limitations](#considerations-and-limitations).

## Solution

Select **Upgrade visual** to go to the AppSource page where you can buy the license or upgrade to the paid version.

After you purchase and assign the license, it can take up to an hour for the license to be recognized. Wait one hour and then refresh your Power BI session (restart Desktop or refresh your web browser).

## Considerations and limitations

Currently, the following Power BI environments don't support license management or license enforcement:

* Embedded - Publish To Web, PaaS embed
* National/Regional clouds (Depends on general support for transactability in national/regional clouds)
* RS Server (No planned support)
* Exporting (PDF\PPT) using REST API

## Related content

[Import a Power BI visual](import-visual.md)



================================================
FILE: powerbi-docs/developer/visuals/dataview-mappings.md
================================================
---
title: Understand data view mapping in Power BI visuals
description: Learn about single, categorical, and matrix data mapping. Specify the conditional requirements for data roles to create different types of visuals.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 12/12/2024
#customer intent: As a Power BI visual developer, I want to understand how data view mapping works in Power BI visuals so that I can create different types of visuals.
---

# Understand data view mapping in Power BI visuals

This article discusses data view mapping and describes how data roles are used to create different types of visuals. It explains how to specify conditional requirements for data roles and the different `dataMappings` types.

Each valid mapping produces a data view. You can provide multiple data mappings under certain conditions. The supported mapping options are:

* [conditions](#conditions)
* [categorical](#categorical-data-mapping)
* [single](#single-data-mapping)
* [table](#mapping-tables)
* [matrix](#matrix-data-mapping)

```json
"dataViewMappings": [
    {
        "conditions": [ ... ],
        "categorical": { ... },
        "single": { ... },
        "table": { ... },
        "matrix": { ... }
    }
]
```

Power BI creates a mapping to a data view only if the valid mapping is also defined in `dataViewMappings`.

In other words, `categorical` might be defined in `dataViewMappings` but other mappings, such as `table` or `single`, might not be. In that case, Power BI produces a data view with a single `categorical` mapping, while `table` and other mappings remain undefined. For example:

```json
"dataViewMappings": [
    {
    "categorical": {
        "categories": [ ... ],
        "values": [ ... ]
    },
    "metadata": { ... }
    }
]
```

## Conditions

The `conditions` section establishes rules for a particular data mapping. If the data matches one of the described sets of conditions, the visual accepts the data as valid.

For each field, you can specify a minimum and maximum value. The value represents the number of fields that can be bound to that data role.

> [!NOTE]
> If a data role is omitted in the condition, it can have any number of fields.

In the following example, the `category` is limited to one data field and the `measure` is limited to two data fields.

```json
"conditions": [
    { "category": { "max": 1 }, "measure": { "max": 2 } },
]
```

You can also set multiple conditions for a data role. In that case, the data is valid if any one of the conditions is met.

```json
"conditions": [
    { "category": { "min": 1, "max": 1 }, "measure": { "min": 0, "max": 2 } },
    { "category": { "min": 2, "max": 2 }, "measure": { "min": 0, "max": 1 } }
]
```

In the previous example, one of the following two conditions is required:

* Exactly one category field and no more than two measures
* Exactly two categories and no more than one measure field

> [!NOTE]
> Only one data role can have a minimun value of ≥ 1 per condition.

## Single data mapping

Single data mapping is the simplest form of data mapping. It accepts a single measure field and returns the total. If the field is numeric, it returns the sum. Otherwise, it returns a count of unique values.

To use single data mapping, define the name of the data role that you want to map. This mapping works only with a single measure field. If a second field is assigned, no data view is generated, so it's good practice to include a condition that limits the data to a single field.

> [!NOTE]
> This data mapping can't be used in conjunction with any other data mapping. It's meant to reduce data to a single numeric value.

For example:

```json
{
    "dataRoles": [
        {
            "displayName": "Y",
            "name": "Y",
            "kind": "Measure"
        }
    ],
    "dataViewMappings": [
        {
            "conditions": [
                {
                    "Y": {
                        "max": 1
                    }
                }
            ],
            "single": {
                "role": "Y"
            }
        }
    ]
}
```

The resulting data view can still contain other types of mapping, like table or categorical, but each mapping contains only the single value. The best practice is to access the value only in single mapping.

```JSON
{
    "dataView": [
        {
            "metadata": null,
            "categorical": null,
            "matrix": null,
            "table": null,
            "tree": null,
            "single": {
                "value": 94163140.3560001
            }
        }
    ]
}
```

The following code sample processes simple data views mapping:

```typescript
"use strict";
import powerbi from "powerbi-visuals-api";
import DataView = powerbi.DataView;
import DataViewSingle = powerbi.DataViewSingle;
// standard imports
// ...

export class Visual implements IVisual {
    private target: HTMLElement;
    private host: IVisualHost;
    private valueText: HTMLParagraphElement;

    constructor(options: VisualConstructorOptions) {
        // constructor body
        this.target = options.element;
        this.host = options.host;
        this.valueText = document.createElement("p");
        this.target.appendChild(this.valueText);
        // ...
    }

    public update(options: VisualUpdateOptions) {
        const dataView: DataView = options.dataViews[0];
        const singleDataView: DataViewSingle = dataView.single;

        if (!singleDataView ||
            !singleDataView.value ) {
            return
        }

        this.valueText.innerText = singleDataView.value.toString();
    }
}
```

The previous code sample results in the display of a single value from Power BI:

:::image type="content" source="media/dataview-mappings/visual-simple-dataview-mapping.png" alt-text="Screenshot of a single data view mapping visual.":::

## Categorical data mapping

Categorical data mapping is used to get independent groupings or categories of data. The categories can also be grouped together by using "group by" in the data mapping.

### Basic categorical data mapping

Consider the following data roles and mappings:

```json
"dataRoles":[
    {
        "displayName": "Category",
        "name": "category",
        "kind": "Grouping"
    },
    {
        "displayName": "Y Axis",
        "name": "measure",
        "kind": "Measure"
    }
],
"dataViewMappings": {
    "categorical": {
        "categories": {
            "for": { "in": "category" }
        },
        "values": {
            "select": [
                { "bind": { "to": "measure" } }
            ]
        }
    }
}
```

The previous example reads "Map my `category` data role so that for every field I drag into `category`, its data is mapped to `categorical.categories`. Also, map my `measure` data role to `categorical.values`."

* **for...in**: Includes *all* items in this data role in the data query.
* **bind...to**: Produces the same result as *for...in* but expects the data role to have a condition restricting it to a *single* field.

### Group categorical data

The next example uses the same two data roles as the previous example and adds two more data roles named `grouping` and `measure2`.

```json
"dataRoles":[
    {
        "displayName": "Category",
        "name": "category",
        "kind": "Grouping"
    },
    {
        "displayName": "Y Axis",
        "name": "measure",
        "kind": "Measure"
    },
    {
        "displayName": "Grouping with",
        "name": "grouping",
        "kind": "Grouping"
    },
    {
        "displayName": "X Axis",
        "name": "measure2",
        "kind": "Grouping"
    }
],
"dataViewMappings": [
    {
        "categorical": {
            "categories": {
                "for": {
                    "in": "category"
                }
            },
            "values": {
                "group": {
                    "by": "grouping",
                    "select": [{
                            "bind": {
                                "to": "measure"
                            }
                        },
                        {
                            "bind": {
                                "to": "measure2"
                            }
                        }
                    ]
                }
            }
        }
    }
]
```

The difference between this mapping and the basic mapping is how `categorical.values` is mapped. When you map the `measure` and `measure2` data roles to the data role `grouping`, the x-axis and y-axis can be scaled appropriately.

### Group hierarchical data

In the next example, the categorical data is used to create a hierarchy, which can be used to support [drill-down](drill-down-support.md) actions.

The following example shows the data roles and mappings:

```json
"dataRoles": [
    {
        "displayName": "Categories",
        "name": "category",
        "kind": "Grouping"
    },
    {
        "displayName": "Measures",
        "name": "measure",
        "kind": "Measure"
    },
    {
        "displayName": "Series",
        "name": "series",
        "kind": "Measure"
    }
],
"dataViewMappings": [
    {
        "categorical": {
            "categories": {
                "for": {
                    "in": "category"
                }
            },
            "values": {
                "group": {
                    "by": "series",
                    "select": [{
                            "for": {
                                "in": "measure"
                            }
                        }
                    ]
                }
            }
        }
    }
]
```

Consider the following categorical data:

| Country/Region | 2013 | 2014 | 2015 | 2016 |
|---------|------|------|------|------|
| USA | x | x | 650 | 350 |
| Canada | x | 630 | 490 | x |
| Mexico | 645 | x | x | x |
| UK | x | x | 831 | x |

Power BI produces a categorical data view with the following set of categories.

```JSON
{
    "categorical": {
        "categories": [
            {
                "source": {...},
                "values": [
                    "Canada",
                    "USA",
                    "UK",
                    "Mexico"
                ],
                "identity": [...],
                "identityFields": [...],
            }
        ]
    }
}
```

Each `category` maps to a set of `values`. Each of these `values` is grouped by `series`, which is expressed as years.

For example, each `values` array represents one year.
Also, each `values` array has four values: Canada, USA, UK, and Mexico.

```JSON
{
    "values": [
        // Values for year 2013
        {
            "source": {...},
            "values": [
                null, // Value for `Canada` category
                null, // Value for `USA` category
                null, // Value for `UK` category
                645 // Value for `Mexico` category
            ],
            "identity": [...],
        },
        // Values for year 2014
        {
            "source": {...},
            "values": [
                630, // Value for `Canada` category
                null, // Value for `USA` category
                null, // Value for `UK` category
                null // Value for `Mexico` category
            ],
            "identity": [...],
        },
        // Values for year 2015
        {
            "source": {...},
            "values": [
                490, // Value for `Canada` category
                650, // Value for `USA` category
                831, // Value for `UK` category
                null // Value for `Mexico` category
            ],
            "identity": [...],
        },
        // Values for year 2016
        {
            "source": {...},
            "values": [
                null, // Value for `Canada` category
                350, // Value for `USA` category
                null, // Value for `UK` category
                null // Value for `Mexico` category
            ],
            "identity": [...],
        }
    ]
}
```

The following code sample is for processing categorical data view mapping. This sample creates the hierarchical structure **Country/Region > Year > Value**.

```typescript
"use strict";
import powerbi from "powerbi-visuals-api";
import DataView = powerbi.DataView;
import DataViewCategorical = powerbi.DataViewCategorical;
import DataViewValueColumnGroup = powerbi.DataViewValueColumnGroup;
import PrimitiveValue = powerbi.PrimitiveValue;
// standard imports
// ...

export class Visual implements IVisual {
    private target: HTMLElement;
    private host: IVisualHost;
    private categories: HTMLElement;

    constructor(options: VisualConstructorOptions) {
        // constructor body
        this.target = options.element;
        this.host = options.host;
        this.categories = document.createElement("pre");
        this.target.appendChild(this.categories);
        // ...
    }

    public update(options: VisualUpdateOptions) {
        const dataView: DataView = options.dataViews[0];
        const categoricalDataView: DataViewCategorical = dataView.categorical;

        if (!categoricalDataView ||
            !categoricalDataView.categories ||
            !categoricalDataView.categories[0] ||
            !categoricalDataView.values) {
            return;
        }

        // Categories have only one column in data buckets
        // To support several columns of categories data bucket, iterate categoricalDataView.categories array.
        const categoryFieldIndex = 0;
        // Measure has only one column in data buckets.
        // To support several columns on data bucket, iterate years.values array in map function
        const measureFieldIndex = 0;
        let categories: PrimitiveValue[] = categoricalDataView.categories[categoryFieldIndex].values;
        let values: DataViewValueColumnGroup[] = categoricalDataView.values.grouped();

        let data = {};
        // iterate categories/countries-regions
        categories.map((category: PrimitiveValue, categoryIndex: number) => {
            data[category.toString()] = {};
            // iterate series/years
            values.map((years: DataViewValueColumnGroup) => {
                if (!data[category.toString()][years.name] && years.values[measureFieldIndex].values[categoryIndex]) {
                    data[category.toString()][years.name] = []
                }
                if (years.values[0].values[categoryIndex]) {
                    data[category.toString()][years.name].push(years.values[measureFieldIndex].values[categoryIndex]);
                }
            });
        });

        this.categories.innerText = JSON.stringify(data, null, 6);
        console.log(data);
    }
}
```

Here's the resulting visual:

:::image type="content" source="media/dataview-mappings/categorical-data-view-mapping-visual.png" alt-text="Screenshot of a visual with categorical data view mapping.":::

## Mapping tables

The *table* data view is essentially a list of data points where numeric data points can be aggregated.

For example, use the [same data in the previous section](#group-hierarchical-data), but with the following capabilities:

```json
"dataRoles": [
    {
        "displayName": "Column",
        "name": "column",
        "kind": "Grouping"
    },
    {
        "displayName": "Value",
        "name": "value",
        "kind": "Measure"
    }
],
"dataViewMappings": [
    {
        "table": {
            "rows": {
                "select": [
                    {
                        "for": {
                            "in": "column"
                        }
                    },
                    {
                        "for": {
                            "in": "value"
                        }
                    }
                ]
            }
        }
    }
]
```

Visualize the table data view like this example:  

| Country/Region| Year | Sales |
|-----|-----|------|
| USA | 2016 | 100 |
| USA | 2015 | 50 |
| Canada | 2015 | 200 |
| Canada | 2015 | 50 |
| Mexico | 2013 | 300 |
| UK | 2014 | 150 |
| USA | 2015 | 75 |

Data binding:

:::image type="content" source="media/dataview-mappings/table-dataview-mapping-data.png" alt-text="Screenshot of the table data view mapping data binds.":::

Power BI displays your data as the table data view. *Don't assume that the data is ordered*.

```JSON
{
    "table" : {
        "columns": [...],
        "rows": [
            [
                "Canada",
                2014,
                630
            ],
            [
                "Canada",
                2015,
                490
            ],
            [
                "Mexico",
                2013,
                645
            ],
            [
                "UK",
                2014,
                831
            ],
            [
                "USA",
                2015,
                650
            ],
            [
                "USA",
                2016,
                350
            ]
        ]
    }
}
```

To aggregate the data, select the desired field and then choose **Sum**.  

:::image type="content" source="media/dataview-mappings/data-aggregation.png" alt-text="Screenshot of Sum selected from the field's dropdown.":::

Code sample to process table data view mapping.

```typescript
"use strict";
import "./../style/visual.less";
import powerbi from "powerbi-visuals-api";
// ...
import DataViewMetadataColumn = powerbi.DataViewMetadataColumn;
import DataViewTable = powerbi.DataViewTable;
import DataViewTableRow = powerbi.DataViewTableRow;
import PrimitiveValue = powerbi.PrimitiveValue;
// standard imports
// ...

export class Visual implements IVisual {
    private target: HTMLElement;
    private host: IVisualHost;
    private table: HTMLParagraphElement;

    constructor(options: VisualConstructorOptions) {
        // constructor body
        this.target = options.element;
        this.host = options.host;
        this.table = document.createElement("table");
        this.target.appendChild(this.table);
        // ...
    }

    public update(options: VisualUpdateOptions) {
        const dataView: DataView = options.dataViews[0];
        const tableDataView: DataViewTable = dataView.table;

        if (!tableDataView) {
            return
        }
        while(this.table.firstChild) {
            this.table.removeChild(this.table.firstChild);
        }

        //draw header
        const tableHeader = document.createElement("th");
        tableDataView.columns.forEach((column: DataViewMetadataColumn) => {
            const tableHeaderColumn = document.createElement("td");
            tableHeaderColumn.innerText = column.displayName
            tableHeader.appendChild(tableHeaderColumn);
        });
        this.table.appendChild(tableHeader);

        //draw rows
        tableDataView.rows.forEach((row: DataViewTableRow) => {
            const tableRow = document.createElement("tr");
            row.forEach((columnValue: PrimitiveValue) => {
                const cell = document.createElement("td");
                cell.innerText = columnValue.toString();
                tableRow.appendChild(cell);
            })
            this.table.appendChild(tableRow);
        });
    }
}
```

The visual styles file `style/visual.less` contains the layout for the table:

```less
table {
    display: flex;
    flex-direction: column;
}

tr, th {
    display: flex;
    flex: 1;
}

td {
    flex: 1;
    border: 1px solid black;
}
```

The resulting visual looks like this:

:::image type="content" source="media/dataview-mappings/table-dataview-mapping-visual.png" alt-text="Screenshot of a visual with table data view mapping.":::

## Matrix data mapping

*Matrix* data mapping is similar to table data mapping, but the rows are presented hierarchically. Any of the data role values can be used as a column header value.

```json
{
    "dataRoles": [
        {
            "name": "Category",
            "displayName": "Category",
            "displayNameKey": "Visual_Category",
            "kind": "Grouping"
        },
        {
            "name": "Column",
            "displayName": "Column",
            "displayNameKey": "Visual_Column",
            "kind": "Grouping"
        },
        {
            "name": "Measure",
            "displayName": "Measure",
            "displayNameKey": "Visual_Values",
            "kind": "Measure"
        }
    ],
    "dataViewMappings": [
        {
            "matrix": {
                "rows": {
                    "for": {
                        "in": "Category"
                    }
                },
                "columns": {
                    "for": {
                        "in": "Column"
                    }
                },
                "values": {
                    "select": [
                        {
                            "for": {
                                "in": "Measure"
                            }
                        }
                    ]
                }
            }
        }
    ]
}
```

### Hierarchical structure of matrix data

Power BI creates a hierarchical data structure. The root of the tree hierarchy includes the data from the **Parents** column of the `Category` data role with children from the **Children** column of the data role table.

Semantic model:

| Parents | Children | Grandchildren | Columns | Values |
|-----|-----|------|-------|-------|
| Parent1 | Child1 | Grand child1 | Col1 | 5 |
| Parent1 | Child1 | Grand child1 | Col2 | 6 |
| Parent1 | Child1 | Grand child2 | Col1 | 7 |
| Parent1 | Child1 | Grand child2 | Col2 | 8 |
| Parent1 | Child2 | Grand child3 | Col1 | 5 |
| Parent1 | Child2 | Grand child3 | Col2 | 3 |
| Parent1 | Child2 | Grand child4 | Col1 | 4 |
| Parent1 | Child2 | Grand child4 | Col2 | 9 |
| Parent1 | Child2 | Grand child5 | Col1 | 3 |
| Parent1 | Child2 | Grand child5 | Col2 | 5 |
| Parent2 | Child3 | Grand child6 | Col1 | 1 |
| Parent2 | Child3 | Grand child6 | Col2 | 2 |
| Parent2 | Child3 | Grand child7 | Col1 | 7 |
| Parent2 | Child3 | Grand child7 | Col2 | 1 |
| Parent2 | Child3 | Grand child8 | Col1 | 10 |
| Parent2 | Child3 | Grand child8 | Col2 | 13 |

The core matrix visual of Power BI renders the data as a table.

:::image type="content" source="media/dataview-mappings/matrix-visual-smaple.png" alt-text="Screenshot of a Matrix visual rendered as a table.":::

The visual gets its data structure as described in the following code (only the first two table rows are shown here):

```json
{
    "metadata": {...},
    "matrix": {
        "rows": {
            "levels": [...],
            "root": {
                "childIdentityFields": [...],
                "children": [
                    {
                        "level": 0,
                        "levelValues": [...],
                        "value": "Parent1",
                        "identity": {...},
                        "childIdentityFields": [...],
                        "children": [
                            {
                                "level": 1,
                                "levelValues": [...],
                                "value": "Child1",
                                "identity": {...},
                                "childIdentityFields": [...],
                                "children": [
                                    {
                                        "level": 2,
                                        "levelValues": [...],
                                        "value": "Grand child1",
                                        "identity": {...},
                                        "values": {
                                            "0": {
                                                "value": 5 // value for Col1
                                            },
                                            "1": {
                                                "value": 6 // value for Col2
                                            }
                                        }
                                    },
                                    ...
                                ]
                            },
                            ...
                        ]
                    },
                    ...
                ]
            }
        },
        "columns": {
            "levels": [...],
            "root": {
                "childIdentityFields": [...],
                "children": [
                    {
                        "level": 0,
                        "levelValues": [...],
                        "value": "Col1",
                        "identity": {...}
                    },
                    {
                        "level": 0,
                        "levelValues": [...],
                        "value": "Col2",
                        "identity": {...}
                    },
                    ...
                ]
            }
        },
        "valueSources": [...]
    }
}
```

### Expand and collapse row headers

For **API 4.1.0** or later, matrix data supports [expanding and collapsing row headers](../../visuals/desktop-matrix-visual.md#expanding-and-collapsing-row-headers). From **API 4.2** you can expand/collapse entire level programmatically.
The expand and collapse feature optimizes fetching data to the dataView by allowing the user to expand or collapse a row without fetching all the data for the next level. It only fetches the data for the selected row. The row header’s expansion state remains consistent across bookmarks and even across saved reports. It's not specific to each visual.

Expand and collapse commands can be added to the context menu by supplying the `dataRoles` parameter to the `showContextMenu` method.

:::image type="content" source="media/dataview-mappings/expand-collapse-context-menu.png" alt-text="Screenshot showing context menu with expand and collapse options.":::

To expand a large number of data points, use the [fetch more data API](./fetch-more-data.md) with the expand/collapse API.

#### API features

The following elements have been added to API version 4.1.0 to enable expanding and collapsing row headers:

* The `isCollapsed` flag in the `DataViewTreeNode`:

    ```typescript
    interface DataViewTreeNode {
        //...
        /**
        * TRUE if the node is Collapsed
        * FALSE if it is Expanded
        * Undefined if it cannot be Expanded (e.g. subtotal)
        */
        isCollapsed?: boolean;
    }
    ```

* The `toggleExpandCollapse` method in the `ISelectionManger` interface:

    ```typescript
    interface ISelectionManager {
        //...
        showContextMenu(selectionId: ISelectionId, position: IPoint, dataRoles?: string): IPromise<{}>; // dataRoles is the name of the role of the selected data point
        toggleExpandCollapse(selectionId: ISelectionId, entireLevel?: boolean): IPromise<{}>;  // Expand/Collapse an entire level will be available from API 4.2.0 
        //...
    }
    ```

* The `canBeExpanded` flag in the DataViewHierarchyLevel:

    ```typescript
    interface DataViewHierarchyLevel {
        //...
        /** If TRUE, this level can be expanded/collapsed */
        canBeExpanded?: boolean;
    }
    ```

#### Visual requirements

To enable the expand collapse feature on a visual by using the matrix data view:

1. Add the following code to the capabilities.json file:

    ```json
       "expandCollapse": {
        "roles": ["Rows"], //”Rows” is the name of rows data role
        "addDataViewFlags": {
            "defaultValue": true //indicates if the DataViewTreeNode will get the isCollapsed flag by default 
        }
    },
    ```

2. Confirm that the roles are drillable:

    ```json
        "drilldown": {
        "roles": ["Rows"]
    },
    ```

3. For each node, create an instance of the selection builder by calling the `withMatrixNode` method in the selected node hierarchy level and creating a `selectionId`. For example:

    ```typescript
        let nodeSelectionBuilder: ISelectionIdBuilder = visualHost.createSelectionIdBuilder();
        // parantNodes is a list of the parents of the selected node.
        // node is the current node which the selectionId is created for. 
        parentNodes.push(node);
        for (let i = 0; i < parentNodes.length; i++) {
            nodeSelectionBuilder = nodeSelectionBuilder.withMatrixNode(parentNodes[i], levels);
        }
      const nodeSelectionId: ISelectionId = nodeSelectionBuilder.createSelectionId(); 
    ```

4. Create an instance of the selection manager, and use the `selectionManager.toggleExpandCollapse()` method, with the parameter of the `selectionId`, that you created for the selected node. For example:

    ```typescript
        // handle click events to apply expand\collapse action for the selected node
        button.addEventListener("click", () => {
        this.selectionManager.toggleExpandCollapse(nodeSelectionId);
    });
    ```

>[!NOTE]
>
> * If the selected node is not a row node, PowerBI will ignore expand and collapse calls and the expand and collapse commands will be removed from the context menu.
> * The `dataRoles` parameter is required for the `showContextMenu` method only if the visual supports `drilldown` or `expandCollapse` features. If the visual supports these features but the dataRoles wasn't supplied, an error will output to the console when using the developer visual or if debugging a public visual with debug mode enabled.

#### Considerations and limitations

* After you expand a node, new data limits will be applied to the DataView. The new DataView might not include some of the nodes presented in the previous DataView.
* When using expand or collapse, totals are added even if the visual didn’t request them.
* Expanding and collapsing columns isn't supported.

## Keep all metadata columns

For **API 5.1.0** or later, keeping all metadata columns is supported. This feature allows the visual to receive the metadata for all columns no matter what their active projections are.

Add the following lines to your *capabilities.json* file:

```json
"keepAllMetadataColumns": {
    "type": "boolean",
    "description": "Indicates that visual is going to receive all metadata columns, no matter what the active projections are"
}
```

Setting this property to `true` will result in receiving all the metadata, including from collapsed columns. Setting it to `false` or leaving it undefined will result in receiving metadata only on columns with active projections (expanded, for example).

## Data reduction algorithm

The data reduction algorithm controls which data and how much data is received in the data view.

The *count* is set to the maximum number of values that the data view can accept. If there are more than *count* values, the data reduction algorithm determines which values should be received.

### Data reduction algorithm types

There are four types of data reduction algorithm settings:

* `top`: The first *count* values are taken from the semantic model.
* `bottom`: The last *count* values are taken from the semantic model.
* `sample`: The first and last items are included, and *count* number of items with equal intervals between them.
For example, if you have a semantic model [0, 1, 2, ... 100] and a *count* of 9, you receive the values [0, 10, 20 ... 100].
* `window`: Loads one *window* of data points at a time containing *count* elements. Currently, `top` and `window` are equivalent. In the future, a windowing setting will be fully supported.

By default, all Power BI visuals have the top data reduction algorithm applied with the *count* set to 1000 data points. This default is equivalent to setting the following properties in the *capabilities.json* file:

```json
"dataReductionAlgorithm": {
    "top": {
        "count": 1000
    }
}
```

You can modify the *count* value to any integer value up to 30000. R-based Power BI visuals can support up to 150000 rows.

### Data reduction algorithm usage

The data reduction algorithm can be used in categorical, table, or matrix data view mapping.

In categorical data mapping, you can add the algorithm to the "categories" and/or "group" section of `values` for categorical data mapping.

```json
"dataViewMappings": {
    "categorical": {
        "categories": {
            "for": { "in": "category" },
            "dataReductionAlgorithm": {
                "window": {
                    "count": 300
                }
            }  
        },
        "values": {
            "group": {
                "by": "series",
                "select": [{
                        "for": {
                            "in": "measure"
                        }
                    }
                ],
                "dataReductionAlgorithm": {
                    "top": {
                        "count": 100
                    }
                }  
            }
        }
    }
}
```

In table data view mapping, apply the data reduction algorithm to the `rows` section of the Data View mapping table.

```json
"dataViewMappings": [
    {
        "table": {
            "rows": {
                "for": {
                    "in": "values"
                },
                "dataReductionAlgorithm": {
                    "top": {
                        "count": 2000
                    }
                }
            }
        }
    }
]
```

You can apply the data reduction algorithm to the `rows` and `columns` sections of the Data View mapping matrix.

## Related content

* [Add drill-down support](drill-down-support.md)
* [Create custom Power BI visuals without data binding](no-dataroles-support.md)



================================================
FILE: powerbi-docs/developer/visuals/detect-filter-api.md
================================================
---
title: The Filter applied API in Power BI custom visuals
description: This article describes the API parameter that indicates whether or not a filter is applied to a visual.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/06/2024
#customer intent: As a Power BI visual developer, I want to learn how to detect if a filter is applied to a visual so that I can adjust the display accordingly.
---

# Detect filter state

> [!NOTE]
> This feature is available from API version 5.4

The `isDataFilterApplied` boolean parameter in the `DataViewMetadata` object notes if the rendered visual or report has any filters applied to it. The developer can then adjust the display accordingly (for example, by adding or removing text depending on if there's a filter). This feature applies whether the filter is applied to the entire report, page, or specific visual.

To use the `isDataFilterApplied` parameter:

```typescript
public update(options: VisualUpdateOptions) {
    const dataView = options?.dataViews[0]; 
    if (dataView && dataView?.metadata?.isDataFilterApplied) {
        ...
 }
}
```

## Related content

[Use Power BI visuals selections to add interactivity to a visual](selection-api.md)



================================================
FILE: powerbi-docs/developer/visuals/develop-circle-card.md
================================================
---
title: Develop a Power BI circle card visual as an example
description: This tutorial explains how you can develop a Power BI visual. It uses the circle card visual as an example to demonstrate the process of creating a visual.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: tutorial
ms.date: 02/10/2025
ms.custom: engagement-fy23
#customer intent: As a Power BI visual developer, I want to learn how to develop a Power BI visual so that I can create custom visuals for my reports.
---

# Tutorial: Develop a Power BI circle card visual

In this tutorial, you develop a Power BI visual named circle card that displays a formatted measure value inside a circle. The circle card visual supports customization of fill color and outline thickness.

In this tutorial, you learn how to:

- [x] Create a development project for your visual.
- [x] Develop your visual with [D3](https://d3js.org/) visual elements.
- [x] Configure your visual to process data.
- [x] Configure your visual to adapt to size changes.
- [x] Configure adaptive color and border settings for your visual.

For the full source code of this visual, see [circle card Power BI visual](https://github.com/microsoft/powerbi-visuals-circlecard).

If you don't have a Power BI account, you can sign up for a free trial on the Power BI website.

## Prerequisites

[!INCLUDE[Power BI tutorials prerequisites](../../includes/visual-tutorial-prerequisites.md)]

## Create a development project

In this section, you create a project for the circle card visual.

>[!NOTE]
>In this tutorial, [Visual Studio Code](https://code.visualstudio.com/) (VS Code) is used for developing the Power BI visual.

1. Open a new terminal in **VS Code** and navigate to the folder you want to create your project in.

2. Enter the following command in the PowerShell terminal:

    ```PowerShell
    pbiviz new CircleCard
    ```

3. Open the *CircleCard* folder in the **VS Code** explorer. (**File** > **Open Folder**).

   :::image type="content" source="./media/develop-circle-card/circle-card-explorer.png" alt-text="Screenshot of VS Code window opened to the circle card folder.":::

   For a detailed explanation of the function of each of these files, see [Power BI visual project structure](./visual-project-structure.md).

4. Check the terminal window and confirm that you're in the circleCard directory. Install the [Power BI visual tools dependencies](https://www.npmjs.com/package/powerbi-visuals-tools).

   ```powershell
   npm install
   ```

   >[!TIP]
   > To see which dependencies have been installed in your visual, check the *package.json* file.

5. Start the circle card visual.

    ```powershell
    pbiviz start
    ```

    Your visual is now running while being hosted on your computer.

    >[!IMPORTANT]
    >Don't close the **PowerShell** window until the end of the tutorial. To stop the visual from running, enter <kbd>Ctrl</kbd>+<kbd>C</kbd> and if prompted to terminate the batch job, enter <kbd>Y</kbd> and then <kbd>Enter</kbd>.

## View the visual in the Power BI service

[!INCLUDE[View the Power BI visual in Power BI service](../../includes/visual-tutorial-view.md)]

## Add visual elements and text

In this section you learn how to turn your visual into a circle, and make it display text.

## Modify the visuals file

Set up the **visual.ts** file.

>[!TIP]
>To improve readability, it's recommended that you format the document every time you copy code snippets into your project. Right-click anywhere in VS code, and select *Format Document* (or enter <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd>).

1. In VS Code, in the **Explorer pane**, expand the **src** folder, and select the file **visual.ts**.

    >[!div class="mx-imgBorder"]
    >![Screenshot of accessing the visual.ts file in VS code.](media/develop-circle-card/visual-file.png)

2. Remove all the code under the MIT License comment.

    > [!IMPORTANT]
    > Notice the comments at the top of the **visual.ts** file. Permission to use the Power BI visual packages is granted free of charge under the terms of the Massachusetts Institute of Technology (MIT) License. As part of the agreement, you must leave the comments at the top of the file.

3. Import the libraries and modules needed, and define the type selection for the [d3 library](https://d3js.org):

   ```typescript
   "use strict";

   import "./../style/visual.less";
   import powerbi from "powerbi-visuals-api";
   import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;
   import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
   import IVisual = powerbi.extensibility.visual.IVisual;
   import DataView = powerbi.DataView;
   import IVisualHost = powerbi.extensibility.IVisualHost;
   import * as d3 from "d3";
   type Selection<T extends d3.BaseType> = d3.Selection<T, any, any, any>;
   ```

    >[!NOTE]
    >If the D3 JavaScript library wasn't installed as part of your setup, install it now. From PowerShell, run `npm i d3@latest --save`

   Notice that among the items you imported are:
    * *IVisualHost* -  A collection of properties and services used to interact with the visual host (Power BI).
    * *D3 library* - JavaScript library for creating data driven documents.

4. Below the imports, create an empty *visual* class. The *visual* class implements the IVisual interface where all visuals begin:

    ```typescript
    export class Visual implements IVisual {

    }
    ```

   For information about what goes into the visual class, see [Visual API](./visual-api.md). In the next three steps, we define this class.

5. Add class-level *private* methods at the beginning of the *visual* class:

    ```typescript
    private host: IVisualHost;
    private svg: Selection<SVGElement>;
    private container: Selection<SVGElement>;
    private circle: Selection<SVGElement>;
    private textValue: Selection<SVGElement>;
    private textLabel: Selection<SVGElement>;
    ```

   Notice that some of these private methods use the Selection type.

6. Define the circle and text elements in the *constructor* method. This method is called when the visual is instantiated. The D3 Scalable Vector Graphics (SVG) enable creating three shapes: a circle, and two text elements:

    ```typescript
    constructor(options: VisualConstructorOptions) {
        this.svg = d3.select(options.element)
            .append('svg')
            .classed('circleCard', true);
        this.container = this.svg.append("g")
            .classed('container', true);
        this.circle = this.container.append("circle")
            .classed('circle', true);
        this.textValue = this.container.append("text")
            .classed("textValue", true);
        this.textLabel = this.container.append("text")
            .classed("textLabel", true);
    }
    ```

7. Define the width and height in the update method. This method is called every time there's a change in the data or host environment, such as a new value or resizing.

   ```typescript
   public update(options: VisualUpdateOptions) {
       let width: number = options.viewport.width;
       let height: number = options.viewport.height;
       this.svg.attr("width", width);
       this.svg.attr("height", height);
       let radius: number = Math.min(width, height) / 2.2;
       this.circle
           .style("fill", "white")
           .style("fill-opacity", 0.5)
           .style("stroke", "black")
           .style("stroke-width", 2)
           .attr("r", radius)
           .attr("cx", width / 2)
           .attr("cy", height / 2);
       let fontSizeValue: number = Math.min(width, height) / 5;
       this.textValue
           .text("Value")
           .attr("x", "50%")
           .attr("y", "50%")
           .attr("dy", "0.35em")
           .attr("text-anchor", "middle")
           .style("font-size", fontSizeValue + "px");
       let fontSizeLabel: number = fontSizeValue / 4;
       this.textLabel
           .text("Label")
           .attr("x", "50%")
           .attr("y", height / 2)
           .attr("dy", fontSizeValue / 1.2)
           .attr("text-anchor", "middle")
           .style("font-size", fontSizeLabel + "px");
   }
   ```

8. Save the **visual.ts** file.

### (Optional) Review the code in the visuals file

Verify that the final code in the *visual.ts* file looks like this:

```typescript
/*
*  Power BI Visual CLI
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
"use strict";

import "./../style/visual.less";
import powerbi from "powerbi-visuals-api";
import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;
import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
import IVisual = powerbi.extensibility.visual.IVisual;
import DataView = powerbi.DataView;
import IVisualHost = powerbi.extensibility.IVisualHost;
import * as d3 from "d3";
type Selection<T extends d3.BaseType> = d3.Selection<T, any, any, any>;

export class Visual implements IVisual {
    private host: IVisualHost;
    private svg: Selection<SVGElement>;
    private container: Selection<SVGElement>;
    private circle: Selection<SVGElement>;
    private textValue: Selection<SVGElement>;
    private textLabel: Selection<SVGElement>;
    
    constructor(options: VisualConstructorOptions) {
        this.svg = d3.select(options.element)
            .append('svg')
            .classed('circleCard', true);
        this.container = this.svg.append("g")
            .classed('container', true);
        this.circle = this.container.append("circle")
            .classed('circle', true);
        this.textValue = this.container.append("text")
            .classed("textValue", true);
        this.textLabel = this.container.append("text")
            .classed("textLabel", true);
    }
    
    public update(options: VisualUpdateOptions) {
        let width: number = options.viewport.width;
        let height: number = options.viewport.height;
        this.svg.attr("width", width);
        this.svg.attr("height", height);
        let radius: number = Math.min(width, height) / 2.2;
        this.circle
            .style("fill", "white")
            .style("fill-opacity", 0.5)
            .style("stroke", "black")
            .style("stroke-width", 2)
            .attr("r", radius)
            .attr("cx", width / 2)
            .attr("cy", height / 2);
        let fontSizeValue: number = Math.min(width, height) / 5;
        this.textValue
            .text("Value")
            .attr("x", "50%")
            .attr("y", "50%")
            .attr("dy", "0.35em")
            .attr("text-anchor", "middle")
            .style("font-size", fontSizeValue + "px");
        let fontSizeLabel: number = fontSizeValue / 4;
        this.textLabel
            .text("Label")
            .attr("x", "50%")
            .attr("y", height / 2)
            .attr("dy", fontSizeValue / 1.2)
            .attr("text-anchor", "middle")
            .style("font-size", fontSizeLabel + "px");
    }
}
```

### Modify the capabilities file

The circle card visual is a simple visual that doesn't create any objects in the Format pane. Therefore, you can safely remove the *objects* section of the file.

1. Open your project in VS Code (**File** > **Open Folder**).

2. Select the **capabilities.json** file.

    >[!div class="mx-imgBorder"]
    >![Screenshot of accessing the capabilities.json file in V S code.](media/develop-circle-card/capabilities-file.png)

3. Remove the entire *objects* array.  
   Don't leave any blank lines between *dataRoles* and *dataViewMappings*.

4. Save the **capabilities.json** file.

### Restart the circle card visual

Stop the visual from running and restart it.

1. In the **PowerShell** window where you started the visual, enter <kbd>Ctrl</kbd>+<kbd>C</kbd>. If prompted to terminate the batch job, enter <kbd>Y</kbd> and then <kbd>Enter</kbd>.

2. In **PowerShell**, start the visual again.

    ```powershell
    pbiviz start
    ```

### Test the visual with the added elements

Verify that the visual displays the newly added elements.

1. In Power BI service, open the *Power BI US Sales Analysis* report. If you're using a different report to develop the circle card visual, navigate to that report.

2. Drag a value into the *Measure* box and make sure that the visual is shaped as a circle.

    >[!div class="mx-imgBorder"]
    >![Screenshot of the circle card visual shaped as a circle.](media/develop-circle-card/circle.png)

    If the visual isn't displaying anything, from the **Fields** pane, drag the **Quantity** field into the developer visual.

3. Resize the visual.

    Notice that the circle and text scale to fit the dimensions of the visual. The update method is called when you resize the visual, and as a result the visual elements get rescaled.

### Enable auto reload

Use this setting to ensure that the visual is automatically reloaded each time you save project changes.

1. Navigate to the *Power BI US Sales Analysis* report (or to the project that has your circle card visual).

2. Select the circle card visual.

3. In the floating toolbar, select **Toggle Auto Reload**.

    >[!div class="mx-imgBorder"]
    >![Screenshot of clicking the toggle auto reload option, in the circle card visual floating toolbar.](media/develop-circle-card/toggle-auto-reload.png)

## Get the visual to process data

In this section, you define data roles and data view mappings. You also modify the visual to display the name of the value it's displaying.

### Configure the capabilities file

Modify the **capabilities.json** file to define the data role, objects, and data view mappings.

* **Define the data role**

    Define the *dataRoles* array with a single data role of the type *measure*. This data role is called *measure*, and is displayed as *Measure*. It allows passing either a measure field, or a summed up field.

    1. Open the **capabilities.json** file in VS Code.

    2. Remove all the content inside the *dataRoles* array.

    3. Insert the following code to the *dataRoles* array.

        ```json
        {
            "displayName": "Measure",
            "name": "measure",
            "kind": "Measure"
        }
        ```

    4. Save the **capabilities.json** file.

* **Define the data view mapping**

    Define a field called *measure* in the *dataViewMappings* array. This field can be passed to the data role.

    1. Open the **capabilities.json** file in VS Code.

    2. Remove all the content inside the *dataViewMappings* array.

    3. Insert the following code to the *dataViewMappings* array.

        ```json
        {
            "conditions": [
                { "measure": { "max": 1 } }
            ],
            "single": {
                "role": "measure"
            }
        }
        ```

    4. Save the **capabilities.json** file.

Confirm that your *capabilities.json* file looks like this:

```typescript
{
    "dataRoles": [
        {
            "displayName": "Measure",
            "name": "measure",
            "kind": "Measure"
        }
    ],
    "dataViewMappings": [
        {
            "conditions": [
                { "measure": { "max": 1 } }
            ],
            "single": {
                "role": "measure"
            }
        }
    ],
    "privileges": []
}
```

## Related content

- [Add formatting options to the circle card visual](./custom-visual-develop-tutorial-format-options.md)
- [Power BI visuals project structure](./visual-project-structure.md)
- [Learn how to debug a Power BI visual you created](./visuals-how-to-debug.md)



================================================
FILE: powerbi-docs/developer/visuals/develop-power-bi-visuals.md
================================================
---
title: Develop custom visuals in Power BI
description: This article describes how to package a Power BI visual that you created as a .pbiviz file that you can share.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: overview
ms.date: 06/06/2024
LocalizationGroup: Visualizations
ms.custom: intro-overview
#customer intent: As a Power BI visual developer, I want to learn how to package a Power BI visual that I created as a .pbiviz file so that I can share it with others.
---

# Power BI custom visuals

Power BI comes with [core](power-bi-custom-visuals.md#core-power-bi-visuals) visuals readily available on the visualization pane. You can also [import visuals](power-bi-custom-visuals.md#appsource-power-bi-visuals) from Microsoft [AppSource](https://appsource.microsoft.com/marketplace/apps?page=1&product=power-bi-visuals) or Power BI.

If none of these visuals meet your specific needs, you can [create your own custom Power BI visual](#develop-your-own-custom-power-bi-visual) to be used by you, your organization, or the entire Power BI community.

## Power BI visual packages

Power BI visuals are packaged in `.pbiviz` files that include code for rendering the data served to them. Anyone can create a custom visual and package it as a single `.pbiviz` file that can be imported into a Power BI report.

To import a Power BI visual from a file, see [Import a visual file from your local computer into Power BI](import-visual.md#import-a-visual-file-from-your-local-computer-into-power-bi).

## Develop your own custom Power BI visual

If you're a web developer interested in creating your own visual, you can:

* Learn how to set up the necessary [environment](./environment-setup.md)
* Learn the basic [structure of Power BI visuals](visual-project-structure.md)
* Create a simple circle card visual using this [tutorial](develop-circle-card.md)

To publish the visual you created to AppSource, see [Publish a Power BI visual to AppSource](office-store.md).

## Related content

* [Power BI visuals project structure](visual-project-structure.md)
* [Guidelines for Power BI visuals](guidelines-powerbi-visuals.md)

More questions? [Ask the Power BI Community](https://community.powerbi.com/t5/Custom-Visuals-Development/bd-p/CustomVisualsDevelopmentDiscussion)



================================================
FILE: powerbi-docs/developer/visuals/drill-down-support.md
================================================
---
title: Add drill-down support in Power BI 
description: This article describes how to add drill-down support to Power BI Visuals to make them interactive and reveal more details to users.
author: billmath
ms.author: billmath
manager: kfollis
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 10/12/2024
#customer intent: As a Power BI visual developer, I want to learn how to add drill-down support to my custom visual so that users can reveal more details.
---

# Add drill-down support

When a visual has a hierarchy, you can allow users to use the Power BI drill-down feature to reveal more details.

Read more about the Power BI drill-down feature at [Drill mode in the Power BI service](./../../consumer/end-user-drill.md).
To allows the visual to enable or disable the drill feature dynamically, see [Dynamic drill-down control](./dynamic-drill-down.md).

## Enable drill-down support in the visual

To support drill-down actions in your visual, add a new field to `capabilities.json` named `drill-down`. This field has one property called `roles` that contains the name of the dataRole you want to enable drill-down actions on.

```json
    "drilldown": {
        "roles": [
            "category"
        ]
    }
```

> [!NOTE]
> The drill-down dataRole must be of `Grouping` type.
> `max` property in the dataRole conditions must be set to 1.

Once you add the role to the drill-down field, users can drag multiple fields into the data role.

For example:

```json
{
    "dataRoles": [
        {
            "displayName": "Category",
            "name": "category",
            "kind": "Grouping"
        },
        {
            "displayName": "Value",
            "name": "value",
            "kind": "Measure"
        }
    ],
    "drilldown": {
        "roles": [
            "category"
        ]
    },
    "dataViewMappings": [
        {
            "categorical": {
                "categories": {
                    "for": {
                        "in": "category"
                    }
                },
                "values": {
                    "select": [
                        {
                            "bind": {
                                "to": "value"
                            }
                        }
                    ]
                }
            }
        }
    ]
}
```

### Create a visual with drill-down support

To create a visual with drill-down support, run the following command:

```cmd
pbiviz new testDrillDown -t default
```

To create a default sample visual, apply the above [sample](#enable-drill-down-support-in-the-visual) of `capabilities.json` to the newly created visual.

Create the property for `div` container to hold HTML elements of the visual:

```typescript
"use strict";

import "core-js/stable";
import "./../style/visual.less";
// imports

export class Visual implements IVisual {
    // visual properties
    // ...
    private div: HTMLDivElement; // <== NEW PROPERTY

    constructor(options: VisualConstructorOptions) {
        // constructor body
        // ...
    }

    public update(options: VisualUpdateOptions) {
        // update method body
        // ...
    }

    /**
     * Returns properties pane formatting model content hierarchies, properties and latest formatting values, Then populate properties pane.
     * This method is called once each time we open the properties pane or when the user edits any format property. 
     */
    public getFormattingModel(): powerbi.visuals.FormattingModel {
        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);
    }
}
```

Update the constructor of the visual:

```typescript

export class Visual implements IVisual {
    // visual properties
    // ...
    private div: HTMLDivElement;

    constructor(options: VisualConstructorOptions) {
        console.log('Visual constructor', options);
        this.formattingSettingsService = new FormattingSettingsService();
        this.target = options.element;
        this.updateCount = 0;

        if (document) {
            const new_p: HTMLElement = document.createElement("p");
            new_p.appendChild(document.createTextNode("Update count:"));
            const new_em: HTMLElement = document.createElement("em");
            this.textNode = document.createTextNode(this.updateCount.toString());
            new_em.appendChild(this.textNode);
            new_p.appendChild(new_em);
            this.div = document.createElement("div"); // <== CREATE DIV ELEMENT
            this.target.appendChild(new_p);
        }
    }
}
```

To create `button`s, update the `update` visual's method:

```typescript
export class Visual implements IVisual {
    // ...

    public update(options: VisualUpdateOptions) {
        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);
        console.log('Visual update', options);

        const dataView: DataView = options.dataViews[0];
        const categoricalDataView: DataViewCategorical = dataView.categorical;

        // don't create elements if no data
        if (!options.dataViews[0].categorical ||
            !options.dataViews[0].categorical.categories) {
            return
        }

        // to display current level of hierarchy
        if (typeof this.textNode !== undefined) {
            this.textNode.textContent = categoricalDataView.categories[categoricalDataView.categories.length - 1].source.displayName.toString();
        }

        // remove old elements
        // for better performance use D3js pattern:
        // https://d3js.org/#enter-exit
        while (this.div.firstChild) {
            this.div.removeChild(this.div.firstChild);
        }

        // create buttons for each category value
        categoricalDataView.categories[categoricalDataView.categories.length - 1].values.forEach( (category: powerbi.PrimitiveValue, index: number) => {
            let button = document.createElement("button");
            button.innerText = category.toString();

            this.div.appendChild(button);
        })

    }
    // ...
```

Apply simple styles in `.\style\visual.less`:

```less
button {
    margin: 5px;
    min-width: 50px;
    min-height: 50px;
}
```

Prepare sample data for testing the visual:

|   H1  |   H2    | H3  |   VALUES  |
|-----|-----|------|-------|
|   A   |    A1  |    A11 |    1   |
|   A    |    A1    |    A12    |    2    |
|   A    |    A2    |    A21    |    3    |
|   A    |    A2    |    A22    |    4    |
|   A    |    A3    |    A31    |    5    |
|   A    |    A3    |    A32    |    6    |
|   B    |    B1    |    B11    |    7    |
|   B    |    B1    |    B12    |    8    |
|   B    |    B2    |    B21    |    9    |
|   B    |    B2    |    B22    |    10    |
|   B    |    B3    |    B31    |    11    |
|   B    |    B3    |    B32    |    12    |

And create Hierarchy in Power BI Desktop:

![Screenshot shows the Power B I Desktop with New hierarchy selected in a contextual menu.](media/drill-down-support/create-new-hierarchy.png)

Include all category columns (H1, H2, H3) to the new hierarchy:

![Screenshot shows category columns you can add to the new hierarchy.](media/drill-down-support/new-hierarchy.png)

After those steps you should get following visual:

![Dev visual with buttons](media/drill-down-support/dev-visual-drilldown1.png)

### Add context menu to visual elements

To add a context menu to the buttons on the visual:

![Context menu in the visual](media/drill-down-support/dev-visual-drilldown-context-menu.png)

Save `host` object in the properties of the visual and call `createSelectionManager` method to the create selection manager to display a context menu by using Power BI Visuals API.

```typescript
"use strict";

import "core-js/stable";
import "./../style/visual.less";
// default imports

import IVisualHost = powerbi.extensibility.visual.IVisualHost;
import ISelectionManager = powerbi.extensibility.ISelectionManager;
import ISelectionId = powerbi.visuals.ISelectionId;

export class Visual implements IVisual {
    // visual properties
    // ...
    private div: HTMLDivElement;
    private host: IVisualHost; // <== NEW PROPERTY
    private selectionManager: ISelectionManager; // <== NEW PROPERTY

    constructor(options: VisualConstructorOptions) {
        // constructor body
        // save the host in the visuals properties
        this.host = options.host;
        // create selection manager
        this.selectionManager = this.host.createSelectionManager();
        // ...
    }

    public update(options: VisualUpdateOptions) {
        // update method body
        // ...
    }

    // ...
}
```

Change the body of `forEach` function callback to:

```typescript
    categoricalDataView.categories[categoricalDataView.categories.length - 1].values.forEach( (category: powerbi.PrimitiveValue, index: number) => {
        // create selectionID for each category value
        let selectionID: ISelectionId = this.host.createSelectionIdBuilder()
            .withCategory(categoricalDataView.categories[0], index)
            .createSelectionId();

        let button = document.createElement("button");
        button.innerText = category.toString();

        // add event listener to click event
        button.addEventListener("click", (event) => {
            // call select method in the selection manager
            this.selectionManager.select(selectionID);
        });

        button.addEventListener("contextmenu", (event) => {
            // call showContextMenu method to display context menu on the visual
            this.selectionManager.showContextMenu(selectionID, {
                x: event.clientX,
                y: event.clientY
            });
            event.preventDefault();
        });

        this.div.appendChild(button);
    });
```

Apply data to the visual:

![Screenshot shows the hierarchy with H2 called out.](media/drill-down-support/dev-visual-drilldown-data.png)

In the final step you should get visual with selections and context menu:

![Animation shows selecting Drill down and Drill up from the visual context menu.](media/drill-down-support/dev-visual-drilldown-demo.gif)

### Add drill-down support for matrix data view mapping

To test the visual with matrix data view mappings, first prepare sample data:

|   Row 1   |   Row 2   |   Row 3   |   Column 1   |   Column 2   |   Column 3   |   Values   |
|-----|-----|------|-------|-------|-------|-------|
|   R1   |   R11   |   R111   |   C1   |   C11   |   C111   |   1   |
|   R1   |   R11   |   R112   |   C1   |   C11   |   C112   |   2   |
|   R1   |   R11   |   R113   |   C1   |   C11   |   C113   |   3   |
|   R1   |   R12   |   R121   |   C1   |   C12   |   C121   |   4   |
|   R1   |   R12   |   R122   |   C1   |   C12   |   C122   |   5   |
|   R1   |   R12   |   R123   |   C1   |   C12   |   C123   |   6   |
|   R1   |   R13   |   R131   |   C1   |   C13   |   C131   |   7   |
|   R1   |   R13   |   R132   |   C1   |   C13   |   C132   |   8   |
|   R1   |   R13   |   R133   |   C1   |   C13   |   C133   |   9   |
|   R2   |   R21   |   R211   |   C2   |   C21   |   C211   |   10   |
|   R2   |   R21   |   R212   |   C2   |   C21   |   C212   |   11   |
|   R2   |   R21   |   R213   |   C2   |   C21   |   C213   |   12   |
|   R2   |   R22   |   R221   |   C2   |   C22   |   C221   |   13   |
|   R2   |   R22   |   R222   |   C2   |   C22   |   C222   |   14   |
|   R2   |   R22   |   R223   |   C2   |   C22   |   C223   |   16   |
|   R2   |   R23   |   R231   |   C2   |   C23   |   C231   |   17   |
|   R2   |   R23   |   R232   |   C2   |   C23   |   C232   |   18   |
|   R2   |   R23   |   R233   |   C2   |   C23   |   C233   |   19   |

Then apply the following data view mapping to the visual:

```json
{
    "dataRoles": [
        {
            "displayName": "Columns",
            "name": "columns",
            "kind": "Grouping"
        },
        {
            "displayName": "Rows",
            "name": "rows",
            "kind": "Grouping"
        },
        {
            "displayName": "Value",
            "name": "value",
            "kind": "Measure"
        }
    ],
    "drilldown": {
        "roles": [
            "columns",
            "rows"
        ]
    },
    "dataViewMappings": [
        {
            "matrix": {
                "columns": {
                    "for": {
                        "in": "columns"
                    }
                },
                "rows": {
                    "for": {
                        "in": "rows"
                    }
                },
                "values": {
                    "for": {
                        "in": "value"
                    }
                }
            }
        }
    ]
}
```

Apply data to the visual:

![Screenshot shows the MatrixHierarchy with the columns and rows hierarchy and their members selected.](media/drill-down-support/dev-matrix-visual-drilldown-data.png)

Import required interfaces to process matrix data view mappings:

```typescript
// ...
import DataViewMatrix = powerbi.DataViewMatrix;
import DataViewMatrixNode = powerbi.DataViewMatrixNode;
import DataViewHierarchyLevel = powerbi.DataViewHierarchyLevel;
// ...
```

Create two properties for two `div`s of rows and columns elements:

```typescript
export class Visual implements IVisual {
    // ...
    private rowsDiv: HTMLDivElement;
    private colsDiv: HTMLDivElement;
    // ...
    constructor(options: VisualConstructorOptions) {
        // constructor body
        // ...
        // Create div elements and append to main div of the visual
        this.rowsDiv = document.createElement("div");
        this.target.appendChild(this.rowsDiv);

        this.colsDiv = document.createElement("div");
        this.target.appendChild(this.colsDiv);
    }
    // ...
}
```

Check the data before rendering elements and display the current level of hierarchy:

```typescript
export class Visual implements IVisual {
    // ...
    constructor(options: VisualConstructorOptions) {
        // constructor body
    }

    public update(options: VisualUpdateOptions) {
        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);
        console.log('Visual update', options);

        const dataView: DataView = options.dataViews[0];
        const matrixDataView: DataViewMatrix = dataView.matrix;

        // if the visual doesn't receive the data no reason to continue rendering
        if (!matrixDataView ||
            !matrixDataView.columns ||
            !matrixDataView.rows ) {
            return
        }

        // to display current level of hierarchy
        if (typeof this.textNode !== undefined) {
            this.textNode.textContent = categoricalDataView.categories[categoricalDataView.categories.length - 1].source.displayName.toString();
        }
        // ...
    }
    // ...
}
```

Create function `treeWalker` for traverse the hierarchy:

```typescript
export class Visual implements IVisual {
    // ...
    public update(options: VisualUpdateOptions) {
        // ...

        // if the visual doesn't receive the data no reason to continue rendering
        if (!matrixDataView ||
            !matrixDataView.columns ||
            !matrixDataView.rows ) {
            return
        }

        const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {
            // ...
            if (matrixNode.children) {
                // ...
                // traversing child nodes
                matrixNode.children.forEach((node, index) => treeWalker(node, index, levels, childDiv));
            }
        }

        // traversing rows
        const rowRoot: DataViewMatrixNode = matrixDataView.rows.root;
        rowRoot.children.forEach((node, index) => treeWalker(node, index, matrixDataView.rows.levels, this.rowsDiv));

        // traversing columns
        const colRoot = matrixDataView.columns.root;
        colRoot.children.forEach((node, index) => treeWalker(node, index, matrixDataView.columns.levels, this.colsDiv));
    }
    // ...
}
```

Generate the selections for datapoints.

```typescript
const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {
    // generate selectionID for each node of matrix
    const selectionID: ISelectionID = this.host.createSelectionIdBuilder()
        .withMatrixNode(matrixNode, levels)
        .createSelectionId();
    // ...
    if (matrixNode.children) {
        // ...
        // traversing child nodes
        matrixNode.children.forEach((node, index) => treeWalker(node, index, levels, childDiv));
    }
}
```

Create `div` for each level of hierarchy:

```typescript
const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {
    // generate selectionID for each node of matrix
    const selectionID: ISelectionID = this.host.createSelectionIdBuilder()
        .withMatrixNode(matrixNode, levels)
        .createSelectionId();
    // ...
    if (matrixNode.children) {
        // create div element for level
        const childDiv = document.createElement("div");
        // add to current div
        div.appendChild(childDiv);
        // create paragraph element to display next
        const p = document.createElement("p");
        // display level name on paragraph element
        const level = levels[matrixNode.level];
        p.innerText = level.sources[level.sources.length - 1].displayName;
        // add paragraph element to created child div
        childDiv.appendChild(p);
        // traversing child nodes
        matrixNode.children.forEach((node, index) => treeWalker(node, index, levels, childDiv));
    }
}
```

Create `buttons` to interact with visual and display context menu for matrix datapoints:

```typescript
const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {
    // generate selectionID for each node of matrix
    const selectionID: ISelectionID = this.host.createSelectionIdBuilder()
        .withMatrixNode(matrixNode, levels)
        .createSelectionId();

    // create button element
    let button = document.createElement("button");
    // display node value/name of the button's text
    button.innerText = matrixNode.value.toString();

    // add event listener on click
    button.addEventListener("click", (event) => {
        // call select method in the selection manager
        this.selectionManager.select(selectionID);
    });

    // display context menu on click
    button.addEventListener("contextmenu", (event) => {
        // call showContextMenu method to display context menu on the visual
        this.selectionManager.showContextMenu(selectionID, {
            x: event.clientX,
            y: event.clientY
        });
        event.preventDefault();
    });

    div.appendChild(button);

    if (matrixNode.children) {
        // ...
    }
}
```

Clear `div` elements before render elements again:

```typescript
public update(options: VisualUpdateOptions) {
    // ...
    const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {
        // ...
    }

    // remove old elements
    // to better performance use D3js pattern:
    // https://d3js.org/#enter-exit
    while (this.rowsDiv.firstChild) {
        this.rowsDiv.removeChild(this.rowsDiv.firstChild);
    }
    // create label for row elements
    const prow = document.createElement("p");
    prow.innerText = "Rows";
    this.rowsDiv.appendChild(prow);

    while (this.colsDiv.firstChild) {
        this.colsDiv.removeChild(this.colsDiv.firstChild);
    }
    // create label for columns elements
    const pcol = document.createElement("p");
    pcol.innerText = "Columns";
    this.colsDiv.appendChild(pcol);

    // render elements for rows
    const rowRoot: DataViewMatrixNode = matrixDataView.rows.root;
    rowRoot.children.forEach((node, index) => treeWalker(node, index, matrixDataView.rows.levels, this.rowsDiv));

    // render elements for columns
    const colRoot = matrixDataView.columns.root;
    colRoot.children.forEach((node, index) => treeWalker(node, index, matrixDataView.columns.levels, this.colsDiv));
}
```

Finally, you should get a visual with context menu:

![Animation shows a context menu for the visual with options to drill down or drill up.](media\drill-down-support\dev-visual-drilldown-demo.gif)

## Related content

* [How to use the drill down support API](./drilldown-api.md)
* [Dynamic drill-down control](./dynamic-drill-down.md)



================================================
FILE: powerbi-docs/developer/visuals/drilldown-api.md
================================================
---
title: The Drilldown API in Power BI visuals
description: Learn how to create a Power BI custom visual that can drill down into the data so you can explore your data in depth in Power BI embedded analytics.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 01/19/2024
#customer intent: As a Power BI visual developer, I want to learn how to create a Power BI custom visual that can drill down into the data so I can explore my data in depth in Power BI embedded analytics.
---

# Drilldown API

The **Drilldown API** allows you to create a visual that can trigger a drilldown operation on its own, without user interaction.  

The API enables the visual to show next level, expand to next level, or drill up based on the parameters passed to the API. For more information about drilling down, see [Drill down support](drill-down-support.md).

## How to use the drilldown API

> [!NOTE]
> The **Drilldown API** is available from API version 4.7.0 To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

Add the following to the *capabilities.json* file:

```json
    "drilldown": {
        "roles": ["Rows", "Columns"]
    }
```

### Example: Drilldown API

The following example shows how the visual call a drilldown operation.

```typescript
public update(options: VisualUpdateOptions) {
        if ((options.dataViews[0].metadata.dataRoles.drillableRoles['Columns']).indexOf(powerbi.DrillType.Down) >= 0) {
            let args: powerbi.DrillDownArgs = {
                roleName: "Columns",
                drillType: powerbi.DrillType.Down
            };
            this.host.drill(args);
        }
```



================================================
FILE: powerbi-docs/developer/visuals/dynamic-drill-down.md
================================================
---
title: The dynamic drill-down API in Power BI visuals
description: This article explains how to create a Power BI custom visual that allows the user to enable or disable drill-down support.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/06/2024
#customer intent: As a Power BI visual developer, I want to learn how to create a Power BI custom visual that allows the user to enable or disable drill-down support so that I can provide a more interactive experience.
---

# Dynamic drill control

>[!NOTE]
> This feature is available from API version 5.7.0.

The dynamic drill control feature allows the visual to enable or disable the [drill feature](./drill-down-support.md) dynamically using an [API call](#dynamic-drill-control-requirements). When the drill feature is enabled, all drilldown functionalities and [expand/collapse features](./dataview-mappings.md#expand-and-collapse-row-headers) are available, including API calls, context menu commands, header drill buttons, and support for hierarchy data. When disabled, these functionalities aren't available.

The following images show an example of a visual with the dynamic drill control feature enabled and disabled:

### [Drill enabled](#tab/drill-enabled)

:::image type="content" source="media/dynamic-drill-down/drill-enabled.png" alt-text="Screenshot of a visual with drilldown disabled displaying each continent with all the countries/regions in that continent displayed under it.":::

### [Drill disabled](#tab/drill-disabled)

:::image type="content" source="media/dynamic-drill-down/drill-disabled.png" alt-text="Screenshot of a visual with drilldown enabled showing the population of each continent with Ocenana expanded to show Australia and New Zealand.":::

---

The dynamic drill control feature includes the following API elements:

* The `isDrillDisabled` flag in the `DataRolesInfo`:

  ```typescript
   export interface DataRolesInfo {
        //…
        isDrillDisabled?: boolean; // ----- NEW -----
    }
  ```  

* The `setCanDrill` method in the `IVisualHost` interface:

  ```typescript
    export interface IVisualHost extends extensibility.IVisualHost {
        //…
        setCanDrill: (drillAllowed: boolean) => void; // ----- NEW -----
    }
  ```

To identify whether the drill is disabled, use the `isDrillDisabled` property in the update method:

```typescript
    private update(options: VisualUpdateOptions) {
      //…
      const isDrillDisabled = options.dataViews[0].metadata.dataRoles.isDrillDisabled;
      //…
    }
```

Then use the API call to enable or disable the drill as needed:

* To enable:
  `this.host.setCanDrill(true /* drillAllowed */);`

* To disable:
  `this.host.setCanDrill(false /* drillAllowed */);`

## Dynamic drill control requirements

[Drilling](./drill-down-support.md) is enabled by default, but the dynamic drill control feature allows the visual to enable or disable drilling using an API call.

A visual with the dynamic drill control feature, has the following code in the *capabilities.json* file:

* With drill disabled by default:

  ```json
      "drilldown": {
          "roles": [
              "Rows",
              "Columns"
          ],
          "canDisableDrill": { 
              "disabledByDefault": true
          }
      },
  ```

* With drill enabled by default:

  ```json
      "drilldown": {
          "roles": [
              "Rows",
              "Columns"
          ],
          "canDisableDrill": {}
      },
  ```

The `canDisableDrill` property indicates that the visual supports this feature. Without this property, the API call isn't respected.  
The `disabledByDefault` property indicates whether or not to disable the drill feature by default.

> [!NOTE]
> The `disabledByDefault` property takes effect when you do one of the following actions:
>
> * Add a new visual to the canvas
> * Convert a visual from one that doesn't support this feature.
>
> For example, if you convert a *sourceVisual* to *targetVisual*, the *targetVisual*'s `disabledByDefault` property is considered only if the *sourceVisual* doesn't support this feature. If *sourceVisual* does support this feature, the *targetVisual* keeps the *sourceVisual*'s state and not the default.

## Adding drill-down support to a new version of an existing visual

Using the drilldown feature represents a breaking change. Therefore, for the smoothest transition, we recommend that you use **a new visual GUID** for the new version.

If, however, you want to keep the same GUID, keep in mind the following points:

* When you migrate from a nondrillable version to a new drillable version, some data might not be provided in the `dataView` due to the hierarchical data support introduced as part of the drill feature. The dynamic drill control feature doesn't offer automatic support for this issue but can be used to manage the migration process.

* For self-migration of the visual, the visual should take the following actions:

  * Identify the first time the new version is loaded instead of the older version, and apply the `persistProperties` API.

  * Disable the drill to receive all the data, using the `setCanDrill` API.

The following example shows how to self-migrate an older visual to one that uses dynamic drill control:

1. Add the following object to the capabilities.json file:

    ```json
    "DrillMigration": {
      "displayName": "Drill Migration",
      "properties": {
          "isMigrated": {
              "displayName": "Is Drill Migrated",
              "type": {
                  "bool": true
              }
          }
      }
    },
    ```

1. Add the following to the *visual.ts* file:

   ```typescript
   export class Visual implements IVisual {
       //...
         private isCalledToDisableDrillInMigrationScenario = false;
         private drillMigration = { disabledByDefault: true };
         constructor(options: VisualConstructorOptions) {
          //...
          this.host = options.host;
          //...
         }
         private update(options: VisualUpdateOptions) {
            this.handleSelfDrillMigration(options);
             //...
         }
         private handleSelfDrillMigration(options: VisualUpdateOptions): void {
             if (options && options.dataViews && options.dataViews[0] && options.dataViews[0].metadata) {
                 const metadata = options.dataViews[0].metadata;
                 if (metadata && metadata.dataRoles) {
                     const isDrillDisabled = metadata.dataRoles.isDrillDisabled;
                     if (isDrillDisabled === undefined) {
                         return;
                     }
                     // Continue in case the visual is already migrated
                     if (!metadata.objects?.DrillMigration?.isMigrated) {
                         // Persist the isMigrated property when the drill has the correct state
                         if (this.drillMigration.disabledByDefault === isDrillDisabled) {
                             this.persistMigrationProperty();
                         } else if (!this.isCalledToDisableDrillInMigrationScenario) {
                             // Use the API call only once
                             this.host.setCanDrill(!this.drillMigration.disabledByDefault);
                             this.isCalledToDisableDrillInMigrationScenario = true;
                         }
                     }
                 }
             }
         }
         private persistMigrationProperty(): void {
             let property = {
                 merge: [{
                     objectName: "DrillMigration",
                     properties: {
                         isMigrated: true
                     },
                     selector: null
                 }]
             };
             this.host.persistProperties(property);
         }
     }
   ```

The first time the visual is opened after adding this code, the DrillMigration variable is set to true and the visual opens in the default state.

## Considerations and limitations

* The drill state isn't saved after disabling the drill. If you reenable the drill after disabling it, only the first level is displayed regardless of what was displayed before it was disabled.

* The expand/collapse state isn't saved after disabling the drill. All the rows are collapsed once the drill is reenabled.

* The API call isn't supported for dashboards.

* Data view mapping conditions: Use `"max": 1` for all conditions for the drillable role to limit the visual to showing only one field when drill is disabled. For example:
  * For categorical data view:

     ```json
     "conditions": [
         { "category": { "min": 1 }, "measure": { "max": 1 }}
     ]
     ```

  * For matrix data view:

     ```json
     "conditions": [
        { "Rows": { "max": 0 }, "Columns": { "max": 0 }, "Value": { "min": 1 } },
        { "Rows": { "min": 1 }, "Columns": { "min": 0 }, "Value": { "min": 0 } },
        { "Rows": { "min": 0 }, "Columns": { "min": 1 }, "Value": { "min": 0 } },
     ]
     ```


================================================
FILE: powerbi-docs/developer/visuals/dynamic-format.md
================================================
---
title: Power BI custom visual dynamic format API.
description: This article describes the API used to allow a Power BI custom visual process value with dynamic format strings.
author: billmath
ms.author: billmath
ms.reviewer: ''
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 05/12/2024
#customer intent: As a Power BI visual developer, I want to learn how to use dynamic format strings in my custom visual so that I can process values with dynamic formatting.
---

# Power BI custom visual dynamic format API

From API version 4.2, developers can create reports with [dynamic string formats](../../create-reports/desktop-dynamic-format-strings.md) support.

## Enable the dynamic format support for visual

To allow the visual to operate with dynamic format strings, the following fields should be added in the `capabilitites.json`:

```json
"objects": {
    "general": {
        "properties": {
            "formatString": {
                "type": {
                    "formatting": {
                        "formatString": true
                    }
                }
            }
        }
    },
}
```

## How to use the dynamic string format

When dynamic string format is enabled, the custom visual receives format strings through the `update()` options as shown in the screenshot. 

:::image type="content" source="media/dynamic-format/dynamic-format-strings-example.png" alt-text="Screenshot of update options content with dynamic format strings.":::

There are two arrays inside of `options.dataViews[0].categorical.values[0]`:
1. `values` - values from the dataset
2. `objects` - objects with `general.formatString` property

Each `object` corresponds to a `value`. As an example value `12519995905.9842` from the screenshot has the format `¥ #,0`.
To apply this format to the value, you can use the [format method](./utils-formatting.md#format) from [powerbi-visuals-utils-formattingutils](./utils-formatting.md).



================================================
FILE: powerbi-docs/developer/visuals/enable-sync-slicers.md
================================================
---
title: Enable the Sync Slicers feature in Power BI visuals
description: This article describes how to add the Sync Slicers feature to Power BI visuals so you can filter information across multiple pages in a Power BI report.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/2/2023
ms.custom: engagement-fy23
#customer intent: As a Power BI visual developer, I want to learn how to enable the Sync Slicers feature in my custom visual so that I can filter information across multiple pages in a Power BI report.
---

# Sync slicers across pages in Power BI reports

[Slicers](../../visuals/power-bi-visualization-slicers.md) are a useful way to filter information and focus on a specific portion of the semantic model. They allow you to select exactly which values to display in your Power BI visual.

Sometimes you might want to use a slicer on only one specific page of the report. Other times, you might want to apply the slicer to several pages. By using the *sync slicers* feature, a slicer selection on any page will affect visualizations on all selected pages.

For information about sync slicers and how they work, see [Sync and use slicers on other pages](../../visuals/power-bi-visualization-slicers.md#sync-and-use-slicers-on-other-pages).

## How to enable the sync slicer feature

In the [*capabilities.json* file](./visual-project-structure.md#capabilitiesjson), set `"supportsSynchronizingFilterState": true`, as shown in the following example:

```json
{
    ...
    "supportsHighlight": true,
    "suppressDefaultTitle": true,
    "supportsSynchronizingFilterState": true,
    "sorting": {
        "default": {}
    }
}
```

After you've updated the *capabilities.json* file, you can view the **Sync slicers** pane when you select your custom slicer visual.

:::image type="content" source="media/enable-sync-slicers/sync-slicers-panel.png" alt-text="Screenshot of Power BI Desktop, which shows the View Sync slicers pane.":::

From the **Sync slicers** pane, you can select which report pages the slicer visibility and filtration should apply to.

For more information on how to sync slicers, see [Sync and use slicers on other pages](../../visuals/power-bi-visualization-slicers.md#sync-and-use-slicers-on-other-pages).

>[!NOTE]
>A report using the sync slicers feature must use API version 1.13.0 or later.

## Considerations and limitations

The sync slicers feature only supports one field at a time. If your slicer has more than one field (**Category** or **Measure**), the sync slicers feature is disabled.

## Related content

[Add a context menu to your Power BI visual](context-menu.md)



================================================
FILE: powerbi-docs/developer/visuals/entra-id-authentication.md
================================================
---
title: Microsoft Entra ID application setup
description: This article describes how to set up authentication for third party ISVs in Microsoft Entra for single sign-in users.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 07/11/2024

#customer intent: As a Power BI visual developer, I want to learn how to set up authentication for third party ISVs in Microsoft Entra for single sign-in users.
---

# Microsoft Entra ID application setup

To use the Authentication API, the ISV must first register an application in Microsoft Entra ID for each cloud to be supported, and preauthorize the Power BI applications with a dedicated scope for each visual. The tenant administrator then needs to grant consent. This article outlines all of these essential steps.

The Authentication API is supported in the following clouds:

* **COM** **(Required)** - Commercial Cloud
* **CN** - China Cloud
* **GCC** - US Government Community Cloud
* **GCCHIGH** - US Government Community Cloud High
* **DOD** - US Department of Defense Cloud

## Register the app in Microsoft Entra ID

For each cloud the visual is intended to support, follow these steps:

1. Navigate to the respective Azure portal and go to **App registrations**.

    * [**COM (required)** and **GCC**](https://portal.azure.com/)
    * [**CN**](https://portal.azure.cn/)
    * [**GCCHIGH** and **DOD**](https://portal.azure.us/)

1. Select **+ New Registration**

   :::image type="content" source="./media/entra-id-authentication/new-registration.png" alt-text="Screenshot of Microsoft Entra app new registration UI.":::

1. On the **Register an application** page, do the following:
   1. Enter your desired application name in the **Name** section.
   1. Select *Accounts in any organizational directory (Any Microsoft Entra ID tenant - Multitenant)* in the **Supported account types** section.
   1. Select **Register**.

   :::image type="content" source="./media/entra-id-authentication/register-app.png" alt-text="Screenshot of the Register an app page of the Microsoft Entra ID registration app.":::

1. Once your application is successfully registered, select **Expose an API** on the left side menu.

    :::image type="content" source="./media/entra-id-authentication/expose-api.png" alt-text="Screenshot of the Expose an API page of the Microsoft Entra ID registration app.":::

1. In the **Application ID URI** field, select *Add*.

    :::image type="content" source="./media/entra-id-authentication/add-app-id-uri.png" alt-text="Screenshot of the Expose an API page with the option to add an application ID URI.":::

1. In the **Edit Application ID URI** field, enter your [Verified Custom Domain](/entra/identity/users/domains-manage), ensuring that it begins with **"https://"** and doesn't contain **"onmicrosoft.com"**, and select **Save**.

   To add a custom domain:

   1. Navigate to Microsoft Entra ID Custom domain names.
   1. Add your custom domain.

    :::image type="content" source="./media/entra-id-authentication/edit-app-id-uri.png" alt-text="Screenshot of the Expose an API page with the Edit application ID URI page open." lightbox="./media/entra-id-authentication/edit-app-id-uri.png":::

    > [!NOTE]
    > The application URI can be manually added to the application manifest under the **“identifierUris”** array.
    >
    > :::image type="content" source="./media/entra-id-authentication/application-uri.png" alt-text="Screenshot showing an example of code for adding an application URI.":::

1. Select **+ Add a scope**.

1. In the **Scope name** field, enter *<visual_guid>_CV_ForPBI* and add the required information. Fill in the *Admin consent* fields. Then select **Add scope** button. (There's a 40 characters scope length limitation, but you can  manually modify the scope name in the registered application manifest to manage this limitation).

    :::image type="content" source="./media/entra-id-authentication/edit-scope.png" alt-text="Screenshot of the edit a scope window with fields for scope name and other information." lightbox="./media/entra-id-authentication/edit-scope.png":::

1. To preauthorize Power BI applications:

   1. Select **+ Add a client application**.

      :::image type="content" source="./media/entra-id-authentication/add-client.png" alt-text="Screenshot of the edit a scope window with fields for adding a client application." lightbox="./media/entra-id-authentication/add-client.png":::

   1. Enter the **Power BI WFE** application appId in the **Client ID** field of the right-hand window.

         * **COM (required)** and **CN**: "871c010f-5e61-4fb1-83ac-98610a7e9110".
         * **GCC**, **GCCHIGH**, and **DOD**: “ec04d7d8-0476-4acd-bce4-81f438363d37".

   1. Select your desired scope.
   1. Select **Add application**.

      :::image type="content" source="./media/entra-id-authentication/preauthorization.png" alt-text="Screenshot showing the UI to add a client application." lightbox="./media/entra-id-authentication/preauthorization.png":::

   1. Repeat this process with:

      * **Power BI Desktop**:

         * **COM (required)** and **CN**: "7f67af8a-fedc-4b08-8b4e-37c4d127b6cf".
         * **GCC**, **GCCHIGH**, and **DOD**: “6807062e-abc9-480a-ae93-9f7deee6b470".

      * **Power BI Mobile**:

          * **COM (required)** and **CN**: "c0d2a505-13b8-4ae0-aa9e-cddd5eab0b12".
          * **GCC**, **GCCHIGH** and **DOD**: “ce76e270-35f5-4bea-94ff-eab975103dc6".

## ISV consent

The tenant administrator can determine whether or not users are allowed to consent for themselves. This consent process takes place outside of Power BI.

ISV backend application (for example, `https://contoso.com`) should be consented to Graph API and other dependencies (by users or tenant administrators) according to standard AAD rules:

If the ISV application is running on a different tenant than the visual consumer's tenant, grant consent for the ISV's application in one of the following ways:

* Administrator preconsent:

  Follow the instructions in [Grant tenant-wide admin consent to an application](/entra/identity/enterprise-apps/grant-admin-consent). Replace the **tenant-wide admin consent URL** with the respective link for each cloud:

  * **COM** and **GCC**: `https://login.microsoftonline.com/{organization}/adminconsent?client_id={clientId}`
  * **CN**: `https://login.partner.microsoftonline.cn/{organization}/adminconsent?client_id={clientId}`
  * **GCCHIGH** and **DOD**: `https://login.microsoftonline.us/{organization}/adminconsent?client_id={clientId}`

* Interactive consent:

  If the tenant administrator didn't preconsent, any user that uses a visual that triggers the API receives a one-time consent prompt when rendering the visual. See [Application consent experience](/entra/identity-platform/application-consent-experience) for more information.

## Related content

* [Authentication API](./authentication-api.md)



================================================
FILE: powerbi-docs/developer/visuals/environment-setup.md
================================================
---
title: Setting up an environment for developing a Power BI visual
description: This article explains how to set up your environment so you have all the tools necessary for developing a Power BI visual.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 11/20/2024
ms.custom: engagement-fy23
#customer intent: As a Power BI visual developer, I want to learn how to set up my environment so that I can develop a Power BI visual.
---

# Set up your environment for developing a Power BI visual

This article teaches you how to set up your environment for developing a Power BI visual.

Before you start development, you need to install **node.js** and the **pbiviz** package. Then, when your local environment is set up, you need to configure Power BI service for developing a Power BI visual.

In this article, you learn how to:
> [!div class="checklist"]
>
> * [Install *node.js*](#install-nodejs).
> * [Install *pbiviz*](#install-pbiviz).
> * [Enable Power BI developer mode](#enable-developer-mode).

## Prerequisites

Before you start developing your Power BI visual, verify that you have everything listed in this section.

* A **Power BI Pro** or **Premium Per User (PPU)** account. If you don't have one, [sign up for a free trial](https://powerbi.microsoft.com/pricing/).
* An integrated development environment (IDE) for developing JavaScript and TypeScript applications. [Visual Studio Code (VS Code)](https://www.visualstudio.com/) is ideal for developing visuals.
* [Windows PowerShell](/powershell/scripting/install/installing-windows-powershell) version 4 or later (for Windows). Or [Terminal](https://support.apple.com/guide/terminal/welcome/mac) (for Mac).

## Install node.js

*Node.js* is a JavaScript runtime built on Chrome's V8 JavaScript engine. It allows developers to run any apps created on JavaScript.

To install *node.js*:

1. Navigate to [node.js](https://nodejs.org), from your web browser.

2. Download the latest recommended MSI installer.

3. Run the installer, and then follow the installation steps. Accept the terms of the license agreement and all defaults.

4. Restart your computer.

## Install pbiviz

The *pbiviz* tool, which is written using JavaScript, compiles the visual source code of the *pbiviz* package.

The *pbiviz* package is a zipped Power BI visual project, with all the needed scripts and assets.

To install the latest version of *pbiviz*, open Windows PowerShell and enter the following command.

  ```powershell
  npm i -g powerbi-visuals-tools@latest
  ```

>[!NOTE]
>You might get some warnings when you run this command. They should not prevent *pbiviz* from installing.

## (Optional) Verify that your environment is set up

Confirm that the Power BI visuals tools package is installed. In PowerShell, run the command `pbiviz` and review the output, including the list of supported commands.

>[!div class="mx-imgBorder"]
>![Screenshot of the output of executing the command p b i viz in PowerShell.](media/environment-setup/pbiviz-verify.png)

## Enable developer mode

To develop or upload your own Power BI visual in the Desktop or on the web, developer mode must be enabled.

### [How to enable developer mode in Power BI Desktop](#tab/desktop)

To develop a Power BI visual in the Desktop, enable the *Develop a visual* setting. This setting only stays enabled for the current session. You must enable this setting in each session where you import a visual from a file.

1. From the Power BI desktop, navigate to **File** > **Options and settings**  > **Options**
   :::image type="content" source="./media/environment-setup/desktop-options.png" alt-text="Screenshot of Options menu in the Power BI desktop.":::
1. Select **Report settings** in the **Current file** section, and enable the *Develop a visual* check box.
   :::image type="content" source="./media/environment-setup/desktop-developer-mode.png" alt-text="Screenshot of Developer mode enabled in Power BI desktop.":::
1. Select **OK**

### [How to enable developer mode in the web service](#tab/service)

To develop a Power BI visual in the Power BI service, enable custom visual *developer mode*. This setting stays enabled until you disable it.

1. Go to [Power BI developer settings](https://app.powerbi.com/user/user-settings/developer-settings?experience=power-bi).

1. Enable the **Power BI Developer mode** switch.

   :::image type="content" source="media/environment-setup/developer-settings.png" alt-text="Screenshot of the enable developer mode, in the Power BI settings, Developer settings tab.":::

---

## Related content

* [Learn about the Power BI visual project structure](./visual-project-structure.md)
* [Create a Power BI circle card visual](develop-circle-card.md)
* [Create an R-powered Power BI visual](create-r-based-power-bi-desktop.md)



================================================
FILE: powerbi-docs/developer/visuals/event-service.md
================================================
---
title: Render events in Power BI visuals
description: Learn about the API needed so that Power BI visuals can notify Power BI that they're ready for export to PowerPoint or PDF.
author: billmath
ms.author: billmath
ms.reviewer: 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 4/30/2024
#customer intent: As a Power BI visual developer, I want to learn how to use the rendering events API so that I can notify Power BI that my visual is ready for export to PowerPoint or PDF.
---

# "Rendering" events in Power BI visuals

In order to get a [visual certified](power-bi-custom-visuals-certified.md), it must include **rendering events**.
These events let listeners (primarily, *export to PDF* and *export to PowerPoint*) know when the visual is being rendered and when it's ready for export.

>[!IMPORTANT]
>Any visual that exports data (for example, to a PowerPoint or *.pdf* file) must contain rendering events to ensure that the export doesn't begin before the visual finished rendering.

The **rendering events API** consists of three methods that should be called during rendering:

* `renderingStarted`: The Power BI visual code calls the `renderingStarted` method to indicate that the rendering process started. **This method should always be the first line of the *update* method** since that is where the rendering process begins.

* `renderingFinished`: When rendering is completed successfully, the Power BI visual code calls the `renderingFinished` method to notify the listeners that the visual's image is ready for export. This method should be the **last line of code executed** when the visual updates. It's usually, but not always, the last line of the update method.

* `renderingFailed`: If a problem occurs during the rendering process, the Power BI visual doesn't render successfully. To notify the listeners that the rendering process wasn't completed, the Power BI visual code should call the `renderingFailed` method. This method also provides an optional string to provide a reason for the failure.

> [!NOTE]
> *Rendering events* are a requirement for visuals certification. Without them your visual won't be approved by the Partner Center for publication. For more information, see [certification requirements](power-bi-custom-visuals-certified.md#certification-requirements).

## How to use the rendering events API

To call the rendering methods, you have to first import them from the *IVisualEventService*.

1. In your `visual.ts` file, include the line:

    ```typescript
    import IVisualEventService = powerbi.extensibility.IVisualEventService;
    ```

2. In the `IVisual` class include the line:

    ```typescript
    private events: IVisualEventService;
    ```

3. In the `constructor` method of the `IVisual` class

    ```typescript
    this.events = options.host.eventService;
    ```

You can now call the methods
`this.events.renderingStarted(options);`,
`this.events.renderingFinished(options);`, and
`this.events.renderingFailed(options);` where appropriate in your *update* method.

## Example 1: Visual without animations

Here's an example of a simple visual that uses the *render events* API.

```typescript
    export class Visual implements IVisual {
        ...
        private events: IVisualEventService;
        ...

        constructor(options: VisualConstructorOptions) {
            ...
            this.events = options.host.eventService;
            ...
        }

        public update(options: VisualUpdateOptions) {
            this.events.renderingStarted(options);
            ...
            this.events.renderingFinished(options);
        }
```

## Example 2: Visual with animations

If the visual has animations or asynchronous functions for rendering, the `renderingFinished` method should be called after the animation or inside async function, even if it's not the last line of the *update* method.

```typescript
    export class Visual implements IVisual {
        ...
        private events: IVisualEventService;
        private element: HTMLElement;
        ...

        constructor(options: VisualConstructorOptions) {
            ...
            this.events = options.host.eventService;
            this.element = options.element;
            ...
        }

        public update(options: VisualUpdateOptions) {
            this.events.renderingStarted(options);
            ...
            // Learn more at https://github.com/d3/d3-transition/blob/master/README.md#transition_end
            d3.select(this.element).transition().duration(100).style("opacity","0").end().then(() => {
                // renderingFinished called after transition end
                this.events.renderingFinished(options);
            });
        }
```

## Related content

* [Visual API](visual-api.md)
* [Get a Power BI visual certified](power-bi-custom-visuals-certified.md)



================================================
FILE: powerbi-docs/developer/visuals/fetch-more-data.md
================================================
---
title: Fetch more data from Power BI
description: This article discusses how to enable a segmented fetch of large semantic models for Power BI visuals by using the fetchMoreData API.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 04/08/2025
#customer intent: As a Power BI visual developer, I want to learn how to fetch more data from Power BI so that I can display large semantic models in my visual.
---

# Fetch more data from Power BI

The **fetchMoreData API** lets you load data chunks of different sizes as a way of enabling Power BI visuals to bypass the hard limit of a 30K row data view. In addition to the original approach of aggregating all requested chunks, the API now also supports loading data chunks incrementally.

You can configure the number of rows to fetch at a time in advance, or you can use [`dataReductionCustomization`](#customized-data-reduction) to allow the report author set the chunk size dynamically.

>[!NOTE]
> The `fetchMoreData` API is available in version 3.4 and above.
>
> The dynamic `dataReductionCustomization` API is available in version 5.2 and above.
>
> To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

## Enable a segmented fetch of large semantic models

Define a window size for `dataReductionAlgorithm` in the visual's *capabilities.json* file for the required `dataViewMapping`. The `count` determines the window size, which limits the number of new data rows that you can append to the `dataview` in each update.

For example, add the following code in the *capabilities.json* file to append 100 rows of data at a time:

```typescript
"dataViewMappings": [
    {
        "table": {
            "rows": {
                "for": {
                    "in": "values"
                },
                "dataReductionAlgorithm": {
                    "window": {
                        "count": 100
                    }
                }
            }
    }
]
```

New segments are appended to the existing `dataview` and provided to the visual as an `update` call.

## Using fetchMoreData in the Power BI visual

In Power BI, you can `fetchMoreData` in one of two ways:

* *segments aggregation* mode
* *incremental updates* mode

### Segments aggregation mode (default)

With the segments aggregation mode, the data view that is provided to the visual contains the accumulated data from all previous `fetchMoreData requests`. Therefore, the data view size grows with each update according to the window size. For example, if a total of 100,000 rows are expected, and the window size is set to 10,000, then the first update data view should include 10,000 rows, the second update data view should include 20,000 rows, and so on.

Select the segments aggregation mode by calling `fetchMoreData` with `aggregateSegments = true`.

You can determine whether data exists by checking for the existence of `dataView.metadata.segment`:

```typescript
    public update(options: VisualUpdateOptions) {
        const dataView = options.dataViews[0];
        console.log(dataView.metadata.segment);
        // output: __proto__: Object
    }
```

You also can check to see whether the update is the first update or a subsequent update by checking `options.operationKind`. In the following code, `VisualDataChangeOperationKind.Create` refers to the first segment and `VisualDataChangeOperationKind.Append` refers to subsequent segments.

```typescript
// CV update implementation
public update(options: VisualUpdateOptions) {
    // indicates this is the first segment of new data.
    if (options.operationKind == VisualDataChangeOperationKind.Create) {

    }

    // on second or subsequent segments:
    if (options.operationKind == VisualDataChangeOperationKind.Append) {

    }

    // complete update implementation
}
```

You also can invoke the `fetchMoreData` method from a UI event handler:

```typescript
btn_click(){
{
    // check if more data is expected for the current data view
    if (dataView.metadata.segment) {
        // request for more data if available; as a response, Power BI will call update method
        let request_accepted: bool = this.host.fetchMoreData(true);
        // handle rejection
        if (!request_accepted) {
            // for example, when the 100 MB limit has been reached
        }
    }
}
```

As a response to calling the `this.host.fetchMoreData` method, Power BI calls the `update` method of the visual with a new segment of data.

> [!NOTE]
> To avoid client memory constraints, Power BI limits the fetched data total to 100 MB. When this limit is reached, `fetchMoreData()` returns `false`.

### Incremental updates mode

With the incremental updates mode, the data view that is provided to the visual contains only the next set of incremental data. The data view size is equal to the defined window size (or smaller, if the last bit of data is smaller than the window size). For example, if a total of 101,000 rows are expected and the window size is set to 10,000, the visual would get 10 updates with a data view size of 10,000 and one update with a data view of size 1,000.

The incremental updates mode is selected by calling `fetchMoreData` with `aggregateSegments = false`.

You can determine whether data exists by checking for the existence of `dataView.metadata.segment`:

```typescript
    public update(options: VisualUpdateOptions) {
        const dataView = options.dataViews[0];
        console.log(dataView.metadata.segment);
        // output: __proto__: Object
    }
```

You also can check if the update is the first update or a subsequent update by checking `options.operationKind`. In the following code, `VisualDataChangeOperationKind.Create` refers to the first segment, and `VisualDataChangeOperationKind.Segment` refers to subsequent segments.

```typescript
// CV update implementation
public update(options: VisualUpdateOptions) {
    // indicates this is the first segment of new data.
    if (options.operationKind == VisualDataChangeOperationKind.Create) {

    }

    // on second or subsequent segments:
    if (options.operationKind == VisualDataChangeOperationKind.Segment) {
        
    }

    // skip overlapping rows 
    const rowOffset = (dataView.table['lastMergeIndex'] === undefined) ? 0 : dataView.table['lastMergeIndex'] + 1;

    // Process incoming data
    for (var i = rowOffset; i < dataView.table.rows.length; i++) {
        var val = <number>(dataView.table.rows[i][0]); // Pick first column               
            
     }
     
    // complete update implementation
}
```

You also can invoke the `fetchMoreData` method from a UI event handler:

```typescript
btn_click(){
{
    // check if more data is expected for the current data view
    if (dataView.metadata.segment) {
        // request for more data if available; as a response, Power BI will call update method
        let request_accepted: bool = this.host.fetchMoreData(false);
        // handle rejection
        if (!request_accepted) {
            // for example, when the 100 MB limit has been reached
        }
    }
}
```

As a response to calling the `this.host.fetchMoreData` method, Power BI calls the `update` method of the visual with a new segment of data.

> [!NOTE]
> Although the data in the different updates of the data views are mostly exclusive, there's some overlap between consecutive data views.
>
> For table and categorical data mapping, the first `N` data view rows can be expected to contain data copied from the previous data view.
>
> `N` is determined by: `(dataView.table['lastMergeIndex'] === undefined) ? 0 : dataView.table['lastMergeIndex'] + 1`

The visual keeps the data view passed to it so it can access the data without extra communications with Power BI.  

## Customized data reduction

Since the developer can't always know in advance what type of data the visual will display, they might want to allow the report author to set the data chunk size dynamically. From API version 5.2, you can allow the report author to set the size of the data chunks that are fetched each time.

To allow the report author to set the count:

1. Define a [formatting object property](./format-pane-example.md) called `dataReductionCustomization` in your *capabilities.json* file:

    ```json
     "objects": {
            "dataReductionCustomization": {
                "properties": {
                    "rowCount": {
                        "type": {
                            "numeric": true
                        }
                    },
                    "columnCount": {
                        "type": {
                            "numeric": true
                        }
                    }
                }
            }
        },
    ```

1. Insert the following code fragment into the formatting settings file:

    ```typescript
    class DataReductionCardSettings extends FormattingSettingsCard {
        rowCount = new formattingSettings.NumUpDown({
            name: "rowCount",
            displayName: "Row reduction",
            description: "Show Reduction for all row groups",
            value: 100,
        });
 
        columnCount = new formattingSettings.NumUpDown({
            name: "columnCount",
            displayName: "Column reduction",
            description: "Show Reduction for all column groups",
            value: 10,
       }); 
 
        name = "dataReductionCustomization";
        displayName = "Data Reduction";
        slices = [this.rowCount, this.columnCount];
    }
    ```

1. After the `dataViewMappings`, define `dataReductionCustomization` as:

    ```json
       "dataReductionCustomization": {
            "matrix": {
                "rowCount": {
                    "propertyIdentifier": {
                        "objectName": "dataReductionCustomization",
                        "propertyName": "rowCount"
                    },
                },
                "columnCount": {
                    "propertyIdentifier": {
                        "objectName": "dataReductionCustomization",
                        "propertyName": "columnCount"
                    },
                }
            }
        }
    ```

The data reduction information appears under *visual* in the format pane.

:::image type="content" source="./media/fetch-more-data/custom-data-reduction.png" alt-text="Screenshot of the format pan with option to set data reduction count.":::

## Considerations and limitations

* The window size is limited to a range of 2-30,000.
* The data view total row count is limited to 1,048,576 rows.
* The data view memory size is limited to 100 MB in segments aggregation mode.
* The *dataReductionCustomization* row count is limited to a range of 15-30,000
* The *dataReductionCustomization* columns count is limited to a range of 1-2,000

## Related content

* [Data view mappings](dataview-mappings.md#data-reduction-algorithm)
* [DataViewUtils](utils-dataview.md)



================================================
FILE: powerbi-docs/developer/visuals/file-download-api.md
================================================
---
title:  Power BI custom visual file download API
description: This article describes the API used to allow a Power BI custom visual to export data to a text, PDF, excel, or other file.
author: billmath
ms.author: billmath
ms.reviewer: 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 04/21/2024
---

# File download API

The **file download API** lets users download data from a custom visual into a file on their storage device. Downloading a visual requires user consent and admin permission provided in the admin global switch. This setting is separate from and not affected by download restrictions applied in your organization's [export and sharing](/power-bi/admin/service-admin-portal-export-sharing) tenant settings.

:::image type="content" source="./media/file-download-api/custom-visuals-download-admin-setting.png" alt-text="Screenshot of admin setting enabling custom visual downloads.":::

>[!NOTE]
>The **file download API** has three methods:
>
> * [`exportVisualsContent`](#the-exportvisualscontent-method) is available from API version 4.5
> * [`status`](#the-status-method) is available from API version 4.6.
> * [`exportVisualsContentExtended`](#the-exportvisualscontentextended-method) is available from API version 5.3.
> * To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

Use the **file download API** to export to files of the following types:

* .txt
* .csv
* .json
* .tmplt
* .xml
* .pdf
* .xlsx

Before the download begins, a window appears asking to confirm that the visual is from a trusted source.

:::image type="content" source="./media/file-download-api/custom-visual-download-confirm.png" alt-text="Screenshot asking to confirm download only if it is from a trusted source.":::

## How to use the file download API

To use the file download API, add a declaration to the [privileges array in visual capabilities.](./capabilities.md#define-privileges)

The **file download API** has three methods:

* [status](#the-status-method): available from API version 4.6
* [`exportVisualsContent`](#the-exportvisualscontent-method): available from API version 4.5
* [`exportVisualsContentExtended`](#the-exportvisualscontentextended-method): available from API version 5.3.

The difference between the two methods is the return value.

### The `status` method

The status method returns the status of the file download API:

* *PrivilegeStatus.DisabledByAdmin*: the tenant admin switch is off
* *PrivilegeStatus.NotDeclared*: the visual has no declaration for the local storage in the privileges array
* *PrivilegeStatus.NotSupported*: the API isn't supported. See [limitations](#considerations-and-limitations) for more information.
* *PrivilegeStatus.Allowed*: the API is supported and allowed.

### The `exportVisualsContent` method

The `exportVisualsContent` method has four parameters:

* content: string
* filename: string
* fileType: string - When exporting to a *.pdf* or *.xlsx* file, the `fileType` parameter should be `base64`
* fileDescription: string

This method returns a promise that will be resolved for a Boolean value.

### The `exportVisualsContentExtended` method

The `exportVisualsContentExtended` method also has four parameters:

* content: string
* filename: string
* fileType: string - When exporting to a *.pdf* or *.xlsx* file, the `fileType` parameter should be `base64`
* fileDescription: string

This method returns a promise, which will be resolved with a result of type `ExportContentResultInfo` that contains the following parameters:

* downloadCompleted – if the download completed successfully.
* filename – the exported file name.

## Example: file download API

Here's an example of how to download the content of a custom visual into an excel file and a text file.

```typescript
import IDownloadService = powerbi.extensibility.IDownloadService;
...

export class Visual implements IVisual {
    ...
    private downloadService: IDownloadService;
    ...

    constructor(options: VisualConstructorOptions) {
        this.downloadService = options.host.downloadService;
         ...

        const downloadBtn: HTMLElement = document.createElement("button");
        downloadBtn.onclick = () => {
            let contentXlsx: string = ...;//content in base64
            let contentTxt: string = ...;
            this.downloadService.exportVisualsContent(contentTxt, "mytxt.txt", "txt", "txt file").then((result) => {
                if (result) {
                    //do something
                }
            }).catch(() => {
                //handle error
            });

            this.downloadService.exportVisualsContent(contentXlsx, "myfile.xlsx", "base64", "xlsx file").then((result) => {
                if (result) {
                    //do something
                }
            }).catch(() => {
                //handle error
            });

            this.downloadService.exportVisualsContentExtended(contentXlsx, "myfile.xlsx", "base64", "xlsx file").then((result) => {
                if (result.downloadCompleted) {
                    //do something
                    console.log(result.fileName);
                }
            }).catch(() => {
                //handle error
            });
        };

        // if you are using API version > 4.6.0
        downloadBtn.onclick = async () => {
            try {
                const status: powerbi.PrivilegeStatus = await this.downloadService.exportStatus();
                if (status === powerbi.PrivilegeStatus.Allowed) {
                    const result = await this.downloadService.exportVisualsContent('aaaaa','a.txt', 'text/plain', 'aa');
                    // handle result
                } else {
                    // handle if the API is not allowed
                }

            } catch (err) {
                //handle error
            }
        }
    }
}
```

## Considerations and limitations

* The API is supported only in the Power BI service and Power BI desktop
* The size limit for a downloaded file is 30 MB.
* This API is a [privileged API](./capabilities.md#privileges-define-the-special-permissions-that-your-visual-requires).

## Related content

* [Learn about the Visual API](visual-api.md)

* [Get a Power BI visual certified](power-bi-custom-visuals-certified.md)



================================================
FILE: powerbi-docs/developer/visuals/filter-api.md
================================================
---
title: The Visual Filters API for better embedded BI insights
description: This article discusses how Power BI visuals can filter other visuals. Enable better embedded BI insights using Power BI embedded analytics.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/06/2024
#customer intent: As a Power BI visual developer, I want to learn how to use the Visual Filters API to filter data in Power BI visuals so that I can enable better embedded BI insights.
---

# The Visual Filters API in Power BI visuals

The Visual Filters API allows you to filter data in Power BI visuals. The main difference between the filter API and other ways of selecting data is how it affects other visuals in the report. When a filter is applied to a visual, only the filtered data will be visible in all visuals, despite highlight support by other visuals.

To enable filtering for the visual, the *capabilities.json* file should contain a `filter` object in the `general` section.

```json
"objects": {
        "general": {
            "displayName": "General",
            "displayNameKey": "formattingGeneral",
            "properties": {
                "filter": {
                    "type": {
                        "filter": true
                    }
                }
            }
        }
    }
```

>[!NOTE]
>
> * Visual filters API interfaces are available in the [powerbi-models](https://www.npmjs.com/package/powerbi-models) package. This package also contains classes to create filter instances.
>
>    ```cmd
>    npm install powerbi-models --save
>    ```
>
> * If you're using an older (earlier than 3.x.x) version of the tools, include `powerbi-models` in the visuals package. For more information, see the short guide, [Add the Advanced Filter API to the custom visual](https://github.com/Microsoft/powerbi-visuals-sampleslicer/blob/master/doc/AddingAdvancedFilterAPI.md). To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

All filters use the [`IFilter` interface](/azure/machine-learning/studio-module-reference/ifilter-interface), as shown in the following code:

```typescript
export interface IFilter {
        $schema: string;
        target: IFilterTarget;
}
```

Where `target` is a table column in the data source.

There are three filter APIs:

* [Basic filter API](#the-basic-filter-api)
* [Advanced filter API](#the-advanced-filter-api)
* [Tuple (multi-column) filter API](#the-tuple-filter-api-multi-column-filter)

## The Basic Filter API

Basic filter interface is shown in the following code:

```typescript
export interface IBasicFilter extends IFilter {
    operator: BasicFilterOperators;
    values: (string | number | boolean)[];
}
```

Where:

* `operator` is an enumeration with the values *In*, *NotIn*, and *All*.
* `values` are values for the condition.

### Example of a basic filter

The following example returns all rows where `col1` equals the value 1, 2, or 3.

```typescript
let basicFilter = {
    target: {
        column: "Col1"
    },
    operator: "In",
    values: [1,2,3]
}
```

The SQL equivalent of the above example is:

```sql
SELECT * FROM table WHERE col1 IN ( 1 , 2 , 3 )
```

To create a filter, you can use the BasicFilter class in `powerbi-models`.

If you are using an older version of the tool, you should get an instance of models in the window object by using `window['powerbi-models']`, as shown in the following code:

```javascript
let categories: DataViewCategoricalColumn = this.dataView.categorical.categories[0];

let target: IFilterColumnTarget = {
    table: categories.source.queryName.substr(0, categories.source.queryName.indexOf('.')),
    column: categories.source.displayName
};

let values = [ 1, 2, 3 ];

let filter: IBasicFilter = new window['powerbi-models'].BasicFilter(target, "In", values);
```

The visual invokes the filter by calling the `applyJsonFilter()` method on the host interface, `IVisualHost`, which is provided to the visual in the constructor method.

```typescript
IVisualHost.applyJsonFilter(filter, "general", "filter", FilterAction.merge);
```

## The Advanced Filter API

The [Advanced Filter API](https://github.com/Microsoft/powerbi-models) enables complex cross-visual data-point selection and filtering queries that are based on multiple criteria, such as *LessThan*, *Contains*, *Is*, *IsBlank*, and so on).

This filter was introduced in the Visuals API version 1.7.0.

As opposed to the *Basic API*, in the *Advanced Filter API*:

* The `target` requires both a `table` and `column` name (the *Basic API* just had `column`).
* Operators are *And* and *Or* (as opposed to *In*).
* The filter uses conditions (*less than*, *greater than* etc.) instead of values with the interface:

```typescript
interface IAdvancedFilterCondition {
    value: (string | number | boolean);
    operator: AdvancedFilterConditionOperators;
}
```

Condition operators for the `operator` parameter are:
 *None*, *LessThan*, *LessThanOrEqual*, *GreaterThan*, *GreaterThanOrEqual*, *Contains*, *DoesNotContain*, *StartsWith*, *DoesNotStartWith*, *Is*, *IsNot*, *IsBlank*, and "IsNotBlank"`

```javascript
let categories: DataViewCategoricalColumn = this.dataView.categorical.categories[0];

let target: IFilterColumnTarget = {
    table: categories.source.queryName.substr(0, categories.source.queryName.indexOf('.')), // table
    column: categories.source.displayName // col1
};

let conditions: IAdvancedFilterCondition[] = [];

conditions.push({
    operator: "LessThan",
    value: 0
});

let filter: IAdvancedFilter = new window['powerbi-models'].AdvancedFilter(target, "And", conditions);

// invoke the filter
visualHost.applyJsonFilter(filter, "general", "filter", FilterAction.merge);
```

The SQL equivalent is:

```sql
SELECT * FROM table WHERE col1 < 0;
```

For the complete sample code for using the Advanced Filter API, go to the [Sampleslicer visual repository](https://github.com/Microsoft/powerbi-visuals-sampleslicer).

## The Tuple Filter API (multi-column filter)

The *Tuple Filter* API was introduced in Visuals API 2.3.0. It is similar to the *Basic Filter API*, but it allows you to define conditions for several columns and tables.

The filter interface is shown in the following code:

```typescript
interface ITupleFilter extends IFilter {
    $schema: string;
    filterType: FilterType;
    operator: TupleFilterOperators;
    target: ITupleFilterTarget;
    values: TupleValueType[];
}
```

Where

* `target` is an array of columns with table names:

    ```typescript
    declare type ITupleFilterTarget = IFilterTarget[];
    ```

    The filter can address columns from various tables.

* `$schema` is <https://powerbi.com/product/schema#tuple>.

* `filterType` is *FilterType.Tuple*.

* `operator` allows use only in the *In* operator.

* `values` is an array of value tuples. Each tuple represents one permitted combination of the target column values.

```typescript
declare type TupleValueType = ITupleElementValue[];

interface ITupleElementValue {
    value: PrimitiveValueType
}
```

Complete example:

```typescript
let target: ITupleFilterTarget = [
    {
        table: "DataTable",
        column: "Team"
    },
    {
        table: "DataTable",
        column: "Value"
    }
];

let values = [
    [
        // the first column combination value (or the column tuple/vector value) that the filter will pass through
        {
            value: "Team1" // the value for the `Team` column of the `DataTable` table
        },
        {
            value: 5 // the value for the `Value` column of the `DataTable` table
        }
    ],
    [
        // the second column combination value (or the column tuple/vector value) that the filter will pass through
        {
            value: "Team2" // the value for `Team` column of `DataTable` table
        },
        {
            value: 6 // the value for `Value` column of `DataTable` table
        }
    ]
];

let filter: ITupleFilter = {
    $schema: "https://powerbi.com/product/schema#tuple",
    filterType: FilterType.Tuple,
    operator: "In",
    target: target,
    values: values
}

// invoke the filter
visualHost.applyJsonFilter(filter, "general", "filter", FilterAction.merge);
```

> [!IMPORTANT]
> The order of the column names and condition values is important.

The SQL equivalent of the above code is:

```sql
SELECT * FROM DataTable WHERE ( Team = "Team1" AND Value = 5 ) OR ( Team = "Team2" AND Value = 6 );
```  

## Restore the JSON filter from the data view

Starting with API version 2.2.0, you can restore the JSON filter from *VisualUpdateOptions*, as shown in the following code:

```typescript
export interface VisualUpdateOptions extends extensibility.VisualUpdateOptions {
    viewport: IViewport;
    dataViews: DataView[];
    type: VisualUpdateType;
    viewMode?: ViewMode;
    editMode?: EditMode;
    operationKind?: VisualDataChangeOperationKind;
    jsonFilters?: IFilter[];
}
```

When you switch bookmarks, Power BI calls the `update` method of the visual, and the visual gets a corresponding `filter` object. For more information, see [Add bookmark support for Power BI visuals](bookmarks-support.md).

### Sample JSON filter

Some sample JSON filter code is shown in the following image:

:::image type="content" source="media/filter-api/json-filter.png" alt-text="Screenshot of sample JSON filter code showing values in an array.":::

### Clear the JSON filter

To reset or clear the filter, pass a `null` value to the filter API.

```typescript
// invoke the filter
visualHost.applyJsonFilter(null, "general", "filter", FilterAction.merge);
```

## Related content

[Use Power BI visuals selections to add interactivity to a visual](selection-api.md)



================================================
FILE: powerbi-docs/developer/visuals/format-pane-example.md
================================================
---
title: Customize the format pane in Power BI custom visuals
description: This article describes how to customize the new Format pane in Power BI custom visuals using the new formatting model
author: billmath
ms.author: billmath
ms.reviewer: ''
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2023
#customer intent: As a custom Power BI visual developer, I want to learn how to customize the new Format pane in Power BI custom visuals using the new formatting model so that I can create visuals that are easier for report creators to use.
---

# Add the new format pane to a custom visual using API

> [!IMPORTANT]
> To add the new Format pane to a custom visual, we recommend using [**formattingmodel utils**](./utils-formatting-model.md).

Although we recommend using [formattingmodel utils](./utils-formatting-model.md) with the new format pane, this example demonstrates how to build a custom visual formatting model with one card using only the API.

## Example: Formatting a data card

The card has two groups:

* **Font control group** with one composite property
  * Font control
* **Data design group** with two simple properties
  * Font color
  * Line alignment

First, add objects to capabilities file:

```json
"objects": {
        "dataCard": {
            "properties": {
                "displayUnitsProperty": {
                    "type":
                    {
                        "formatting": {
                            "labelDisplayUnits": true
                        }
                    }
                },
                "fontSize": { 
                    "type": {
                        "formatting": {
                            "fontSize": true
                        }
                    }
                },
                "fontFamily": {
                    "type": {
                        "formatting": {
                            "fontFamily": true
                        }
                    }
                },
                "fontBold": {
                    "type": {
                        "bool": true
                    }
                },
                "fontUnderline": {
                    "type": {
                        "bool": true
                    }
                },
                "fontItalic": {
                    "type": {
                        "bool": true
                    }
                },
                "fontColor": {
                    "type": {
                        "fill": {
                            "solid": {
                                "color": true
                            }
                        }
                    }
                },
                "lineAlignment": {
                    "type": {
                        "formatting": {
                            "alignment": true
                        }
                    }
                }
            }
        }
    }
```

Then, create the `getFormattingModel`

```typescript
    public getFormattingModel(): powerbi.visuals.FormattingModel {
        // Building data card, We are going to add two formatting groups "Font Control Group" and "Data Design Group"
        let dataCard: powerbi.visuals.FormattingCard = {
            description: "Data Card Description",
            displayName: "Data Card",
            uid: "dataCard_uid",
            groups: []
        }

        // Building formatting group "Font Control Group"
        // Notice that "descriptor" objectName and propertyName should match capabilities object and property names
        let group1_dataFont: powerbi.visuals.FormattingGroup = {
            displayName: "Font Control Group",
            uid: "dataCard_fontControl_group_uid",
            slices: [
                {
                    uid: "dataCard_fontControl_displayUnits_uid",
                    displayName:"display units",
                    control: {
                        type: powerbi.visuals.FormattingComponent.Dropdown,
                        properties: {
                            descriptor: {
                                objectName: "dataCard",
                                propertyName:"displayUnitsProperty"
                            },
                            value: 0
                        }
                    }
                },
                // FontControl slice is composite slice, It means it contain multiple properties inside it
                {
                    uid: "data_font_control_slice_uid",
                    displayName: "Font",
                    control: {
                        type: powerbi.visuals.FormattingComponent.FontControl,
                        properties: {
                            fontFamily: {
                                descriptor: {
                                    objectName: "dataCard",
                                    propertyName: "fontFamily"
                                },
                                value: "wf_standard-font, helvetica, arial, sans-serif"
                            },
                            fontSize: {
                                descriptor: {
                                    objectName: "dataCard",
                                    propertyName: "fontSize"
                                },
                                value: 16
                            },
                            bold: {
                                descriptor: {
                                    objectName: "dataCard",
                                    propertyName: "fontBold"
                                },
                                value: false
                            },
                            italic: {
                                descriptor: {
                                    objectName: "dataCard",
                                    propertyName: "fontItalic"
                                },
                                value: false
                            },
                            underline: {
                                descriptor: {
                                    objectName: "dataCard",
                                    propertyName: "fontUnderline"
                                },
                                value: false
                            }
                        }
                    }
                }
            ],
        };
        // Building formatting group "Font Control Group"
        // Notice that "descriptor" objectName and propertyName should match capabilities object and property names
        let group2_dataDesign: powerbi.visuals.FormattingGroup = {
            displayName: "Data Design Group",
            uid: "dataCard_dataDesign_group_uid",
            slices: [
                // Adding ColorPicker simple slice for font color
                {
                    displayName: "Font Color",
                    uid: "dataCard_dataDesign_fontColor_slice",
                    control: {
                        type: powerbi.visuals.FormattingComponent.ColorPicker,
                        properties: {
                            descriptor:
                            {
                                objectName: "dataCard",
                                propertyName: "fontColor"
                            },
                            value: { value: "#01B8AA" }
                        }
                    }
                },
                // Adding AlignmentGroup simple slice for line alignment
                {
                    displayName: "Line Alignment",
                    uid: "dataCard_dataDesign_lineAlignment_slice",
                    control: {
                        type: powerbi.visuals.FormattingComponent.AlignmentGroup,
                        properties: {
                            descriptor:
                            {
                                objectName: "dataCard",
                                propertyName: "lineAlignment"
                            },
                            mode: powerbi.visuals.AlignmentGroupMode.Horizonal,
                            value: "right"
                        }
                    }
                },
            ]
        };

        // Add formatting groups to data card
        dataCard.groups.push(group1_dataFont);
        dataCard.groups.push(group2_dataDesign);

        // Build and return formatting model with data card
        const formattingModel: powerbi.visuals.FormattingModel = { cards: [dataCard] };
        return formattingModel;
    }
```

Here's the resulting pane:

:::image type="content" source="./media/format-pane/format-pane-demo-result.png" alt-text="Screenshot of format pane that results from the data card example.":::

## Reset settings to default

The new format pane has the option to reset all formatting card properties values to default by clicking on the *Reset to default* button that appears in the open card.

:::image type="content" source="./media/format-pane/format-card-reset-to-default.png" alt-text="Screenshot of format card reset to default button.":::

To enable this feature, add a list of formatting card properties descriptors to formatting card `revertToDefaultDescriptors`.
The following the example shows how to add the *reset to default* button:

```typescript
let dataCard: powerbi.visuals.FormattingCard = {
    displayName: "Data Card",
    // ... card parameters and groups list

    revertToDefaultDescriptors: [
        {
            objectName: "dataCard",
            propertyName:"displayUnitsProperty"
        },
        {
            objectName: "dataCard",
            propertyName: "fontFamily"
        },

        // ... the rest of properties descriptors 
    ]
};
```

Adding `revertToDefaultDescriptors` to formatting cards also makes it possible to reset all formatting cards properties at once by clicking on the *reset all settings to default* button in the top bar of the format pane:

:::image type="content" source="./media/format-pane/format-pane-reset-all-settings-to-default.png" alt-text="Screenshot of format pane reset all settings to default button.":::

## Formatting property selector

The optional selector in formatting properties descriptor determines where each property is bound in the dataView. There are four distinct options. Read about them in [objects selectors types](./objects-properties.md#objects-selectors-types).

## Localization

For more about the localization feature and to set up a localization environment see [Add the local language to your Power BI visual](localization.md) Use the localization manager to format components that you want to localize:

```typescript
displayName: this.localization.getDisplayName("Font_Color_DisplayNameKey");
description: this.localization.getDisplayName("Font_Color_DescriptionKey");
```

To localize formatting model utils [formatting utils localization](utils-formatting-model.md#localization).

## GitHub Resources

* All formatting model interfaces can be found in [GitHub - microsoft/powerbi-visuals-api: Power BI custom visuals API](https://github.com/microsoft/powerbi-visuals-api) in “formatting-model-api.d.ts”

* We recommend using the new formatting model utils at [GitHub - microsoft/powerbi-visuals-utils-formattingmodel: Power BI visuals formatting model helper utils](https://github.com/microsoft/powerbi-visuals-utils-formattingmodel)

* You can find an example of a custom visual *SampleBarChart* that uses API version 5.1.0 and implements `getFormattingModel` using the new formatting model utils at [GitHub - microsoft/PowerBI-visuals-sampleBarChart: Bar Chart Custom Visual for tutorial](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/tree/barChartTutorial).

## Related content

More questions? [Ask the Power BI Community](https://community.powerbi.com)



================================================
FILE: powerbi-docs/developer/visuals/format-pane-general.md
================================================
---
title: About format pane and formatting model in Power BI custom visuals
description: This article describes what the Formatting model in Power BI custom visuals is
author: billmath
ms.author: billmath
ms.reviewer: ''
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 01/12/2025
#customer intent: As a custom Power BI visual developer, I want to learn how to customize the Format pane in Power BI custom visuals using the formatting model so that I can create visuals that are easier for report creators to use.
---

# The format pane in Power BI custom visuals

Using API version 5.1 and later, developers can create visuals with the [Format pane](../../create-reports/service-the-report-editor-take-a-tour.md#format-your-visuals). Developers can define the cards and their categories for any property in their custom visual, making it easier for report creators to use these visuals.

The API uses the **FormattingModel** method to customize parts of the format and analytics panes.

> [!TIP]
> The `getFormattingModel` method replaces the `enumerateObjectInstances` method in earlier API versions.

The `getFormattingModel` returns a `FormattingModel` that defines how the visual's formatting and analytics pane look.

In addition to all the old formatting pane capabilities, the [formatting model](#formatting-model) supports current format pane capabilities, properties, and hierarchies.

:::image type="content" source="media/format-pane/formatting-model.png" alt-text="Screenshot of the formatting pane.":::

## Create a visual that supports the latest Format pane

General steps to add Format pane support to a custom visual:

1. Set the `apiVersion` in your *pbiviz.json* file to `5.1` or later.

2. Define all the customizable [`objects`](./objects-properties.md) in your *capabilities.json* file. These objects are then [mapped](#map-formatting-properties) to the properties of the formatting pane.
   The following properties are required for each object:

   * object name
   * property name
   * property type
  
   All other properties, including `DisplayName` and `description`, are now optional. 

3. Build the custom visual [**FormattingModel**](#formatting-model) by doing **one** of the following:

   * Use [formattingmodel util](./utils-formatting-model.md). (**Recommended**)
   * Without this util, use only APIs.

  Define the properties of your custom visual formatting model and build it using code (not JSON).

4. Implement the `getFormattingModel` API in the custom visual class that returns custom visual formatting model. (This API replaces the `enumerateObjectInstances` that was used in previous versions).

## Example of formatting model implementation

* Formatting model using [**formattingmodel util** example](utils-formatting-model.md#build-formatting-pane-model-using-formattingmodel-utils). (**Recommended**)
* Formatting model using only [**APIs** example](format-pane-example.md).

## Map formatting properties

If you have a custom visual created with an older API and you want to update it with the format pane, or if you're creating a new custom visual:

1. Set the `apiVersion` in your *pbiviz.json* file to `5.1` or later.

2. For each object name and property name in *capabilities.json*, create a matching formatting property. The formatting property should have a descriptor that contains an `objectName` and `propertyName` that matches the object name and property name in *capabilities.json*.

The `objects` properties in the capabilities file still have the same format and don't need to be changed.

For example, if the `circle` object in your *capabilities.json* file is defined like this:

```json
"objects": {
    "circle": {
        "properties": {
            "circleColor": {
                "type": {
                    "fill": {
                        "solid": {
                            "color": true
                        }
                    }
                }
            },
        }
    }
}
```

The formatting property in your model should be of type `ColorPicker` and look like this:

```javascript
control: {
    type: "ColorPicker",
    properties: {
        descriptor: {
            objectName: "circle",
            propertyName: "circleColor"
        },
        value: {
            value: this.visualSettings.circle.circleColor
        }
    }
}
```

You get an error if one of the following conditions is true:

* The object or property name in the capabilities file doesn’t match the one in the formatting model
* The property type in the capabilities file doesn’t match the type in formatting model

## Formatting model

The formatting model is where you describe and customize all the properties of your format pane.

### Formatting model components

In the formatting model, property components are grouped together in logical categories and subcategories. These groups make the model easier to scan. There are the five basic components, from largest to smallest:

* **Formatting model**
  The largest pane container, used for formatting the pane's frontal interface. It contains a list of formatting cards.

* [**Formatting card**](formatting-model-card.md)
  The top level properties grouping container for formatting properties. Each card consists of one or more formatting groups, as shown here.

  :::image type="content" source="./media/format-pane/formatting-cards.png" alt-text="Screenshot of formatting model with individual formatting cards.":::

* [**Formatting group**](formatting-model-group.md)  
  The secondary-level properties grouping container. The formatting group is displayed as a grouping container for formatting slices.

  :::image type="content" source="./media/format-pane/formatting-groups.png" alt-text="Screenshot of formatting cards divided into formatting groups.":::

* [**Formatting container**](formatting-model-container.md)  
  The secondary-level properties grouping container. The formatting container groups formatting slices into separate container items and allows to switch between them using a drop-down list.

  :::image type="content" source="./media/format-pane/container.png" alt-text="Screenshot of formatting container.":::

* **Formatting slice**  
  Property container. There are two types of slices:
  
  * Simple slice: Individual property container
  * [Composite slice](#composite-slice-properties): Multiple related property containers grouped into one formatting slice

  The following image shows the different types of slices. "Font" is a composite slice consisting of font family, size, and bold, italics, and underline switches. "Color", "display units", and the other slices are simple slices with one component each.

  :::image type="content" source="./media/format-pane/format-pane-slices.png" alt-text="Screenshot of format pane composite and simple slices.":::

### Visualization pane formatting properties

Every property in the formatting model should match and object type in the *capabilities.json* file.

The following table shows the formatting property types in *capabilities.json* file and their matching type class in modern formatting model properties:

| Type             | Capabilities Value Type | Formatting Property  |
|------------------|-------------------------|----------------------|
| Boolean          | Bool                    | [ToggleSwitch](formatting-model-toggleswitch.md)         |
| Number           | <li>numeric</li> <li> integer </li>       | <li> [NumUpDown](formatting-model-numupdown.md) </li> <li>[Slider](formatting-model-slider.md)</li>     |
| Enumeration list | enumeration:[]          | <li> [ItemDropdown](formatting-model-dropdown.md?tabs=itemdropdown#example-dropdown-implementation)</li> <li> [ItemFlagsSelection](formatting-model-flagselection.md?tabs=itemflagsselection#example-flagsselection-implementation)</li><li> [AutoDropdown](formatting-model-dropdown.md?tabs=autodropdown#example-dropdown-implementation)</li><li> [AutoFlagsSelection](formatting-model-flagselection.md?tabs=autoflagsselection#example-flagsselection-implementation)</li> <sup>*</sup> See note below       |
| Color            | Fill                    | [ColorPicker](formatting-model-colorpicker.md)          |
| Gradient         | FillRule                | GradientBar: property value should be string consisting of: </n>`minValue[,midValue],maxValue`          |
| Text             | Text                    | <li>[TextInput](formatting-model-textinput.md)</li> <li>[TextArea](formatting-model-textarea.md)</li>  |

Capabilities Formatting Objects

| Type             | Capabilities Value Type | Formatting Property  |
|------------------|-------------------------|----------------------|
| Font size           | FontSize             | NumUpDown            |
| Font family         | FontFamily           | [FontPicker](formatting-model-fontpicker.md)           |
| Line Alignment      | Alignment            | [AlignmentGroup](formatting-model-alignmentgroup.md)       |
| Label Display Units | LabelDisplayUnits    | AutoDropDown         |

<sup>*</sup> The enumeration list formatting property is different in the formatting model and in the capabilities file.

* Declare the following properties in the formatting settings class, including the list of enumeration items:

  * ItemDropdown
  * ItemFlagsSelection  

* Declare the following properties in the formatting settings class, without the list of enumeration items. Declare their enumeration items list in *capabilities.json* under the appropriate object. (These types are the same as in the previous API versions):

  * AutoDropdown
  * AutoFlagSelection  

### Composite slice properties

A formatting composite slice is a formatting slice that contains multiple related properties all together.

For now we have two composite slice types:

* [FontControl](formatting-model-fontcontrol.md)  
  This keeps all font related properties together. It consists of the following properties:
  
  * Font Family
  * Font Size
  * Bold [optional]
  * Italic [optional]
  * Underline [optional]

  :::image type="content" source="media/format-pane/font-slices.png" alt-text="Screenshot of font composite slice with font family, font size, bold, italic, and underline options.":::

  Each of these properties should have a corresponding object in capabilities file:

  | Property    | Capabilities Type         | Formatting Type  |
  |-------------|---------------------------|------------------|
  | Font Family | Formatting: { fontFamily} | FontPicker       |
  | Font Size   | Formatting: {fontSize}    | NumUpDown        |
  | Bold        | Bool                      | ToggleSwitch     |
  | Italic      | Bool                      | ToggleSwitch     |
  | Underline   | Bool                      | ToggleSwitch     |

* [MarginPadding](formatting-model-marginpadding.md)
  Margin padding determines the alignment of the text in the visual. It consists of the following properties:
  
  * Left
  * Right
  * Top
  * Bottom

  Each of these properties should have a corresponding object in capabilities file:

  | Property    | Capabilities Type         | Formatting Type  |
  |-------------|---------------------------|------------------|
  | Left        | Numeric                   | NumUpDown        |
  | Right       | Numeric                   | NumUpDown        |
  | Top         | Numeric                   | NumUpDown        |
  | Bottom      | Numeric                   | NumUpDown        |

## GitHub resources

* All formatting model interfaces can be found in [GitHub - microsoft/powerbi-visuals-api: Power BI custom visuals API](https://github.com/microsoft/powerbi-visuals-api) in “formatting-model-api.d.ts”

* We recommend using the latest formatting model utils at [GitHub - microsoft/powerbi-visuals-utils-formattingmodel: Power BI visuals formatting model helper utils](https://github.com/microsoft/powerbi-visuals-utils-formattingmodel)

* You can find an example of a custom visual *SampleBarChart* that uses API version 5.1.0 and implements `getFormattingModel` using the latest formatting model utils at [GitHub - microsoft/PowerBI-visuals-sampleBarChart: Bar Chart Custom Visual for tutorial](https://github.com/microsoft/PowerBI-visuals-sampleBarChart/tree/barChartTutorial).

## Related content

More questions? [Ask the Power BI Community](https://community.powerbi.com).


================================================
FILE: powerbi-docs/developer/visuals/formatting-model-alignmentgroup.md
================================================
---
title: AlignmentGroup formatting slice
description: This article describes how to implement AlignmentGroup slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# AlignmentGroup formatting slice

*AlignmentGroup* is a simple formatting slice which is used to represent *alignment* object type from `capabilities.json` file.

## Example: AlignmentGroup implementation

In this example, we show how to build a *AlignmentGroup* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "alignment": {
          "type": {
            "formatting": {
              "alignment": true
            }
          }
        }
      }
    }
  }
}
```

### Formatting model class

The following tabs show examples of the same *AlignmentGroup* slice in two available modes.

#### [Horizontal AlignmentGroup](#tab/horizontal)

![Screenshot of an AlignmentGroup in Horizontal mode.](media/format-pane/alignment-group-horizontal.png)

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";
 
    public labelsAlignment: formattingSettings.AlignmentGroup = new formattingSettings.AlignmentGroup({
        name: "alignment", // same as capabilities property name
        displayName: "Alignment",
        value: "center", // available values - "center", "left" or "right"
        mode: powerbi.visuals.AlignmentGroupMode.Horizonal
    });

    public slices: formattingSettings.Slice[] = [ this.labelsAlignment ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

#### [Vertical AlignmentGroup](#tab/vertical)

![Screenshot of an AlignmentGroup in Vertical mode.](media/format-pane/alignment-group-vertical.png)

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";
 
    public labelsAlignment: formattingSettings.AlignmentGroup = new formattingSettings.AlignmentGroup({
        name: "alignment", // same as capabilities property name
        displayName: "Alignment",
        value: "middle", // available values - "middle", "top" or "bottom"
        mode: powerbi.visuals.AlignmentGroupMode.Vertical
    });

    public slices: formattingSettings.Slice[] = [ this.labelsAlignment ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

---

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-card.md
================================================
---
title: Formatting settings card
description: This article describes how to implement Formatting settings card in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# Formatting settings card

A *formatting settings card* specifies a formatting card in the formatting or analytics pane. A formatting settings card can contain multiple formatting slices, containers, groups, and properties.

Adding slices to a formatting settings card puts all of these slices into one formatting card.

Cards, Slices, and Groups can be hidden dynamically by setting the `visible` parameter to *false* (*true* by default).

The card can populate either the formatting pane or analytics pane by setting the `analyticsPane` parameter to *true* or *false*.

## Example: Formatting settings card implementation

### Prerequisites

To build a formatting model with formatting card using formattingmodel utils, you need to

* Update powerbi-visuals-api version to 5.1 and higher.
* Install powerbi-visuals-utils-formattingmodel.
* Initialize [formattingSettingsService](utils-formatting-model.md#formatting-settings-service).
* Initialize [formattingSettingsModel class](utils-formatting-model.md#formatting-settings-model).

> [!NOTE]
>
> * Card name should match the object name in *capabilities.json*
> * Slice name should match the property name in *capabilities.json*

### [Simple formatting card implementation](#tab/simpleCard)

In this example, we show how to build a custom visual formatting model with one *simple card* using [formattingmodel util](utils-formatting-model.md).
The card has two slices:

* **Show property** represented by ToggleSwitch slice.
* **Display units property** represented by AutoDropdown slice.

First, add objects into the `capabilities.json` file:

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "values": {
      "properties": {
        "show": {
          "type": {
            "bool": true
          }
        },
        "displayUnits": {
          "type": {
            "formatting": {
              "labelDisplayUnits": true
            }
          }
        }
      }
    }
  }
}
```

Then, insert the following code fragment into the settings file:

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class ValuesCardSetting extends formattingSettings.SimpleCard {
    public show: formattingSettings.ToggleSwitch = new formattingSettings.ToggleSwitch({
        name: "show",
        value: true
    });

    public displayUnits: formattingSettings.AutoDropdown = new formattingSettings.AutoDropdown({
        name: "displayUnits",
        displayName: "Display units",
        value: 0
    });

    topLevelSlice: formattingSettings.ToggleSwitch = this.show;
    name: string = "values";
    displayName: string = "Values settings";

    public slices: formattingSettings.Slice[] = [ this.displayUnits ];
}

export class VisualSettingsModel  extends formattingSettings.Model {
    public values: ValuesCardSetting = new ValuesCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.values];
}
```

Follow steps 4 - 8 from the [Build formatting pane](utils-formatting-model.md#build-formatting-pane-model-using-formattingmodel-utils) tutorial.

Here's the resulting pane:

![Screenshot of an SimpleCard.](media/format-pane/simple-card.png)

### [Composite formatting card implementation](#tab/compositeCard)

In this example, we show how to build a custom visual formatting model with one composite formatting card using [formattingmodel util](utils-formatting-model.md).
The card has one group:

* **myVisualGroupSettings** with two simple properties
  * Precision
  * Display units

First, add objects into the `capabilities.json` file:

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "values": {
      "properties": {
        "show": {
          "type": {
            "bool": true
          }
        },
        "displayUnits": {
          "type": {
            "formatting": {
              "labelDisplayUnits": true
            }
          }
        },
        "displayUnits": {
          "type": {
            "formatting": {
              "labelDisplayUnits": true
            }
          }
        }
      }
    }
  }
}
```

Then, insert the following code fragment into the settings file:

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsSettingsGroup extends formattingSettings.SimpleCard {
    public displayUnits: formattingSettings.AutoDropdown = new formattingSettings.AutoDropdown({
        name: "displayUnits",
        displayName: "Display units",
        value: 0
    });

    public precision: formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "precision",
        displayName: "Precision",
        value: 2
    });

    name: string = "labelsGroup";
    displayName: string = "Labels group";
    slices: formattingSettings.Slice[] = [this.displayUnits, this.precision];
}

class ValuesCardSetting extends formattingSettings.CompositeCard {
    public show: formattingSettings.ToggleSwitch = new formattingSettings.ToggleSwitch({
        name: "show",
        value: true
    });

    public labelsGroup: LabelsSettingsGroup = new LabelsSettingsGroup();

    topLevelSlice: formattingSettings.ToggleSwitch = this.show;
    name: string = "values";
    displayName: string = "Values settings";
    groups: formattingSettings.Group[] = [this.labelsGroup];
}

export class VisualSettingsModel  extends formattingSettings.Model {
    public values: ValuesCardSetting = new ValuesCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.values];
}
```

Follow steps 4 - 8 from the [Build formatting pane](utils-formatting-model.md#build-formatting-pane-model-using-formattingmodel-utils) tutorial.

Here's the resulting pane:

![Screenshot of an CompositeCard.](media/format-pane/composite-card.png)

---

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-colorpicker.md
================================================
---
title: ColorPicker formatting slice
description: This article describes how to implement ColorPicker slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# ColorPicker formatting slice

*ColorPicker* is a simple formatting slice which is used to represent *fill* object type from `capabilities.json` file.

![Screenshot of the ColorPicker slice.](media/format-pane/color-picker.png)

## Example: ColorPicker implementation

In this example, we show how to build a *ColorPicker* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "color": {
          "type": {
            "fill": {
              "solid": {
                "color": true
              }
            }
          }
        }
      }
    }
  }
}
```

### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public color: formattingSettings.ColorPicker = new formattingSettings.ColorPicker({
        name: "color", // same as capabilities property name
        displayName: "Color",
        value: { value: "#000000" }
    });
    
    public slices: formattingSettings.Slice[] = [ this.color ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-container.md
================================================
---
title: Formatting settings container
description: This article describes how to implement Formatting settings container in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# Formatting settings container

A *formatting settings container* is the secondary-level properties grouping container. It groups slices into *container items* and allows users to switch between these items using dropdown element.

## Formatting settings container implementation

In this example, we show how to build a custom visual formatting model with one *container* using [formattingmodel util](utils-formatting-model.md).  
The container has two items:

* **LabelsSettingsContainerItem** with two simple properties
  * Precision
  * Display units
* **IconsSettingsContainerItem** with one simple property
  * Opacity

### Prerequisites

To build a formatting model with composite container using formattingmodel utils, you need to

* Update powerbi-visuals-api version to 5.1 and higher.
* Install powerbi-visuals-utils-formattingmodel.
* Initialize [formattingSettingsService](utils-formatting-model.md#formatting-settings-service).
* Initialize [formattingSettingsModel class](utils-formatting-model.md#formatting-settings-model).

### Example

First, add objects into the `capabilities.json` file:

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "values": {
      "properties": {
        "show": {
          "type": {
            "bool": true
          }
        },
        "displayUnits": {
          "type": {
            "formatting": {
              "labelDisplayUnits": true
            }
          }
        },
        "precision": {
          "type": {
            "integer": true
          }
        },
        "opacity": {
          "type": {
            "integer": true
          }
        }
      }
    }
  }
}
```

Then, insert the following code fragment into the settings file:

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsSettingsContainerItem extends formattingSettings.SimpleCard {
    public displayUnits: formattingSettings.AutoDropdown = new formattingSettings.AutoDropdown({
        name: "displayUnits",
        displayName: "Display units",
        value: 0
    });

    public precision: formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "precision",
        displayName: "Precision",
        value: 2
    });

    name: string = "labelsContainer";
    displayName: string = "All labels";
    slices: formattingSettings.Slice[] = [this.displayUnits, this.precision];
}

class IconsSettingsContainerItem extends formattingSettings.SimpleCard {
    public opacity: formattingSettings.Slider = new formattingSettings.Slider({
        name: "opacity",
        displayName: "Opacity",
        value: 50
    });

    name: string = "iconsContainer";
    displayName: string = "All icons";
    slices: formattingSettings.Slice[] = [this.opacity];
}

class ValuesCardSetting extends formattingSettings.SimpleCard {
    public show: formattingSettings.ToggleSwitch = new formattingSettings.ToggleSwitch({
        name: "show",
        value: true
    });

    public labelsContainerItem: LabelsSettingsContainerItem = new LabelsSettingsContainerItem();
    public iconsContainerItem: IconsSettingsContainerItem = new IconsSettingsContainerItem();
  
    public container: formattingSettings.Container = {
        displayName: "Apply settings to",
        containerItems: [this.labelsContainerItem, this.iconsContainerItem]
    };

    topLevelSlice: formattingSettings.ToggleSwitch = this.show;
    name: string = "values";
    displayName: string = "Values settings";
}

export class VisualSettingsModel  extends formattingSettings.Model {
    public values: ValuesCardSetting = new ValuesCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.values];
}
```

Follow steps 4 - 8 from the [Build formatting pane](utils-formatting-model.md#build-formatting-pane-model-using-formattingmodel-utils) tutorial.

Here's the resulting pane:

![Screenshot of the Container.](media/format-pane/container.png)

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-dropdown.md
================================================
---
title: Dropdown formatting slice
description: This article describes how to implement Dropdown slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# Dropdown formatting slices

*Dropdown* slice is a simple formatting slice which is used to represent *enumeration* object type from `capabilities.json` file.
There are two dropdown slices - **ItemDropdown* and *AutoDropdown**.

Their difference is that for AutoDropdown slice you need to declare its enumeration items list under the appropriate object in `capabilities.json` file, and for ItemDropdown slice in the formatting settings class.

## Example: Dropdown implementation

In this example, we show how to build a Dropdown slices using formatting model utils.
The following tabs show examples of the *ItemDropdown* and *AutoDropdown* slices.

### [ItemDropdown](#tab/itemdropdown)

![Screenshot of an ItemDropdown.](media/format-pane/item-dropdown.png)

#### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "option": {
          "type": {
            "enumeration": []
          }
        },
      }
    }
  }
}
```

#### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import powerbi from "powerbi-visuals-api";
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

const positionOptions : powerbi.IEnumMember[] = [
    {value : "top", displayName : "Top"}, 
    {value : "bottom", displayName : "Bottom"},
    {value : "left", displayName : "Left"}, 
    {value : "right", displayName : "Right"}
];

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public option: formattingSettings.ItemDropdown = new formattingSettings.ItemDropdown({
        name: "option", // same as capabilities property name
        displayName: "Option",
        items: positionOptions,
        value: positionOptions[0] 
    });

    public slices: formattingSettings.Slice[] = [ this.option ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

### [AutoDropdown](#tab/autodropdown)

![Screenshot of an AutoDropdown.](media/format-pane/auto-dropdown.png)

#### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "position": {
          "type": {
            "enumeration": [
              {
                "value": "Left",
                "displayName": "Left"
              },
              {
                "value": "Right",
                "displayName": "Right"
              }
            ]
          }
        }
      }
    }
  }
}
```

#### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public position: formattingSettings.AutoDropdown = new formattingSettings.AutoDropdown({
        name: "position", // same as capabilities property name
        displayName: "Position",
        value: "Right"
    });

    public slices: formattingSettings.Slice[] = [ this.position ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

---

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-flagselection.md
================================================
---
title: FlagsSelection formatting slice
description: This article describes how to implement FlagsSelection slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# FlagsSelection formatting slices

*FlagsSelection* slice is a simple formatting slice which is used to represent *enumeration* object type from `capabilities.json` file.
There are two FlagSelection slices - **ItemFlagsSelection** and **AutoFlagsSelection**.

Their difference is that for AutoFlagsSelection slice you need to declare its enumeration items list under the appropriate object in `capabilities.json` file, and for ItemFlagsSelection in the formatting settings class.

## Example: FlagsSelection implementation

In this example, we show how to build a FlagsSelection slices using formatting model utils.
The following tabs show examples of the *ItemFlagsSelection* and *AutoFlagsSelection* slices.

### [ItemFlagsSelections](#tab/itemflagsselection)

![Screenshot of an ItemFlagsSelection.](media/format-pane/item-flagsselection.png)

#### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "itemFlag": {
          "type": {
            "enumeration": []
          }
        },
      }
    }
  }
}
```

#### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import powerbi from "powerbi-visuals-api";
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

const itemFlagOptions : powerbi.IEnumMember[] = [
    {value : "1", displayName : "Top"}, 
    {value : "2", displayName : "Bottom"},
    {value : "4", displayName : "Left"}, 
    {value : "8", displayName : "Right"}
];

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public itemFlag: formattingSettings.ItemFlagsSelection = new formattingSettings.ItemFlagsSelection({
        name: "itemFlag", // same as capabilities property name
        displayName: "Item flag",
        items: itemFlagOptions,
        value: "1"
    });

    public slices: formattingSettings.Slice[] = [ this.itemFlag ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

### [AutoFlagsSelection](#tab/autoflagsselection)

![Screenshot of an AutoFlagsSelection.](media/format-pane/auto-flagsselection.png)

#### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "autoFlag": {
          "type": {
            "enumeration": [
              {
                "value": "1",
                "displayName": "Left"
              },
              {
                "value": "2",
                "displayName": "Right"
              },
              {
                "value": "4",
                "displayName": "Top"
              },
              {
                "value": "8",
                "displayName": "Bottom"
              }
            ]
          }
        }
      }
    }
  }
}
```

#### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public autoFlag: formattingSettings.AutoFlagsSelection = new formattingSettings.AutoFlagsSelection({
        name: "autoFlag", // same as capabilities property name
        displayName: "Auto flag",
        value: "1"
    });

    public slices: formattingSettings.Slice[] = [ this.autoFlag ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

---

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-fontcontrol.md
================================================
---
title: FontControl formatting slice
description: This article describes how to implement FontControl slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# FontControl formatting slice

*FontControl* is a composite formatting slice that contains font related properties all together. It's used to represent *integer*, *fontControl*, and *bool* object types from `capabilities.json` file.

![Screenshot of the FontControl slice.](media/format-pane/font-control.png)

## Example: FontControl implementation

In this example, we show how to build a *FontControl* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "fontFamily": {
          "type": {
            "formatting": {
              "fontFamily": true
            }
          }
        },
        "fontSize": {
          "type": {
            "formatting": {
              "fontSize": true
            }
          }
        },
        "bold": {
          "type": {
            "bool": true
          }
        },
        "italic": {
          "type": {
            "bool": true
          }
        },
        "underline": {
          "type": {
            "bool": true
          }
        },
      }
    }
  }
}
```

### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public fontFamily: formattingSettings.FontPicker = new formattingSettings.FontPicker({
        name: "fontFamily", // same as capabilities property name
        value: "Arial, sans-serif"
    });

    public fontSize: formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "fontSize", // same as capabilities property name
        value: 11
    });

    public bold: formattingSettings.ToggleSwitch = new formattingSettings.ToggleSwitch({
        name: "bold", // same as capabilities property name
        value: false
    });

    public italic: formattingSettings.ToggleSwitch = new formattingSettings.ToggleSwitch({
        name: "italic", // same as capabilities property name
        value: false
    });

    public underline: formattingSettings.ToggleSwitch = new formattingSettings.ToggleSwitch({
        name: "underline", // same as capabilities property name
        value: false
    });

    public font: formattingSettings.FontControl = new formattingSettings.FontControl({
        name: "font",   // must be unique within the same object
        displayName: "Font",
        fontFamily: this.fontFamily,
        fontSize: this.fontSize,
        bold: this.bold,           //optional
        italic: this.italic,       //optional
        underline: this.underline  //optional
    });

    public slices: formattingSettings.Slice[] = [ this.font ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-fontpicker.md
================================================
---
title: FontPicker formatting slice
description: This article describes how to implement FontPicker slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# FontPicker formatting slice

*FontPicker* is a simple formatting slice which is used to represent *fontFamily* object type from `capabilities.json` file.

![Screenshot of the FontPicker slice.](media/format-pane/font-picker.png)

## Example: FontPicker implementation

In this example, we show how to build a *FontPicker* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "fontFamily": {
          "type": {
            "formatting": {
              "fontFamily": true
            }
          }
        }
      }
    }
  }
}
```

### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public fontFamily: formattingSettings.FontPicker = new formattingSettings.FontPicker({
        name: "fontFamily", // same as capabilities property name
        displayName: "Font family",
        value: "Arial, sans-serif"
    });

    public slices: formattingSettings.Slice[] = [ this.fontFamily ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-group.md
================================================
---
title: Formatting settings group
description: This article describes how to implement Formatting settings group in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# Formatting settings group

A *formatting settings group* is the secondary-level properties grouping container. Some formatting settings cards can have groups inside. Groups consist of slices and can be expanded/collapsed.

## Formatting settings group implementation

In this example, we show how to build a custom visual formatting model with one [composite card](formatting-model-card.md?tabs=compositeCard#example-formatting-settings-card-implementation) and two *groups* using [formattingmodel util](utils-formatting-model.md).
The card has two groups:

* **LabelsSettingsGroup** with two simple properties
  * Precision
  * Display units
* **IconsSettingsGroup** with one simple property
  * Opacity

### Prerequisites

To build a formatting model with composite container using formattingmodel utils, you need to

* Update powerbi-visuals-api version to 5.1 and higher.
* Install powerbi-visuals-utils-formattingmodel.
* Initialize [formattingSettingsService](utils-formatting-model.md#formatting-settings-service).
* Initialize [formattingSettingsModel class](utils-formatting-model.md#formatting-settings-model).

### Example

First, add objects into the `capabilities.json` file:

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "values": {
      "properties": {
        "show": {
          "type": {
            "bool": true
          }
        },
        "displayUnits": {
          "type": {
            "formatting": {
              "labelDisplayUnits": true
            }
          }
        },
        "precision": {
          "type": {
            "integer": true
          }
        },
        "opacity": {
          "type": {
            "integer": true
          }
        }
      }
    },
  }
}
```

Then, insert the following code fragment into the settings file:

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsSettingsGroup extends formattingSettings.SimpleCard {
    public displayUnits: formattingSettings.AutoDropdown = new formattingSettings.AutoDropdown({
        name: "displayUnits",
        displayName: "Display units",
        value: 0
    });

    public precision: formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "precision",
        displayName: "Precision",
        value: 2
    });

    name: string = "labelsGroup";
    displayName: string = "Labels group";
    collapsible: boolean = false;
    slices: formattingSettings.Slice[] = [this.displayUnits, this.precision];
}

class IconsSettingsGroup extends formattingSettings.SimpleCard {
    public opacity: formattingSettings.Slider = new formattingSettings.Slider({
        name: "opacity",
        displayName: "Opacity",
        value: 50
    });

    name: string = "iconsGroup";
    displayName: string = "Icons group";
    slices: formattingSettings.Slice[] = [this.opacity];
}

class ValuesCardSetting extends formattingSettings.CompositeCard {
    public show: formattingSettings.ToggleSwitch = new formattingSettings.ToggleSwitch({
        name: "show",
        value: true
    });

    public labelsGroup: LabelsSettingsGroup = new LabelsSettingsGroup();
    public iconsGroup: IconsSettingsGroup = new IconsSettingsGroup();

    topLevelSlice: formattingSettings.ToggleSwitch = this.show;
    name: string = "values";
    displayName: string = "Values settings";
    groups: formattingSettings.Group[] = [this.labelsGroup, this.iconsGroup];
}

export class VisualSettingsModel  extends formattingSettings.Model {
    public values: ValuesCardSetting = new ValuesCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.values];
}
```

Follow steps 4 - 8 from the [Build formatting pane](utils-formatting-model.md#build-formatting-pane-model-using-formattingmodel-utils) tutorial.

Here's the resulting pane:

![Screenshot of a Group.](media/format-pane/group.png)

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-marginpadding.md
================================================
---
title: MarginPadding formatting slice
description: This article describes how to implement MarginPadding slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# MarginPadding formatting slice

*MarginPadding* is a composite formatting slice that contains left, right, top and bottom padding properties all together. It's used to represent *numeric* or *integer* object types from `capabilities.json` file.

![Screenshot of the MarginPadding slice.](media/format-pane/margin-padding.png)

## Example: MarginPadding implementation

In this example, we show how to build a *MarginPadding* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "left": {
          "type": {
            "numeric": true
          }
        },
        "right": {
          "type": {
            "numeric": true
          }
        },
        "top": {
          "type": {
            "numeric": true
          }
        },
        "bottom": {
          "type": {
            "numeric": true
          }
        }
      }
    }
  }
}
```

### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public left : formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "left", // same as capabilities property name
        displayName: "Left",
        value: 50
    });

    public right : formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "right", // same as capabilities property name
        displayName: "Right",
        value: 50
    });

    public top : formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "top", // same as capabilities property name
        displayName: "Top",
        value: 50
    });

    public bottom : formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "bottom", // same as capabilities property name
        displayName: "Bottom",
        value: 50
    });

    public marginPadding: formattingSettings.MarginPadding = new formattingSettings.MarginPadding({
        name: "margin", // must be unique within the same object
        displayName: "Margin",
        left: this.left,
        right: this.right,
        top: this.top,
        bottom: this.bottom
    });

    public slices: formattingSettings.Slice[] = [ this.marginPadding ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-numupdown.md
================================================
---
title: NumUpDown formatting slice
description: This article describes how to implement NumUpDown slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# NumUpDown formatting slice

*NumUpDown* is a simple formatting slice which is used to represent *numeric* and *integer* object types from `capabilities.json` file.

![Screenshot of the NumUpDown slice.](media/format-pane/num-up-down.png)

## Example: NumUpDown implementation

In this example, we show how to build a *NumUpDown* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "max": {
          "type": {
            "integer": true
          }
        }
      }
    }
  }
}
```

### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public maxValue : formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "max", // same as capabilities property name
        displayName: "Max value",
        value: 50
    });
    
    public slices: formattingSettings.Slice[] = [ this.maxValue ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

### Validators (optional)

You can validate *NumUpDown* slice input by specifying *options* property as in the example:

```typescript
import powerbi from "powerbi-visuals-api";
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public maxValue : formattingSettings.NumUpDown = new formattingSettings.NumUpDown({
        name: "max", // same as capabilities property name
        displayName: "Max value",
        value: 50, // default slice value
        options: // optional input value validator 
        { 
            maxValue: {
                type: powerbi.visuals.ValidatorType.Max,
                value: 80
            },
            minValue: {
                type: powerbi.visuals.ValidatorType.Min,
                value: 30
            }
        }
    });
    
    public slices: formattingSettings.Slice[] = [ this.maxValue ];
}
```

A warning message is displayed if the passed value is out of the acceptable range.

![Screenshot of the NumUpDown validation.](media/format-pane/num-up-down-warnings.png)

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-slider.md
================================================
---
title: Slider formatting slice
description: This article describes how to implement Slider slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# Slider formatting slice

*Slider* is a simple formatting slice which is used to represent *numeric* and *integer* object types from `capabilities.json` file.

![Screenshot of the ToggleSwitch slice.](media/format-pane/slider.png)

## Example: Slider implementation

In this example, we show how to build a *Slider* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "min": {
          "type": {
            "numeric": true
          }
        }
      }
    }
  }
}
```

### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public minValue : formattingSettings.Slider = new formattingSettings.Slider({
        name: "min", // same as capabilities property name
        displayName: "Min value",
        value: 50
    });
    
    public slices: formattingSettings.Slice[] = [ this.minValue ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

### Validators (optional)

You can validate *Slider* slice input by specifying *options* property as in the example:

```typescript
import powerbi from "powerbi-visuals-api";
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public minValue : formattingSettings.Slider = new formattingSettings.Slider({
        name: "min", // same as capabilities property name
        displayName: "Min value",
        value: 50,
        options: // optional input value validator  
        {
            maxValue: {
                type: powerbi.visuals.ValidatorType.Max,
                value: 80
            },
            minValue: {
                type: powerbi.visuals.ValidatorType.Min,
                value: 30
            }
        }
    });
    
    public slices: formattingSettings.Slice[] = [ this.minValue ];
}
```

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-textarea.md
================================================
---
title: TextArea formatting slice
description: This article describes how to implement TextArea slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# TextArea formatting slice

*TextArea* is a simple formatting slice which is used to represent *text* object type from `capabilities.json` file.

![Screenshot of the TextArea slice.](media/format-pane/text-area.png)

## Example: TextArea implementation

In this example, we show how to build a *TextArea* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "titleDescription": {
          "type": {
            "text": true
          }
        }
      }
    }
  }
}
```

### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public titleDescription: formattingSettings.TextArea = new formattingSettings.TextArea({
        name: "titleDescription", // same as capabilities property name
        displayName: "Title description area",
        value: "",
        placeholder: "Title description area placeholder"
    });

    public slices: formattingSettings.Slice[] = [ this.titleDescription ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-textinput.md
================================================
---
title: TextInput formatting slice
description: This article describes how to implement TextInput slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# TextInput formatting slice

*TextInput* is a simple formatting slice which is used to represent *text* object type from `capabilities.json` file.

![Screenshot of the TextInput slice.](media/format-pane/text-input.png)

## Example: TextInput implementation

In this example, we show how to build a *TextInput* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "title": {
          "type": {
            "text": true
          }
        }
      }
    }
  }
}
```

### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public title: formattingSettings.TextInput = new formattingSettings.TextInput({
        name: "title", // same as capabilities property name
        displayName: "Title",
        value: "",
        placeholder: "Title placeholder"
    });
    
    public slices: formattingSettings.Slice[] = [ this.title ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/formatting-model-toggleswitch.md
================================================
---
title: ToggleSwitch formatting slice
description: This article describes how to implement ToggleSwitch slice in custom visuals using the formatting model utils
author: kullJul
ms.author: v-ikulagina
ms.reviewer: juliacawthra
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/12/2024
---

# ToggleSwitch formatting slice

*ToggleSwitch* is a simple formatting slice which is used to represent *bool* object type from `capabilities.json` file.

![Screenshot of the ToggleSwitch slice.](media/format-pane/toggle-switch.png)

## Example: ToggleSwitch implementation

In this example, we show how to build a *ToggleSwitch* slice using formatting model utils.

### Capabilities object

Insert the following JSON fragment into the `capabilities.json` file.

```json
{
  // ... same level as dataRoles and dataViewMappings
  "objects": {
    "labels": {
      "properties": {
        "show": {
          "type": {
            "bool": true
          }
        }
      }
    }
  }
}
```

### Formatting model class

Insert the following code fragment into the settings file.

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public showLabels: formattingSettings.ToggleSwitch = new formattingSettings.ToggleSwitch({
        name: "show", // same as capabilities property name
        displayName: "Show",
        value: true
    });
    
    public slices: formattingSettings.Slice[] = [ this.showLabels ];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

### More options

ToggleSwitch slice can also be used as a top-level card toggle.

![Screenshot of the top-level ToggleSwitch slice.](media/format-pane/toggle-switch-top-level.png)

To make ToggleSwitch top-level, remove slice from the **slices** array and add the following line to the card settings class:

```typescript
topLevelSlice: formattingSettings.ToggleSwitch = this.showLabels;
```

Your final formatting settings file should match this example:

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

class LabelsCardSetting extends formattingSettings.SimpleCard {
    name: string = "labels"; // same as capabilities object name
    displayName: string = "Labels";

    public showLabels: formattingSettings.ToggleSwitch = new formattingSettings.ToggleSwitch({
        name: "show", // same as capabilities property name
        displayName: "Show",
        value: true
    });
    
    topLevelSlice: formattingSettings.ToggleSwitch = this.showLabels;
    public slices: formattingSettings.Slice[] = [];
}

export class VisualSettings extends formattingSettings.Model {
    public labels: LabelsCardSetting = new LabelsCardSetting();
    public cards: formattingSettings.SimpleCard[] = [this.labels];
}
```

## Related content

* [Format pane](format-pane-general.md)
* [Formatting model utils](utils-formatting-model.md)



================================================
FILE: powerbi-docs/developer/visuals/funnel-plot-from-r.md
================================================
---
title: Build a funnel plot from R script to R visual
description: This tutorial gives step by step instructions on how to build a funnel plot from R script to R Power BI visual.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: tutorial
ms.date: 06/17/2024
#customer intent: As a Power BI visual developer, I want to learn how to build a funnel plot from R script to R visual so that I can compare and analyze various sets of data.
---

# Tutorial: Build a funnel plot from R script to R visual

This article describes how to build a funnel plot using R script in R visual step by step. Source files are available for download under each set of steps.

In this article, you learn how to create:

> [!div class="checklist"]
>
> - an R-script for RStudio
> - an R-visual in Power BI
> - a PNG-based R-powered Visual in Power BI
> - a HTML-based R-powered Visual in Power BI

The funnel plot provides an easy way to consume, interpret, and show the amount of expected variation. The **funnel** is formed using confidence limits and outliers are shown as dots outside the funnel.

In this example the funnel plot is used to compare and analyze various sets data.

## Prerequisites

- Get a [Microsoft Fabric subscription](/fabric/enterprise/licenses). Or, sign up for a free [Microsoft Fabric trial](/fabric/get-started/fabric-trial).

- Install [pbiviz tools](./environment-setup.md#install-pbiviz).

## Build an R script with semantic model

1. Download a [minimal R script](https://github.com/PowerBi-Projects/PowerBI-visuals/raw/master/RVisualTutorial/TutorialFunnelPlot/chapter1_R/script_R_v1_00.r) and its data table, [dataset.csv](https://github.com/PowerBi-Projects/PowerBI-visuals/raw/master/RVisualTutorial/TutorialFunnelPlot/chapter1_R/dataset.csv).

1. Next, edit the script to mirror [this script](https://github.com/PowerBi-Projects/PowerBI-visuals/raw/master/RVisualTutorial/TutorialFunnelPlot/chapter1_R/script_R_v1_01.r). This adds input error handling and user parameters to control the plot's appearance.

## Build a report

Next, edit the script to mirror [this script](https://github.com/PowerBi-Projects/PowerBI-visuals/raw/master/RVisualTutorial/TutorialFunnelPlot/chapter2_Rvisual/script_RV_v2_00.r). This loads *dataset.csv* instead of *read.csv* into the Power BI desktop workspace and creates a **Cancer Mortality** table. See the results in the following [PBIX file](https://github.com/PowerBi-Projects/PowerBI-visuals/raw/master/RVisualTutorial/TutorialFunnelPlot/chapter2_Rvisual/funnelPlot_Rvisual.pbix).

> [!NOTE]
> The `dataset` is a hard-coded name for the input `data.frame` of any R-visual. 

## Create an R-powered visual and package in R code

1. Run the following command to create a new R-powered visual:

   ```bash
   pbiviz new funnel-visual -t rvisual
   cd funnel-visual
   npm install 
   pbiviz package
   ```

   This command creates the folder *funnel-visual* with initial template visual (`-t` for **template**). The PBIVIZ can be found in the *dist* folder, the R-code inside *script.r* file. Try to import it into Power BI and see what happens.

1. Edit *script.r* file and replace the contents with your previous script.

1. Edit *capabilities.json* and replace the string `Values` with `dataset`. This replaces the name of "Role" in the template to be like in R-code.

   ![Screenshot shows a diff comparison of the change in the json file.](./samples/funnel-plot/chapter-3/funnel-r-visual-v01/capabilities-changes.PNG)

1. *(optional)* Edit *dependencies.json* and add a section for each R package required by the R script. This tells Power BI to automatically import these packages when the visual is loaded for the first time.

   ![Screenshot shows a diff comparison where content has been added to the cranPackages items.](./samples/funnel-plot/chapter-3/funnel-r-visual-v01/dependencies-changes.PNG)

1. Repackage the visual using the `pbiviz package` command and try to import it into Power BI.

> [!NOTE]
> See [PBIX](https://github.com/PowerBi-Projects/PowerBI-visuals/blob/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelPlot_RCustomVisual.pbix) and [source code](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelRvisual_v01/) for download.

## Make R-based visual improvements

The visual isn't yet user-friendly because the user has to know the order of columns in the input table.

1. Divide the input field `dataset` into three fields (roles): `Population`, `Number`, and `Tooltips`

   ![CV01to02](./media/funnel-plot/diagram-one.PNG)

1. Edit *capabilities.json* and replace the `dataset` role with the three new roles, or download [capabilities.json](https://github.com/PowerBi-Projects/PowerBI-visuals/raw/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelRvisual_v02/capabilities.json).

   You'll need to update sections: `dataRoles` and `dataViewMappings`, which define names, types, tooltips, and maximum columns for each input field.

   ![before and after](./samples/funnel-plot/chapter-3/funnel-r-visual-v02/capabilities-before-vs-after.png)
   
   For more information, see [capabilities](./capabilities.md).

1. Edit *script.r* to support `Population`, `Number` and `Tooltips` as input dataframes instead of `dataset`, or download [script.r](https://github.com/PowerBi-Projects/PowerBI-visuals/raw/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelRvisual_v02/script.r).

   ![script](./samples/funnel-plot/chapter-3/funnel-r-visual-v02/script-r-before-vs-after.png)

   > [!TIP]
   > To follow the changes in R-script, search for comment blocks: 
   > 
   > ```r
   > #RVIZ_IN_PBI_GUIDE:BEGIN: Added to enable visual fields
   > ...
   > #RVIZ_IN_PBI_GUIDE:END: Added to enable visual fields
   > 
   > #RVIZ_IN_PBI_GUIDE:BEGIN: Removed to enable visual fields 
   > ...
   > #RVIZ_IN_PBI_GUIDE:BEGIN: Removed to enable visual fields
   > ```

1. Repackage the visual using the `pbiviz package` command and try to import it into Power BI.

> [!NOTE]
> See [PBIX](https://github.com/PowerBi-Projects/PowerBI-visuals/raw/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelPlot_RCustomVisual.pbix) and [source code](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelRvisual_v02) for download.

## Add user parameters

1. Add capabilities for the user to control colors and sizes of visual elements including internal parameters from the UI.

   ![Screenshot shows two version of the tools pane with options added to the version on the right.](./media/funnel-plot/diagram-two.PNG)

1. Edit *capabilities.json* and update the `objects` section. Here we define names, tooltips and types of each parameter, and also decide on the partition of parameters into groups (three groups in this case).

   download [capabilities.json](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelRvisual_v03/capabilities.json), see [object properties](./objects-properties.md) for more information

   ![capabilities](./samples/funnel-plot/chapter-3/funnel-r-visual-v03/capabilities-before-after.PNG)

1. Edit *src/settings.ts* to mirror [this settings.ts](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelRvisual_v03/src/settings.ts). This file is written in TypeScript.  

   Here you'll find two blocks of the code added to:
   - Declare new interface to hold the property value
   - Define a member property and default values

   ![settings](./samples/funnel-plot/chapter-3/funnel-r-visual-v03/settings-ts-before-after.PNG)

1. Edit *script.r* to mirror [this script.r](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelRvisual_v03/script.r). This adds support for the parameters in the UI by adding `if.exists` calls per user-parameter.

   > [!TIP]
   > To follow the changes in R-script, search for comments:
   >
   > ```r
   > #RVIZ_IN_PBI_GUIDE:BEGIN:Added to enable user parameters
   >  ...
   > #RVIZ_IN_PBI_GUIDE:END:Added to enable user parameters
   >
   > #RVIZ_IN_PBI_GUIDE:BEGIN:Removed to enable user parameters 
   >  ...
   > #RVIZ_IN_PBI_GUIDE:END:Removed to enable user parameters
   > ```

   ![script before and after](https://raw.githubusercontent.com/PowerBi-Projects/PowerBI-visuals/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelRvisual_v03/script_r_before_after_1.png)

   You can decide not to expose the parameters to the UI, like we did.  

1. Repackage the visual using the `pbiviz package` command and try to import it into Power BI.

> [!NOTE]
> See [PBIX](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelPlot_RCustomVisual.pbix) and [source code](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter3_RCustomVisual/funnelRvisual_v03/) for download.

> [!TIP]
> Here we added parameters of several types (boolean, numeric, string, and color) all at once. For a simple case, please see [this example](https://github.com/PowerBi-Projects/PowerBI-visuals/blob/master/RVisualTutorial/PropertiesPane.md) on how to add a single parameter. 

## Convert visual to RHTML-based visual

Since the resulting visual is PNG-based, it isn't responsive to mouse hover, can't be zoomed in on, and so on, so we need to convert it to an HTML-based visual. We'll create an empty R-powered HTML-based Visual template, then copy some scripts from the PNG-based project.

1. Run the command:

   ```bash
   pbiviz new funnel-visual-HTML -t rhtml
   cd funnel-visual-HTML
   npm install 
   pbiviz package
   ```

1. Open *capabilities.json* and note the `"scriptOutputType":"html"` line.

1. Open *dependencies.json* and note the names of the listed R-packages.

1. Open *script.r* and note the structure. You can open and run it in RStudio since it doesn't use external input. 

   This creates and saves *out.html*. This file is self-contained (with no external dependencies) and defines the graphics inside the HTML widget. 

   > [!IMPORTANT]
   > For `htmlWidgets` users, R-utilities are provided in the [r_files folder](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter4_RHTMLCustomVisual/funnelRHTMLvisual_v01/r_files) to help convert `plotly` or `widget` objects into self-content HTML. 
   > 
   > This version of R-powered visual also supports the `source` command (unlike previous types of visuals), to make your code more readable.   
 
1. Replace *capabilities.json* with the *capabilities.json* from the previous step, or download [capabilities.json](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter4_RHTMLCustomVisual/funnelRHTMLvisual_v01/capabilities.json).

   Be sure to keep:

   `"scriptOutputType": "html"`

1. Merge the latest version of *script.r* with the *script.r* from the template, or download [script.r](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter4_RHTMLCustomVisual/funnelRHTMLvisual_v01/script.r).

   The new script uses the `plotly` package to convert the **ggplot** object into a **plotly** object, then the `htmlWidgets` package to save it to an HTML file. 

   Most of the utility functions are moved to [_r_files/utils.r_](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter4_RHTMLCustomVisual/funnelRHTMLvisual_v01/r_files/utils.r) and the `generateNiceTooltips` function is added for the appearance of the **plotly** object.

   ![1](./samples/funnel-plot/chapter-4/RHTML-v01/script-before-after-1.PNG)
   
   ![2](./samples/funnel-plot/chapter-4/RHTML-v01/script-before-after-2.PNG)

   > [!TIP]
   > To follow the changes in R-script, search for comments:
   > 
   > ```r
   > #RVIZ_IN_PBI_GUIDE:BEGIN:Added to create HTML-based 
   >  ...
   > #RVIZ_IN_PBI_GUIDE:BEGIN:Added to create HTML-based
   >
   > #RVIZ_IN_PBI_GUIDE:BEGIN:Removed to create HTML-based  
   > ...
   > #RVIZ_IN_PBI_GUIDE:BEGIN:Removed to create HTML-based
   > ```

1. Merge the latest version of *dependencies.json* with the *dependencies.json* from the template, to include new R-package dependencies, or download [dependencies.json](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter4_RHTMLCustomVisual/funnelRHTMLvisual_v01/dependencies.json).

1. Edit *src/settings.ts* the same way from previous steps.

1. Repackage the visual using the `pbiviz package` command and try to import it into Power BI.

> [!NOTE]
> See [PBIX and source code](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter4_RHTMLCustomVisual/funnelRHTMLvisual_v01) for download.

## Build additional examples

1. Run the following command to create an empty project: 

   ```bash
   pbiviz new example -t rhtml
   cd example
   npm install 
   pbiviz package
   ```

1. Take code from this [showcase](http://www.htmlwidgets.org/showcase_networkD3.html) and make the highlighted changes:

   ![Highlighted changes](./media/funnel-plot/diagram-three.PNG)

1. Replace your template's *script.r* and run `pbiviz package` again. Now the visual is included in your Power BI report!

## Tips and tricks

* We recommend that developers edit *pbiviz.json* to store correct metadata, such as **version**, **email**, **name**, **license type**, and so on.

   > [!IMPORTANT]
   > The **guid** field is the unique identifier for a visual. If you create a new project for each visual, the GUID will be also be different. It's only the same when using an old project copied to a new visual, which you shouldn't do.

* Edit [*assets/icon.png*](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter4_RHTMLCustomVisual/funnelRHTMLvisual_v01/assets/icon.png) to create unique icons for your visual. 

* To debug R-code in RStudio using the same data as in your Power BI report, add the following to the beginning of the R-script (edit the `fileRda` variable):

   ```r
   #DEBUG in RStudio
   fileRda = "C:/Users/yourUserName/Temp/tempData.Rda"
   if(file.exists(dirname(fileRda)))
   {
     if(Sys.getenv("RSTUDIO")!="")
       load(file= fileRda)
     else
       save(list = ls(all.names = TRUE), file=fileRda)
   }
   ```

   This saves the environment from a Power BI report and loads it into RStudio. 

* You don't need to develop R-powered Visuals from scratch with code available on [GitHub](https://github.com/Microsoft?utf8=%E2%9C%93&q=PowerBI&type=&language=R). You can select the visual to use as a template and copy the code into a new project.

   For example, try using the [spline custom visual](https://github.com/microsoft/PowerBI-visuals-spline).

* Each R Visual applies the `unique` operator to its input table. To avoid identical rows being removed, consider adding an extra input field with a unique ID and ignore it in the R code.   

* If you have a Power BI account, use the Power BI service to develop a visual [on-the-fly](./develop-circle-card.md) instead of repackaging them with the `pbiviz package` command.

### HTML widgets gallery
Explore visuals in the [HTML widgets gallery](http://gallery.htmlwidgets.org/) for use in your next visual. To make things easy, we've created a [visuals project repo](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter4_RHTMLCustomVisual/multipleRHTML) with over 20 interactive HTML visuals to choose from!

> [!TIP]
> To switch between html widgets use **Format** > **Settings** > **Type**. Try it out with [this PBIX file](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/master/RVisualTutorial/TutorialFunnelPlot/chapter4_RHTMLCustomVisual/multipleRHTML/assets/sample.pbix). 

#### To use a sample for your visual

1. Download the entire folder.
1. Edit *script.r* and *dependencies.json* to keep only one widget.
1. Edit *capabilities.json* and *settings.ts* to remove the `Type` selector.
1. Change `const updateHTMLHead: boolean = true;` to `false` in *visual.ts*. *(for better performance)*
1. Change metadata in *pbiviz.json*, most importantly the `guid` field.
1. Repackage and continue to customize the visual as wanted. 

![Screenshot shows six widgets discussed earlier in this article.](./media/funnel-plot/diagram-four.PNG)

![Screenshot shows six more widgets discussed earlier in this article.](./media/funnel-plot/diagram-five.PNG)

> [!NOTE]
> Not all widgets in this project are supported by the service.

## Related content

To learn more, see additional Power BI tutorials, [Developing a Power BI circle card visual](./develop-circle-card.md) and [R visuals](../../visuals/service-r-visuals.md).

Learn how to [develop and submit visuals](https://powerbi.microsoft.com/documentation/powerbi-developer-office-store/) to the [Office Store (gallery)](https://store.office.com/appshome.aspx?ui=en-US&rs=en-US&ad=US&clickedfilter=OfficeProductFilter%3aPowerBI&productgroup=PowerBI), or for further examples, see the [R-script showcase](https://community.powerbi.com/t5/R-Script-Showcase/bd-p/RVisuals)



================================================
FILE: powerbi-docs/developer/visuals/guidelines-powerbi-visuals.md
================================================
---
title: Guidelines for publishing Power BI custom visuals
description: Learn about the guidelines to publish Power BI custom visuals to Microsoft AppSource so that others can discover and use them.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 07/02/2024
#customer intent: As a Power BI visual developer, I want to learn how to publish Power BI custom visuals to Microsoft AppSource so that others can discover and use them.
---

# Guidelines for publishing Power BI custom visuals

Before you [publish Power BI custom visuals to Microsoft commercial marketplace](office-store.md) for others to discover and use, follow these guidelines to create a great experience for your users.

## Power BI visuals: Free or for purchase

Power BI visuals submitted to the [Commercial Marketplace](/azure/marketplace/overview) (Microsoft AppSource) can be made available for free, or you can add the tag *additional purchase may be required*. Visuals with the *additional purchase may be required* designation are similar to in-app purchase (IAP) add-ins.

Like the free Power BI visuals, an IAP Power BI visual can also be certified. Before submitting your IAP Power BI visual for certification, make sure it complies with the [certification requirements](power-bi-custom-visuals-certified.md).

### Power BI visuals with IAP features

An IAP Power BI visual is a *free* visual that offers *free features*. It also has some advanced features available for a fee. In the Power BI visual's description, developers must notify users about features that require additional purchases to operate them.

The transactability and license management of these visuals are the responsibility of the ISV. They can be managed using any platform, but we recommend Microsoft's [Licensing API](./licensing-api.md). With the Licensing API, licensed visuals are purchased through [AppSource](./custom-visual-licenses.md) and customers can manage licenses in the [Microsoft 365 admin portal](https://admin.microsoft.com/Adminportal/Home?#/homepage). For more information about license management, see [Frequently asked questions about Custom visual license management](./licensing-faq.yml).

For more information, see [our Commercial Marketplace certification policy](/legal/marketplace/certification-policies).

>[!IMPORTANT]  
> If you update your Power BI visual from *free* to *additional purchase may be required*, customers must receive the same level of free functionality as before the update. You can add optional advanced paid features in addition to the existing free features.

### Watermarks

You can use watermarks to allow customers to continue using the IAP advanced features without paying.

Watermarks let you showcase the full functionality of the Power BI visual to customers before they make a purchase.

Only use watermarks on **paid** features used without a valid license. Watermarks aren't allowed on free features of IAP visuals.

### Pop-up window

Use a pop-up window to explain how to purchase a license when customers use an invalid (or expired) license with your Power BI IAP visual.

### Submission process

Follow the [submission process](./office-store.md#submit-or-update-your-custom-visual-to-appsource), then navigate to the **Offer setup** tab. Select the **My product requires the purchase of a service** check box.

After the Power BI visual is validated and approved, the Microsoft AppSource listing for the IAP Power BI visual displays that *more purchase may be required* under the pricing options.

## Context menu

The context menu is the menu that displays when the user right-clicks inside a visual.
All Power BI visuals should enable the context menu to give users a unified experience. For more information, see [Add a context menu to your Power BI visual](context-menu.md).

:::image type="content" source="media/guidelines-powerbi-visuals/context-menu.png" alt-text="Screenshot of a Power BI visual context menu.":::

## Commercial logo

This section describes the specifications for adding commercial logos in Power BI visuals. Commercial logos aren't required. If you add them, make sure they follow these guidelines.

> [!NOTE]
>
> * In this article, the term commercial logo refers to any commercial company icon. See the following pictures.
> * The Microsoft commercial logo is used in this article only as an example. Use your own commercial logo with your Power BI visual.

> [!IMPORTANT]
> Commercial logos are allowed in *edit* mode only. Commercial logos can't be displayed in view mode.

### Commercial logo type

There are three types of commercial logos:

* **Logo**: Two elements locked together, an icon and a name.

   :::image type="icon" source="media/guidelines-powerbi-visuals/microsoft-logo.png":::

* **Symbol**: A graphic without any text.

   :::image type="icon" source="media/guidelines-powerbi-visuals/microsoft-symbol.png":::

* **Logotype**: A text logo without an icon.

    :::image type="icon" source="media/guidelines-powerbi-visuals/microsoft-logotype.png":::

### Commercial logo color

When using a commercial logo, the color of the logo must be grey (hex color #C8C8C8). Don't add effects such as gradients to the commercial logo.

* **Logo**

    :::image type="icon" source="media/guidelines-powerbi-visuals/grey-microsoft-logo.png":::

* **Symbol**

    :::image type="icon" source="media/guidelines-powerbi-visuals/grey-microsoft-symbol.png":::

* **Logotype**

   :::image type="icon" source="media/guidelines-powerbi-visuals/grey-microsoft-logotype.png":::

> [!TIP]
>
> * If your Power BI visual contains a graphic, consider adding a white background with 10 px margins to your logo.
> * Consider adding dropshadow to your logo (30% opacity black).

### Commercial logo size

A Power BI visual uses two commercial logos - one for the offer details page and one for the search page. Provide the large logo in PNG format at 300 x 300 px. The Partner Center uses this logo to generate a smaller logo for the search page. You can optionally replace this logo with a different image later.

### Commercial logo behavior

Commercial logos are only allowed in edit mode. When selected, a commercial logo can only include the following functionality:

* Selecting the commercial logo redirects customers to your website.

* Selecting the commercial logo opens a pop-up window with additional information divided into two sections.

  * A marketing area for the commercial logo, a visual, and market ratings.
  * An information area for information and links.

### Limitations regarding logos

* Commercial logos can't be displayed in view mode.

* If your Power BI visual includes informative icons (i) in reading mode, they should comply with the color, size, and location of the commercial logo, as described earlier.

* Avoid a colorful or a black commercial logo. The commercial logo must be grey (hex color #C8C8C8).

    :::image type="icon" source="media/guidelines-powerbi-visuals/no-color-logo.png"::: :::image type="icon" source="media/guidelines-powerbi-visuals/black-logo.png":::

* Avoid a commercial logo with effects such as gradients or strong shadows.

     :::image type="icon" source="media/guidelines-powerbi-visuals/no-style-logo.png":::

## Best practices

When publishing a Power BI visual, consider the following recommendations to give customers the best possible experience.

* Create a [landing page](landing-page.md) that provides information about your Power BI visual. Include details like how to use the visual and where to purchase the license. A meaningful landing page helps report creators use the visual correctly and easily.
* Don't include videos that are automatically triggered.
* Add only material that improves the customer's experience, such as information or links to license purchasing details and how to use IAP features.
* Add the license key or token related fields at the top of the format pane for the customer's convenience.
* Submit a short screen-recording video that shows how to use the visual.
* Submit a detailed description of the visual's functionality. Include information about supported features such as [high contrast](high-contrast-support.md), [report page tooltip](add-tooltips.md), and [drill down](drill-down-support.md).
* Check the quality of your code. Make sure it's up to standard, including unhandled exceptions.
* Update your visual using the [latest API](https://www.npmjs.com/package/powerbi-visuals-api).

## FAQ

For more information about Power BI visuals, see [Frequently asked questions about Power BI visuals with extra purchases](/power-bi/developer/visuals/power-bi-custom-visuals-faq#visuals-with-additional-purchases).

## Related content

Learn how you can publish your Power BI visual to for others to discover and use.

>[Publish Power BI visuals](office-store.md)

>[Get a Power BI visual certified](power-bi-custom-visuals-certified.md)



================================================
FILE: powerbi-docs/developer/visuals/hierarchy-filter-api.md
================================================
---
title: The Hierarchical Identity Filters API
description: This article discusses how Power BI visuals can filter visuals based on several attributes for better embedded Power BI insights.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 06/17/2024
#customer intent: As a Power BI visual developer, I want to learn how to use the hierarchical identity filters API to filter data on multiple fields at a time based on data points that use a hierarchy structure.
---

# The hierarchical identity filters API in Power BI visuals

The **Hierarchy Identity filter API** enables visuals that use [Matrix DataView Mapping](./dataview-mappings.md#matrix-data-mapping) to filter data on multiple fields at a time based on data points that use a [hierarchy structure](./dataview-mappings.md#hierarchical-structure-of-matrix-data).

This API is useful in the following scenarios:

* Filtering hierarchies based on data points
* Custom visuals that use semantic models with group on keys

> [!NOTE]
> The Hierarchy Identity filter API is available from API version **5.9.0**

The filter interface is shown in the following code:

```typescript
interface IHierarchyIdentityFilter<IdentityType> extends IFilter {
    target: IHierarchyIdentityFilterTarget;
    hierarchyData: IHierarchyIdentityFilterNode<IdentityType>[];
}
```

* *$schema*: `https://powerbi.com/product/schema#hierarchyIdentity` (inherited from IFilter)

* *filterType*: FilterType.HierarchyIdentity (inherited from IFilter)

* *target*: Array of relevant columns in the query. Currently only a single role is supported; therefore, the target isn't required and should be empty.

* *hierarchyData*: the selected and unselected items in a hierarchy tree where each `IHierarchyIdentityFilterNode<IdentityType>` represents a single value selection.

```typescript
type IHierarchyIdentityFilterTarget = IQueryNameTarget[]

interface IQueryNameTarget {
    queryName: string;
}
```

* *queryName*: query name of the source column in the query. It comes from the `DataViewMetadataColumn`

```typescript
interface IHierarchyIdentityFilterNode<IdentityType> {
    identity: IdentityType;
    children?: IHierarchyIdentityFilterNode<IdentityType>[];
    operator: HierarchyFilterNodeOperators;
}
```

* *identity*: The Node identity in DataView. The `IdentityType` Should be `CustomVisualOpaqueIdentity`

* *children*: List of node children relevant to the current selection

* *operator*: The operator for single objects in the tree. The operator can be one of the following three options:

  ```typescript
  type HierarchyFilterNodeOperators = "Selected" | "NotSelected" | "Inherited";
  ```
  
  * *Selected*: value is explicitly selected.

  * *NotSelected*: value is explicitly not selected.

  * *Inherited*: value selection is according to the parent value in the hierarchy, or default if it's the root value.

Keep the following rules in mind when defining your hierarchy identity filter:

* Take the identities from the *DataView*.
* Each *identity* path should be a valid path in the *DataView*.
* Every leaf should have an operator of *Selected* or *NotSelected*.
* To compare identities, use the `ICustomVisualsOpaqueUtils.compareCustomVisualOpaqueIdentities` function.
* The identities might change following fields changes (for example, adding or removing fields). Power BI  assigns the updated identities to the existing filter.hierarchyData.

## How to use the Hierarchy identity filter API

The following code is an example of how to use the hierarchy identity filter API in a custom visual:

```typescript
import { IHierarchyIdentityFilterTarget, IHierarchyIdentityFilterNode, HierarchyIdentityFilter } from "powerbi-models"

const target: IHierarchyIdentityFilterTarget = [];

const hierarchyData: IHierarchyIdentityFilterNode<CustomVisualOpaqueIdentity>[] = [
    {
        identity: {...},
        operator: "Selected",
        children: [
            {
                identity: {...},
                operator: "NotSelected"
            }
        ]
    },
    {
        identity: {...},
        operator: "Inherited",
        children: [
            {
                identity: {...},
                operator: "Selected"
            }
        ]
    }
];

const filter = new HierarchyIdentityFilter(target, hierarchyData).toJSON();
```

To apply the filter, use the `applyJsonFilter` API call:

```typescript
this.host.applyJsonFilter(filter, "general", "filter", action);
```

To restore the active JSON filter, use the `jsonFilters` property found in the "VisualUpdateOptions":

```typescript
export interface VisualUpdateOptions extends extensibility.VisualUpdateOptions {
   //...
   jsonFilters?: IFilter[];
}
```

## Hierarchy related fields validation (optional)

The `HierarchyIdnetity` filter is supported only for hierarchically related fields. By default, Power BI doesn't validate if the fields are hierarchically related.

To activate hierarchically related validation, add the 'areHierarchicallyRelated' property to the relevant role condition in the capabilities.json file:

```typescript
"dataViewMappings": [
    {
         "conditions": [
             {
                  "Rows": {
                      "min": 1,
                      "areHierarchicallyRelated": true <------ NEW ------>
                  },
                  "Value": {
                  "min": 0
                  }
            }
        ],
        ...
    }
]
```

Fields are hierarchically related if the following conditions are met:

* No included relationship edge is many to many cardinality, nor `ConceptualNavigationBehavior.Weak`.

* All fields in the filter exist in the path.

* Every relationship in the path has the same direction or bidirectional.

* The relationship direction matches the cardinality for one to many or bidirectional.

### Example of hierarchy relationships

For example, given the following entity relationship:

:::image type="content" source="./media/hierarchy-filter-api/hierarchy-filter-example.png" alt-text="Diagram showing the bidirectional nature of the filter.":::

* A, B are hierarchically related: true
* B, C are hierarchically related: true
* A, B, C are hierarchically related: true
* A, C, E are hierarchically related: true (A --> E --> C)
* A, B, E are hierarchically related: true (B --> A --> E)
* A, B, C, E are hierarchically related: true (B --> A --> E --> C)
* A, B, C, D are hierarchically related: false (violated rule #3)
* C, D are hierarchically related: true
* B, C, D are hierarchically related: false (violated rule #3)
* A, C, D, E are hierarchically related: false (violated rule #3)

> [!NOTE]
>
> * When these validations are enabled, and the fields are not hierarchically related, the visual won't render, and an error message will be displayed:
>
>    :::image type="content" source="./media/hierarchy-filter-api/validated-unsupported-relationships.png" alt-text="Screenshot of visual with validations enabled failing to load because the fields aren't hierarchically related. The error message says 'you are using fields that don't have a supported set of relationships'.":::
>
>    :::image type="content" source="./media/hierarchy-filter-api/cant-display-visual.png" alt-text="Screenshot of error message when validations are enabled and the fields aren't hierarchically related. The message says 'can't display this visual'.":::
>
> * When these validations are disabled, and the filter visual applies a filter that contains nodes related to non-hierarchically related fields, other visuals might not render properly when measures are in use:
>
>    :::image type="content" source="./media/hierarchy-filter-api/no-validation-unsupported.png" alt-text="Screenshot of visual with validations disabled failing to load because the fields aren't hierarchically related. The error message says 'couldn't load the data for this visual'.":::
>
>    :::image type="content" source="./media/hierarchy-filter-api/no-validation-cant-load.png" alt-text="Screenshot of error message when validations are disabled and the fields aren't hierarchically related. The message says 'couldn't load data for this visual'.":::

## Code example for updating the hierarchy data tree after new selection

The following code shows how to update the `hierarchyData` tree after new a selection:

```typescript
type CompareIdentitiesFunc = (id1: CustomVisualOpaqueIdentity, id2: CustomVisualOpaqueIdentity) => boolean;
/**
* Updates the filter tree following a new node selection.
* Prunes irrelevant branches after node insertion/removal if necessary.
* @param path Identities path to the selected node.
* @param treeNodes Array of IHierarchyIdentityFilterNode representing a valid filter tree.
* @param compareIdentities Compare function for CustomVisualOpaqueIdentity to determine equality. Pass the ICustomVisualsOpaqueUtils.compareCustomVisualOpaqueIdentities function.
* @returns A valid filter tree after the update
*/

function updateFilterTreeOnNodeSelection(
   path: CustomVisualOpaqueIdentity[],
   treeNodes: IHierarchyIdentityFilterNode<CustomVisualOpaqueIdentity>[],
   compareIdentities: CompareIdentitiesFunc
): IHierarchyIdentityFilterNode<CustomVisualOpaqueIdentity>[] {
    if (!path) return treeNodes;
    const root: IHierarchyIdentityFilterNode<CustomVisualOpaqueIdentity> = {
        identity: null,
        children: treeNodes || [],
        operator: 'Inherited',
    };
    let currentNodesLevel = root.children;
    let isClosestSelectedParentSelected = root.operator === 'Selected';
    let parents: { node: IHierarchyIdentityFilterNode<CustomVisualOpaqueIdentity>, index: number }[] = [{ node: root, index: -1 }];
    let shouldFixTree = false;
    path.forEach((identity, level) => {
        const index = currentNodesLevel.findIndex((node) => compareIdentities(node.identity, identity));
        const isLastNodeInPath = level === path.length - 1
        if (index === -1) {
           const newNode: IHierarchyIdentityFilterNode<CustomVisualOpaqueIdentity> = {
               identity,
               children: [],
               operator: isLastNodeInPath ? (isClosestSelectedParentSelected ? 'NotSelected' : 'Selected') : 'Inherited',
           };
           currentNodesLevel.push(newNode);
           currentNodesLevel = newNode.children;
           if (newNode.operator !== 'Inherited') {
              isClosestSelectedParentSelected = newNode.operator === 'Selected';
           }
        } else {
            const currentNode = currentNodesLevel[index];
            if (isLastNodeInPath) {
               const partial = currentNode.children && currentNode.children.length;
               if (partial) {
                  /**
                   * The selected node has subtree.
                   * Therefore, selecting this node should lead to one of the following scenarios:
                   * 1. The node should have Selected operator and its subtree should be pruned.
                   * 2. The node and its subtree should be pruned form the tree and the tree should be fixed.
                   */
                   // The subtree should be always pruned.
                   currentNode.children = [];
                   if (currentNode.operator === 'NotSelected' || (currentNode.operator === 'Inherited' && isClosestSelectedParentSelected )) {
                      /**
                       * 1. The selected node has NotSelected operator.
                       * 2. The selected node has Inherited operator, and its parent has Slected operator.
                       * In both cases the node should be pruned from the tree and the tree shoud be fixed.
                       */
                      currentNode.operator = 'Inherited'; // to ensure it will be pruned
                      parents.push({ node: currentNode, index });
                      shouldFixTree = true;
                  } else {
                     /**
                      * 1. The selected node has Selected operator.
                      * 2. The selected node has Inherited operator, but its parent doesn't have Selected operator.
                      * In both cases the node should stay with Selected operator pruned from the tree and the tree should be fixed.
                      * Note that, node with Selected oprator and parent with Selector operator is not valid state.
                      */
                      currentNode.operator = 'Selected';
                  }
              } else {
                  // Leaf node. The node should be pruned from the tree and the tree should be fixed.
                  currentNode.operator = 'Inherited'; // to ensure it will be pruned
                  parents.push({ node: currentNode, index });
                  shouldFixTree = true;
                 }
             } else {
                 // If it's not the last noded in path we just continue traversing the tree
                 currentNode.children = currentNode.children || [];
                 currentNodesLevel = currentNode.children
                 if (currentNode.operator !== 'Inherited') {
                     isClosestSelectedParentSelected = currentNode.operator === 'Selected';
                     // We only care about the closet parent with Selected/NotSelected operator and its children
                     parents = [];
                  }
                  parents.push({ node: currentNode, index });
                }
           }
    });
    // Prune brnaches with Inherited leaf
    if (shouldFixTree) {
       for (let i = parents.length - 1; i >= 1; i--) {
           // Normalize to empty array
           parents[i].node.children = parents[i].node.children || [];
           if (!parents[i].node.children.length && (parents[i].node.operator === 'Inherited')) {
              // Remove the node from its parent children array
              removeElement(parents[i - 1].node.children, parents[i].index);
           } else {
               // Node has children or Selected/NotSelected operator
               break;
         }
      }
   }
   return root.children;
}
/**
* Removes an element from the array without preserving order.
* @param arr - The array from which to remove the element.
* @param index - The index of the element to be removed.
*/
function removeElement(arr: any[], index: number): void {
    if (!arr || !arr.length || index < 0 || index >= arr.length) return;
    arr[index] = arr[arr.length - 1];
    arr.pop();
}
```

## Considerations and limitations

* This filter is supported only for matrix dataView mapping.

* The visual should contain only one *grouping* [data role](./capabilities.md#datarole-properties).

* A visual that uses the Hierarchy identity filter type should apply only a single filter of this type.



================================================
FILE: powerbi-docs/developer/visuals/high-contrast-support.md
================================================
---
title: High-contrast mode support in Power BI visuals
description: Learn how to add high-contrast mode support to Power BI visuals, and see implemented image and code examples.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/17/2024
#customer intent: As a Power BI visual developer, I want to learn how to add high-contrast mode support to Power BI visuals so that they are accessible to users with visual impairments.
---

# High-contrast mode support in Power BI visuals

The Windows *high-contrast* setting makes text and graphics easier to see by displaying more distinct colors. This article discusses how to add high-contrast mode support to Power BI visuals. For more information, see [High-contrast support in Power BI](../../create-reports/desktop-accessibility-creating-reports.md#high-contrast-color-view).

To view an implementation of high-contrast support, go to the [PowerBI-visuals-sampleBarChart visual repository](https://github.com/Microsoft/PowerBI-visuals-sampleBarChart/commit/61011c82b66ca0d3321868f1d089c65101ca42e6).

To display a visual in high-contrast mode, you have to:

* Detect high-contrast mode and colors upon [initialization](#initialization).
* Draw the visual correctly on [implementation](#implementation).

## Initialization

The *colorPalette* member of `options.host` has several properties for high-contrast mode. Use these properties to determine whether high-contrast mode is active and, if it is, what colors to use.

* Detect that Power BI is in high-contrast mode

    If `host.colorPalette.isHighContrast` is `true`, high-contrast mode is active, and the visual should draw itself accordingly.

* Get high-contrast colors

  When displaying in high-contrast mode, your visual should limit itself to the following settings:

  * **Foreground** color is used to draw any lines, icons, text, and outline or fill of shapes.
  * **Background** color is used for background, and as the fill color of outlined shapes.
  * **Foreground-selected** color is used to indicate a selected or active element.
  * **Hyperlink** color is used only for hyperlink text.

    > [!NOTE]
    > If a secondary color is needed, the foreground color can be used with some opacity (Power BI native visuals use 40% opacity). Use this sparingly to keep the visual details easy to see.

During initialization, you can store the following values in your `constructor` method:

```typescript
private isHighContrast: boolean;

private foregroundColor: string;
private backgroundColor: string;
private foregroundSelectedColor: string;
private hyperlinkColor: string;
//...

constructor(options: VisualConstructorOptions) {
    this.host = options.host;
    let colorPalette: ISandboxExtendedColorPalette = host.colorPalette;
    //...
    this.isHighContrast = colorPalette.isHighContrast;
    if (this.isHighContrast) {
        this.foregroundColor = colorPalette.foreground.value;
        this.backgroundColor = colorPalette.background.value;
        this.foregroundSelectedColor = colorPalette.foregroundSelected.value;
        this.hyperlinkColor = colorPalette.hyperlink.value;
    }
```

Or, you can store the `host` object during initialization and access the relevant `colorPalette` properties during an update.

## Implementation

The specific implementations of high-contrast support vary from visual to visual and depend on the details of the graphic design. To keep important details easy to distinguish with limited colors, high-contrast mode ordinarily requires a design that's slightly different from the default mode.

Power BI native visuals follow these guidelines:

* All data points use the same color (foreground).
* All text, axes, arrows, and lines use the foreground color.
* Thick shapes are drawn as outlines with thick strokes (at least two pixels) and background color fill.
* When data points are relevant, they're distinguished by different marker shapes, and data lines are distinguished by different dashing.
* When a data element is highlighted, all other elements change their opacity to 40%.
* For slicers and active filter elements, use the foreground-selected color.

The following sample bar chart is drawn with two pixels of thick foreground outline and background fill. Compare the way it looks with default colors and with the following high-contrast themes:

### [Standard colors](#tab/Standard)

:::image type="content" source="media/high-contrast-support/hc-samplebarchart-standard.png" alt-text="Screenshot of a sample Bar Chart using standard colors.":::

### [High-contrast dark color theme](#tab/Dark)

:::image type="content" source="media/high-contrast-support/hc-samplebarchart-dark2.png" alt-text="Screenshot of a sample Bar Chart using the Dark #2 color theme.":::

### [High-contrast white color theme](#tab/White)

:::image type="content" source="media/high-contrast-support/hc-samplebarchart-white.png" alt-text="Screenshot of a sample Bar Chart using the White color theme.":::

---

## Example

The following code shows one place in the `visualTransform` function that was changed to support high-contrast. It's called as part of rendering during the update. For the full implementation of this code, see the `barChart.ts` file in the [PowerBI-visuals-sampleBarChart visual repository](https://github.com/Microsoft/PowerBI-visuals-sampleBarChart/commit/61011c82b66ca0d3321868f1d089c65101ca42e6).

### [No high-contrast support](#tab/NoHighContrast)

```typescript
for (let i = 0, len = Math.max(category.values.length, dataValue.values.length); i < len; i++) {
    let defaultColor: Fill = {
        solid: {
            color: colorPalette.getColor(category.values[i] + '').value
        }
    };

    barChartDataPoints.push({
        category: category.values[i] + '',
        value: dataValue.values[i],
        color: getCategoricalObjectValue<Fill>(category, i, 'colorSelector', 'fill', defaultColor).solid.color,
        selectionId: host.createSelectionIdBuilder()
            .withCategory(category, i)
            .createSelectionId()
    });
}
```

### [High-contrast support](#tab/HighContrast)

```typescript
for (let i = 0, len = Math.max(category.values.length, dataValue.values.length); i < len; i++) {
    const color: string = getColumnColorByIndex(category, i, colorPalette);

    const selectionId: ISelectionId = host.createSelectionIdBuilder()
        .withCategory(category, i)
        .createSelectionId();

    barChartDataPoints.push({
        color,
        strokeColor,
        strokeWidth,
        selectionId,
        value: dataValue.values[i],
        category: `${category.values[i]}`,
    });
}

//...

function getColumnColorByIndex(
    category: DataViewCategoryColumn,
    index: number,
    colorPalette: ISandboxExtendedColorPalette,
): string {
    if (colorPalette.isHighContrast) {
        return colorPalette.background.value;
    }

    const defaultColor: Fill = {
        solid: {
            color: colorPalette.getColor(`${category.values[index]}`).value,
        }
    };

    return getCategoricalObjectValue<Fill>(category, index, 'colorSelector', 'fill', defaultColor).solid.color;
}
```

---

## Related content

[Design Power BI reports for accessibility](../../create-reports/desktop-accessibility-creating-reports.md)



================================================
FILE: powerbi-docs/developer/visuals/highlight.md
================================================
---
title: Highlight data points in Power BI
description: Learn how to highlight data points on Power BI visuals with categorical and matrix data view mapping.
author: billmath
ms.author: billmath
ms.reviewer:
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/17/2024
#customer intent: As a Power BI visual developer, I want to learn how to highlight data points on Power BI visuals with categorical and matrix data view mapping.
---

# Highlight data points in Power BI Visuals

This article describes how to highlight data on Power BI visuals.

By default, when an element is selected, the `values` array in the `dataView` [object](objects-properties.md) is filtered to only show the selected values. When the `values` array is filtered, all other visuals on the page only show the selected data.

If you set the `supportsHighlight` property in your `capabilities.json` file to `true`, it results in the full unfiltered `values` array along with a `highlights` array. The `highlights` array is the same length as the values array, and any unselected values are set to `null`. With this property enabled, the appropriate data in the visual is highlighted by comparing the `values` array to the `highlights` array.

### [No highlight support](#tab/Standard)

:::image type="content" source="media/highlight/dataview-support.png" alt-text="Screenshot of the default dataView behavior without highlighting." lightbox="media/highlight/dataview-support.png":::

### [Highlight support](#tab/Highlight)

:::image type="content" source="media/highlight/highlight-support.png" alt-text="Screenshot of the dataView that supports highlighting." lightbox="media/highlight/highlight-support.png":::

---

In the example, notice that:

* **Without** highlight support, the selection is the only value in the `values` array and the only bar presented in the data view.
* **With** highlight support, all values are in the `values` array. The `highlights` array contains a `null` value for non-highlighted elements. All bars appear in the data view, and the highlighted bar is a different color.

There can also be multiple selections and partial highlights. The highlighted values are presented in the data view.

> [!NOTE]
> Table data view mapping doesn't support the highlights feature.

## Highlight data points with categorical data view mapping

For visuals with [categorical data view mapping](dataview-mappings.md#categorical-data-mapping), add  `"supportsHighlight": true` to the `capabilities.json` file. For example:

```json
{
    "dataRoles": [
        {
            "displayName": "Category",
            "name": "category",
            "kind": "Grouping"
        },
        {
            "displayName": "Value",
            "name": "value",
            "kind": "Measure"
        }
    ],
    "dataViewMappings": [
        {
            "categorical": {
                "categories": {
                    "for": {
                        "in": "category"
                    }
                },
                "values": {
                    "for": {
                        "in": "value"
                    }
                }
            }
        }
    ],
    "supportsHighlight": true
}
```

After you remove unnecessary code, the default visual source code looks like the following example:

```typescript
"use strict";

// ... default imports list

import { FormattingSettingsService } from "powerbi-visuals-utils-formattingmodel";

import DataViewCategorical = powerbi.DataViewCategorical;
import DataViewCategoryColumn = powerbi.DataViewCategoryColumn;
import PrimitiveValue = powerbi.PrimitiveValue;
import DataViewValueColumn = powerbi.DataViewValueColumn;

import { VisualFormattingSettingsModel } from "./settings";

export class Visual implements IVisual {
    private target: HTMLElement;
    private formattingSettings: VisualFormattingSettingsModel;
    private formattingSettingsService: FormattingSettingsService;

    constructor(options: VisualConstructorOptions) {
        console.log('Visual constructor', options);
        this.formattingSettingsService = new FormattingSettingsService();
        this.target = options.element;
        this.host = options.host;
    }

    public update(options: VisualUpdateOptions) {
        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);
        console.log('Visual update', options);

    }

    // Returns properties pane formatting model content hierarchies, properties and latest formatting values, Then populate properties pane. 
    // This method is called once every time we open properties pane or when the user edit any format property. 
    public getFormattingModel(): powerbi.visuals.FormattingModel {
        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);
    }
}
```

Import required interfaces to process data from Power BI:

```typescript
import DataViewCategorical = powerbi.DataViewCategorical;
import DataViewCategoryColumn = powerbi.DataViewCategoryColumn;
import PrimitiveValue = powerbi.PrimitiveValue;
import DataViewValueColumn = powerbi.DataViewValueColumn;
```

Create the root `div` element for category values:

```typescript
export class Visual implements IVisual {
    private target: HTMLElement;
    private formattingSettings: VisualFormattingSettingsModel;
    private formattingSettingsService: FormattingSettingsService;

    private div: HTMLDivElement; // new property

    constructor(options: VisualConstructorOptions) {
        console.log('Visual constructor', options);
        this.formattingSettingsService = new FormattingSettingsService();
        this.target = options.element;
        this.host = options.host;

        // create div element
        this.div = document.createElement("div");
        this.div.classList.add("vertical");
        this.target.appendChild(this.div);

    }
    // ...
}
```

Clear the contents of the div elements before rendering new data:

```typescript
// ...
public update(options: VisualUpdateOptions) {
    this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);
    console.log('Visual update', options);

    while (this.div.firstChild) {
        this.div.removeChild(this.div.firstChild);
    }
    // ...
}
```

Get the categories and measure values from the `dataView` object:

```typescript
public update(options: VisualUpdateOptions) {
    this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);
    console.log('Visual update', options);

    while (this.div.firstChild) {
        this.div.removeChild(this.div.firstChild);
    }

    const dataView: DataView = options.dataViews[0];
    const categoricalDataView: DataViewCategorical = dataView.categorical;
    const categories: DataViewCategoryColumn = categoricalDataView.categories[0];
    const categoryValues = categories.values;

    const measures: DataViewValueColumn = categoricalDataView.values[0];
    const measureValues = measures.values;
    const measureHighlights = measures.highlights;
    // ...
}
```

Where `categoryValues` is an array of category values, `measureValues` is an array of measures, and `measureHighlights` is the highlighted parts of values.

> [!NOTE]
> If values of the `measureHighlights` property are less than values of the `categoryValues` property, then the value was partially highlighted.

Enumerate the `categoryValues` array and get corresponding values and highlights:

```typescript
// ...
const measureHighlights = measures.highlights;

categoryValues.forEach((category: PrimitiveValue, index: number) => {
    const measureValue = measureValues[index];
    const measureHighlight = measureHighlights && measureHighlights[index] ? measureHighlights[index] : null;
    console.log(category, measureValue, measureHighlight);

});
```

Create `div` and `p` elements to display and visualize data view values in the visual DOM:

```typescript
categoryValues.forEach((category: PrimitiveValue, index: number) => {
    const measureValue = measureValues[index];
    const measureHighlight = measureHighlights && measureHighlights[index] ? measureHighlights[index] : null;
    console.log(category, measureValue, measureHighlight);

    // div element. it contains elements to display values and visualize value as progress bar
    let div = document.createElement("div");
    div.classList.add("horizontal");
    this.div.appendChild(div);

    // div element to visualize value of measure
    let barValue = document.createElement("div");
    barValue.style.width = +measureValue * 10 + "px";
    barValue.style.display = "flex";
    barValue.classList.add("value");

    // element to display category value
    let bp = document.createElement("p");
    bp.innerText = category.toString();

    // div element to visualize highlight of measure
    let barHighlight = document.createElement("div");
    barHighlight.classList.add("highlight")
    barHighlight.style.backgroundColor = "blue";
    barHighlight.style.width = +measureHighlight * 10 + "px";

    // element to display highlighted value of measure
    let p = document.createElement("p");
    p.innerText = `${measureHighlight}/${measureValue}`;
    barHighlight.appendChild(bp);

    div.appendChild(barValue);

    barValue.appendChild(barHighlight);
    div.appendChild(p);
});
```

Apply the required styles for elements to use `flexbox`, and define colors for div elements:

```css
div.vertical {
    display: flex;
    flex-direction: column;
}

div.horizontal {
    display: flex;
    flex-direction: row;
}

div.highlight {
    background-color: blue
}

div.value {
    background-color: red;
    display: flex;
}
```

The following view of the visual is the result:

![The visuals with categorical data view mapping and highlight](media/highlight/dev-categorical-visual-highlight-demo.gif)

## Highlight data points with matrix data view mapping

For visuals with [matrix data view mapping](dataview-mappings.md#matrix-data-mapping), add  `"supportsHighlight": true` to the `capabilities.json` file. For example:

```json
{
    "dataRoles": [
        {
            "displayName": "Columns",
            "name": "columns",
            "kind": "Grouping"
        },
        {
            "displayName": "Rows",
            "name": "rows",
            "kind": "Grouping"
        },
        {
            "displayName": "Value",
            "name": "value",
            "kind": "Measure"
        }
    ],
    "dataViewMappings": [
        {
            "matrix": {
                "columns": {
                    "for": {
                        "in": "columns"
                    }
                },
                "rows": {
                    "for": {
                        "in": "rows"
                    }
                },
                "values": {
                    "for": {
                        "in": "value"
                    }
                }
            }
        }
    ],
    "supportsHighlight": true
}
```

The sample data to create a hierarchy for matrix data view mapping:

|   Row1   |   Row2   |   Row3   |   Column1   |   Column2   |   Column3   |   Values   |
|-----|-----|------|-------|-------|-------|-------|
|   R1   |   R11   |   R111   |   C1   |   C11   |   C111   |   1   |
|   R1   |   R11   |   R112   |   C1   |   C11   |   C112   |   2   |
|   R1   |   R11   |   R113   |   C1   |   C11   |   C113   |   3   |
|   R1   |   R12   |   R121   |   C1   |   C12   |   C121   |   4   |
|   R1   |   R12   |   R122   |   C1   |   C12   |   C122   |   5   |
|   R1   |   R12   |   R123   |   C1   |   C12   |   C123   |   6   |
|   R1   |   R13   |   R131   |   C1   |   C13   |   C131   |   7   |
|   R1   |   R13   |   R132   |   C1   |   C13   |   C132   |   8   |
|   R1   |   R13   |   R133   |   C1   |   C13   |   C133   |   9   |
|   R2   |   R21   |   R211   |   C2   |   C21   |   C211   |   10   |
|   R2   |   R21   |   R212   |   C2   |   C21   |   C212   |   11   |
|   R2   |   R21   |   R213   |   C2   |   C21   |   C213   |   12   |
|   R2   |   R22   |   R221   |   C2   |   C22   |   C221   |   13   |
|   R2   |   R22   |   R222   |   C2   |   C22   |   C222   |   14   |
|   R2   |   R22   |   R223   |   C2   |   C22   |   C223   |   16   |
|   R2   |   R23   |   R231   |   C2   |   C23   |   C231   |   17   |
|   R2   |   R23   |   R232   |   C2   |   C23   |   C232   |   18   |
|   R2   |   R23   |   R233   |   C2   |   C23   |   C233   |   19   |

Create the default visual project, and apply the sample of the `capabilities.json` file.

After you remove the unnecessary code, the default visual source code looks like the following example:

```typescript
"use strict";

// ... default imports

import { FormattingSettingsService } from "powerbi-visuals-utils-formattingmodel";
import { VisualFormattingSettingsModel } from "./settings";

export class Visual implements IVisual {
    private target: HTMLElement;
    private formattingSettings: VisualFormattingSettingsModel;
    private formattingSettingsService: FormattingSettingsService;

    constructor(options: VisualConstructorOptions) {
        console.log('Visual constructor', options);
        this.formattingSettingsService = new FormattingSettingsService();
        this.target = options.element;
        this.host = options.host;
    }

    public update(options: VisualUpdateOptions) {
        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);
        console.log('Visual update', options);

    }

   /**
     * Returns properties pane formatting model content hierarchies, properties and latest formatting values, Then populate properties pane.
     * This method is called once every time we open properties pane or when the user edit any format property. 
     */
    public getFormattingModel(): powerbi.visuals.FormattingModel {
        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);
    }
}
```

Import the required interfaces to process data from Power BI:

```typescript
import DataViewMatrix = powerbi.DataViewMatrix;
import DataViewMatrixNode = powerbi.DataViewMatrixNode;
import DataViewHierarchyLevel = powerbi.DataViewHierarchyLevel;
```

Create two `div` elements for the visual layout:

```typescript
constructor(options: VisualConstructorOptions) {
    // ...
    this.rowsDiv = document.createElement("div");
    this.target.appendChild(this.rowsDiv);

    this.colsDiv = document.createElement("div");
    this.target.appendChild(this.colsDiv);
    this.target.style.overflowY = "auto";
}
```

Check the data in the `update` method to ensure that the visual gets data:

```typescript
public update(options: VisualUpdateOptions) {
    this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);
    console.log('Visual update', options);

    const dataView: DataView = options.dataViews[0];
    const matrixDataView: DataViewMatrix = dataView.matrix;

    if (!matrixDataView ||
        !matrixDataView.columns ||
        !matrixDataView.rows ) {
        return
    }
    // ...
}
```

Clear the contents of the `div` elements before rendering new data:

```typescript
public update(options: VisualUpdateOptions) {
    // ...

    // remove old elements
    // to better performance use D3js pattern:
    // https://d3js.org/#enter-exit
    while (this.rowsDiv.firstChild) {
        this.rowsDiv.removeChild(this.rowsDiv.firstChild);
    }
    const prow = document.createElement("p");
    prow.innerText = "Rows";
    this.rowsDiv.appendChild(prow);

    while (this.colsDiv.firstChild) {
        this.colsDiv.removeChild(this.colsDiv.firstChild);
    }
    const pcol = document.createElement("p");
    pcol.innerText = "Columns";
    this.colsDiv.appendChild(pcol);
    // ...
}
```

Create the `treeWalker` function to traverse the matrix data structure:

```typescript
public update(options: VisualUpdateOptions) {
    // ...
    const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {

    }
    // ...
}
```

Where `matrixNode` is the current node, `levels` is metadata columns of this hierarchy level, `div` - parent element for child HTML elements.

The `treeWalker` is the recursive function, need to create `div` element and `p` for text as header, and call the function for child elements of node:

```typescript
public update(options: VisualUpdateOptions) {
    // ...
    const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {
        // ...

        if (matrixNode.children) {
            const childDiv = document.createElement("div");
            childDiv.classList.add("vertical");
            div.appendChild(childDiv);

            const p = document.createElement("p");
            const level = levels[matrixNode.level]; // get current level column metadata from current node
            p.innerText = level.sources[level.sources.length - 1].displayName; // get column name from metadata

            childDiv.appendChild(p); // add paragraph element to div element
            matrixNode.children.forEach((node, index) => treeWalker(node, levels, childDiv, ++levelIndex));
        }
    }
    // ...
}
```

Call the function for root elements of the column and row of the matrix data view structure:

```typescript
public update(options: VisualUpdateOptions) {
    // ...
    const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {
        // ...
    }
    // ...
    // remove old elements
    // ...

    // ...
    const rowRoot: DataViewMatrixNode = matrixDataView.rows.root;
    rowRoot.children.forEach((node) => treeWalker(node, matrixDataView.rows.levels, this.rowsDiv));

    const colRoot = matrixDataView.columns.root;
    colRoot.children.forEach((node) => treeWalker(node, matrixDataView.columns.levels, this.colsDiv));
}
```

Generate selectionID for nodes and Create buttons to display nodes:

```typescript
public update(options: VisualUpdateOptions) {
    // ...
    const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {
        const selectionID: ISelectionID = this.host.createSelectionIdBuilder()
            .withMatrixNode(matrixNode, levels)
            .createSelectionId();

        let nodeBlock = document.createElement("button");
        nodeBlock.innerText = matrixNode.value.toString();

        nodeBlock.addEventListener("click", (event) => {
            // call select method in the selection manager
            this.selectionManager.select(selectionID);
        });

        nodeBlock.addEventListener("contextmenu", (event) => {
            // call showContextMenu method to display context menu on the visual
            this.selectionManager.showContextMenu(selectionID, {
                x: event.clientX,
                y: event.clientY
            });
            event.preventDefault();
        });
        // ...
    }
    // ...
}
```

The main step of highlighting is to create another array of values.

The object of terminal node has two properties for the values array, value and highlight:

```javascript
JSON.stringify(options.dataViews[0].matrix.rows.root.children[0].children[0].children[0], null, " ");
```

```json
{
 "level": 2,
 "levelValues": [
  {
   "value": "R233",
   "levelSourceIndex": 0
  }
 ],
 "value": "R233",
 "identity": {
  "identityIndex": 2
 },
 "values": {
  "0": {
   "value": null,
   "highlight": null
  },
  "1": {
   "value": 19,
   "highlight": 19
  }
 }
}
```

Where `value` represents the value of the node without applying a selection from the other visual, `highlight` indicates which part of the data was highlighted.

> [!NOTE]
> If the value of `highlight` is less than the value of `value`,
> then `value` was partially highlighted.

Add code to process the `values` array of the node if it's presented:

```typescript
public update(options: VisualUpdateOptions) {
    // ...
    const treeWalker = (matrixNode: DataViewMatrixNode, index: number, levels: DataViewHierarchyLevel[], div: HTMLDivElement)  => {
        // ...

        if (matrixNode.values) {
            const sumOfValues = Object.keys(matrixNode.values) // get key property of object (value are 0 to N)
                .map(key => +matrixNode.values[key].value) // convert key property to number
                .reduce((prev, curr) => prev + curr) // sum of values

            let sumOfHighlights = sumOfValues;
            sumOfHighlights = Object.keys(matrixNode.values) // get key property of object (value are 0 to N)
                .map(key => matrixNode.values[key].highlight ? +matrixNode.values[key].highlight : null ) // convert key property to number if it exists
                .reduce((prev, curr) => curr ? prev + curr : null) // convert key property to number

            // create div container for value and highlighted value
            const vals = document.createElement("div");
            vals.classList.add("vertical")
            vals.classList.replace("vertical", "horizontal");
            // create paragraph element for label
            const highlighted = document.createElement("p");
            // Display complete value and highlighted value
            highlighted.innerText = `${sumOfHighlights}/${sumOfValues}`;

            // create div container for value
            const valueDiv = document.createElement("div");
            valueDiv.style.width = sumOfValues * 10 + "px";
            valueDiv.classList.add("value");

            // create div container for highlighted values
            const highlightsDiv = document.createElement("div");
            highlightsDiv.style.width = sumOfHighlights * 10 + "px";
            highlightsDiv.classList.add("highlight");
            valueDiv.appendChild(highlightsDiv);

            // append button and paragraph to div containers to parent div
            vals.appendChild(nodeBlock);
            vals.appendChild(valueDiv);
            vals.appendChild(highlighted);
            div.appendChild(vals);
        } else {
            div.appendChild(nodeBlock);
        }

        if (matrixNode.children) {
            // ...
        }
    }
    // ...
}
```

The result is a visual with buttons and values, like `highlighted value/default value`.

:::image type="content" source="media/highlight/dev-matrix-visual-highlight-demo.gif" alt-text="Animation selecting data points on the visual, with matrix data views mapping and highlight." lightbox="media/highlight/dev-matrix-visual-highlight-demo.gif":::

## Related content

* [Matrix data mappings](dataview-mappings.md#matrix-data-mapping)
* [Add interactivity into visual by Power BI visuals selections](selection-api.md)



================================================
FILE: powerbi-docs/developer/visuals/identity-filter-api.md
================================================
---
title: The Identity filter API in Power BI custom visuals
description: This article discusses how to create Power BI visuals can filter categorical so you can explore different types of data in depth in Power BI embedded analytics.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/17/2024
#customer intent: As a Power BI visual developer, I want to learn how to create a visual that can filter categorical data using a semantic query so that I can explore different types of data in depth in Power BI embedded analytics.
---

# Identity filter API

The **Identity filter API** allows you to create a visual that can filter categorical data using a semantic query.  
It filters the data by **data points** rather than mathematical expressions.

The API keeps track of user selections and which data points to display. The data points are saved in an array and referenced by their position in the array.

This API is useful in the following scenarios:

* For custom visuals that use semantic models with group on keys
* Migrating visuals that used an older API (earlier than 2.2) to a newer API
* Allow selections using identifying index arrays

> [!NOTE]
> The **Identity filter API** is available from API version 5.1 To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

The Identity filter model is based on the [IIdentityFilter](/javascript/api/powerbi/powerbi-models/iidentityfilter) interface.

```typescript
    private filter: IIdentityFilter = {
        $schema: “”,
        filterType: FilterType.Identity,
        operator: "In",
        target: []
    }
```

For example, if the visual received the following data view update:

:::image type="content" source="./media/identity-filter-api/target-array.png" alt-text="Screenshot of sample array.":::

The array is of type number[] and it contains the identity fields of the items that the user selected.

The identityIndex corresponds to the index of the value in the semantic model's value array (see the following example).

:::image type="content" source="./media/identity-filter-api/array-values.png" alt-text="Screenshot showing array values of names.":::

In the above example:
{identityIndex: 0} = "Aaliyah"
{identityIndex: 1} = "Aaliyah"
{identityIndex: 02 = "Aaliyah"
etc.

## How to use the Identity filter API

To use the Identity filter API, your powerbi-models version needs to be 1.9.1 or higher.

* Add the following property as a member of the visual.ts class:

  ```typescript
      private filter: IIdentityFilter = {
          $schema: “”,
          filterType: FilterType.Identity,
          operator: "In",
          target: []
      }
  ```

* To handle Power BI updates, read the *target* array from the 'jsonFilters' in the 'VisualUpdateOptions' and translate it to the corresponding values. These values are the ones that were selected. In the previous example, a target array of [0,10] corresponds to the values of *Aliyah* and *Abigail*.

* To handle user selections in the previous example, click on the first *Abigail* to add the value 8 to the filter target array and send it using the following command:

```typescript
this.visualHost.applyJsonFilter(this.filter, "general", "filter", powerbi.FilterAction.merge);
```

<!--
## Sample JSON filter

Some sample JSON filter code is shown in the following

## Example: Identity filter API

The following example shows how the visual calls a filter operation.
-->

## Migrating visuals with old API

Starting from API 5.1.0, to support the identity filter on visuals that were created using a version earlier than 2.2, add the following lines to your *capabilities.json* file:

```json
    "migration": {
        "filter": {
            "shouldUseIdentityFilter": true
        }
    }
```

These lines convert the selections to identity filters.

> [!NOTE]
> This step is only necessary for existing visuals created with older APIs. Newer visuals don't need to add this.

## Related content

[Use Power BI visuals selections to add interactivity to a visual](selection-api.md)

More questions? Try the [Power BI Community](https://community.powerbi.com/).



================================================
FILE: powerbi-docs/developer/visuals/import-visual.md
================================================
---
title: Import Power BI visuals from AppSource or from a file
description: Learn how you can download a custom visual from AppSource, Partner Center, or elsewhere and import it into Power BI with this tutorial. 
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 01/12/2025
#customer intent: As a Power BI user, I want to learn how to import a custom visual from AppSource or from a file so that I can use it in my Power BI reports.
---

# Import a Power BI visual from AppSource into your workspace

Power BI comes with many out-of-the-box visuals that are available in the **Visualizations** pane of both [Power BI Desktop](https://powerbi.microsoft.com/desktop/) and [Power BI Service](https://app.powerbi.com).

Many more certified Power BI visuals are available from [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals). These visuals are created by Microsoft and Microsoft partners, and are validated by the AppSource validation team. You can [download these visuals](#import-a-power-bi-visual-directly-from-appsource) directly to your **Visualizations** pane.

You can also [develop your own Power BI visual](develop-power-bi-visuals.md), or get one from a trusted friend or coworker.

If you download or receive a Power BI visual file, you have to [import](#import-a-visual-file-from-your-local-computer-into-power-bi) it to the **Visualizations** pane before you can use it to create Power BI content.

## Import a Power BI visual directly from AppSource

1. Open your report in [Power BI Desktop](https://powerbi.microsoft.com/desktop/) or [Power BI service](https://app.powerbi.com).
1. Select the ellipsis from the **Visualizations** pane.

   :::image type="content" source="media/import-visual/ellipsis.png" alt-text="Screenshot of the Power BI Visualizations Pane, which shows the ellipses icon is highlighted.":::

1. Select **Get more visuals** from the menu.

   :::image type="content" source="media/import-visual/get-visuals.png" alt-text="Screenshot of the Power BI Visualizations Pane, which shows the Get more visuals option is highlighted.":::

1. Select **AppSource visuals** and choose the visual you want to import.

   :::image type="content" source="media/import-visual/select-visual.png" alt-text="Screenshot of the Power BI visuals dialog, which shows the visuals available for import and the highlighted AppSource visuals option.":::

1. Select **Add** to add the visual to your report.

   :::image type="content" source="media/import-visual/add-download-sample.png" alt-text="Screenshot of the Power BI visual description dialog, which shows the Add and Download Sample buttons are highlighted.":::

    > [!TIP]
    > Select **Download Sample** to download a sample Power BI semantic model and report created by the visual publisher. The sample report demonstrates what the visual looks like and how it can be used. It can also include useful comments, tips, and tricks from the publisher.
  
1. When the visual is successfully imported, select **OK**.

   :::image type="content" source="media/import-visual/success.png" alt-text="Screenshot of the Power BI successful import dialog box.":::

1. The visual now appears as a new icon on the bottom of the visualizations pane of the current report. Select the new visual icon to use this visual in the report.

   :::image type="content" source="media/import-visual/new-visualization.png" alt-text="Screenshot of the Power BI Visualizations pane, which shows the new imported visuals.":::

1. If you want the visual to remain on the **Visualizations** pane so you can use it in future reports, right-click the visual's icon and select **Pin to visualization pane**.
  
## Import a visual file from your local computer into Power BI

Power BI visuals are packaged as *.pbiviz* files that can be stored on your computer. You can share these files with other Power BI users. You can download visual files from AppSource onto your computer, but you can also get custom visuals from a trusted friend or colleague. Custom visuals that come from sources other than official Microsoft sources should be imported only if you trust the source.

1. Open your report in [Power BI Desktop](https://powerbi.microsoft.com/desktop/) or [Power BI service](https://app.powerbi.com).
1. Enable [developer mode](./environment-setup.md#enable-developer-mode) for Power BI Desktop. This setting stays enabled for the current session only and must be repeated every time you import a visual from a file.
1. Select the ellipsis from the visualizations pane.

   :::image type="content" source="media/import-visual/ellipsis.png" alt-text="Screenshot of the Power BI Visualizations Pane, which shows the ellipses icon is highlighted.":::

1. Select **Import a visual from a file** from the menu.

   :::image type="content" source="media/import-visual/import-from-file.png" alt-text="Screenshot of the Power BI Visualizations Pane, which shows the Import a visual from a file option is highlighted.":::

1. If you get a message cautioning you about importing custom files, select **Import** if you trust the source of the file.

   :::image type="content" source="media/import-visual/caution.png" alt-text="Screenshot of the Power BI caution: import custom visual dialog box.":::
  
1. Navigate to the folder that has the custom visual file (*.pbiviz*) and open it.
1. When the visual is successfully imported, select **OK**.
1. The visual now appears as a new icon on the bottom of the visualizations pane of the current report. Select the new visual icon to use this visual in the report.

   :::image type="content" source="media/import-visual/new-visualization.png" alt-text="Screenshot of the Power BI Visualizations pane, which shows the new imported visuals.":::

1. If you want the visual to remain on the **Visualizations** pane so you can use it in future reports, right-click the visual's icon and select **Pin to visualization pane**.

## Related content

* [Develop a Power BI circle card visual](develop-circle-card.md)
* [Visualizations in Power BI](../../visuals/power-bi-report-visualizations.md)

More questions? [Try asking the Power BI Community](https://community.powerbi.com/)



================================================
FILE: powerbi-docs/developer/visuals/index.yml
================================================
### YamlMime:Landing

title: Power BI visuals documentation
summary: Develop your own Power BI visuals, to be used by you, your organization, or the entire Power BI community. Our documentation provides the information you need.

metadata:
  title: Power BI visuals documentation
  description: Develop your own Power BI visuals, to be used by you, your organization, or the entire Power BI community. Our documentation provides the information you need.
  services: powerbi
  ms.service: powerbi
  ms.subservice: powerbi-developer
  ms.topic: landing-page # Required
  ms.collection: collection
  author: billmath
  ms.author: billmath
  ms.date: 31/03/2024

# linkListType: architecture | concept | deploy | download | get-started | how-to-guide | learn | overview | quickstart | reference | tutorial | video | whats-new

landingContent:
# Cards and links should be based on top customer tasks or top subjects
# Start card title with a verb
  # Card (optional)
  - title: Get started
    linkLists:
      - linkListType: get-started
        links:
          - text: "Develop your own Power BI visual"
            url: develop-power-bi-visuals.md
          - text: "Where to find Power BI visuals"
            url: power-bi-custom-visuals.md
          - text: "Power BI visual project structure"
            url: visual-project-structure.md
          - text: "Frequently asked questions"
            url: power-bi-custom-visuals-faq.yml

  # Card
  - title: Develop a Power BI visual
    linkLists:
      - linkListType: tutorial
        links:
          - text: "Tutorial: Develop a Power BI visual"
            url: develop-circle-card.md
          - text: "Tutorial: Adding formatting options to a Power BI visual"
            url: custom-visual-develop-tutorial-format-options.md
      - linkListType: concept
        links:
          - text: "Guidelines for Power BI visuals"
            url: guidelines-powerbi-visuals.md

  # Card (optional)
  - title: Publish Power BI visuals
    linkLists:
      - linkListType: concept
        links:
          - text: "Publish Power BI visuals to Partner Center"
            url: office-store.md
          - text: "Get a Power BI visual certified"
            url: power-bi-custom-visuals-certified.md

  # Card (optional)
  - title: References and resources
    linkLists:
      - linkListType: reference
        links:
          - text: "Samples of Power BI visuals"
            url: https://microsoft.github.io/PowerBI-visuals/samples/
          - text: "Git repository"
            url: https://github.com/PowerBi-Projects/PowerBI-visuals



================================================
FILE: powerbi-docs/developer/visuals/landing-page.md
================================================
---
title: Add a landing page to your Power BI visuals
description: This tutorial describes how to add a landing page to Power BI visuals by setting capabilities in a visual's capabilities.json file.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/17/2024
#customer intent: As a Power BI visual developer, I want to add a landing page to my visual so that I can display information in the visual card before the card gets data.
---

# Add a landing page to your Power BI visual

A Power BI visual's landing page can display information in your Power BI visual card before the card gets data. A visual's landing page can display:

* Text that explains how to use the visual.
* A link to your website.
* A link to a video.

:::image type="content" source="media/landing-page/app-landing-page.png" alt-text="Screenshot of a Power BI visual's example landing page.":::

This article explains how to design a landing page for your visual. The landing page appears whenever the visual has no data in it.

>[!NOTE]
>Designing a Power BI visual landing page is supported in API version 2.3.0 and above. To find out which version you're using, check the `apiVersion` in the *pbiviz.json* file.

## Create a landing page

To create a landing page, two capabilities must be set in the `capabilities.json` file.

* For the landing page to work, enable `supportsLandingPage`.
* For the landing page to be displayed in view mode, or for the visual to be interactive even when in [no data-roles mode](no-dataroles-support.md), enable `supportsEmptyDataView`.

```json
    {
        "supportsLandingPage": true,
        "supportsEmptyDataView": true,
    }
```

## Example of a visual with a landing page

The following code shows how a landing page can be added to a bar chart visual.

```typescript
export class BarChart implements IVisual {
    //...
    private element: HTMLElement;
    private isLandingPageOn: boolean;
    private LandingPageRemoved: boolean;
    private LandingPage: d3.Selection<any>;

    constructor(options: VisualConstructorOptions) {
            //...
            this.element = options.element;
            //...
    }

    public update(options: VisualUpdateOptions) {
    //...
        this.HandleLandingPage(options);
    }

    private HandleLandingPage(options: VisualUpdateOptions) {
        if(!options.dataViews || !options.dataViews[0]?.metadata?.columns?.length){
            if(!this.isLandingPageOn) {
                this.isLandingPageOn = true;
                const SampleLandingPage: Element = this.createSampleLandingPage(); //create a landing page
                this.element.appendChild(SampleLandingPage);
                this.LandingPage = d3.select(SampleLandingPage);
            }

        } else {
                if(this.isLandingPageOn && !this.LandingPageRemoved){
                    this.LandingPageRemoved = true;
                    this.LandingPage.remove();
                }
        }
    }
```

## Related content

[Formatting utils](utils-formatting.md)



================================================
FILE: powerbi-docs/developer/visuals/launch-url.md
================================================
---
title: Create a launch URL in Power BI
description: This tutorial describes how to open a URL in a new browser tab by using launch URLs in Power BI visuals.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/18/2023
#customer intent: As a Power BI visual developer, I want to learn how to create a visual that opens a URL in a new browser tab so that I can provide additional information to the user.
---

# Create a launch URL

A launch URL lets you open a new browser tab or window by adding the `host.launchUrl()` API call to the code of a Power BI visual.

> [!NOTE]
> The `host.launchUrl()` method was introduced in Visuals API 1.9.0.

## Sample

Import the `IVisualHost` interface and save the link to the `host` object in the constructor of the visual.

```typescript
import powerbi from "powerbi-visuals-api";
import IVisualHost = powerbi.extensibility.visual.IVisualHost;

export class Visual implements IVisual {
    private host: IVisualHost;
    // ...
    constructor(options: VisualConstructorOptions) {
        // ...
        this.host = options.host;
        // ...
    }

    // ...
}
```

## Usage

Use the `host.launchUrl()` API call and pass your destination URL as a string argument:

```typescript
this.host.launchUrl('https://some.link.net');
```

## Best practices

* Usually, it's best to open a link only as a response to a user's explicit action. Make it easy for the user to understand that clicking the link or the button results in opening a new tab. It can be confusing or frustrating for the user if a `launchUrl()` call triggers without a user's action or as a side effect of a different action.

* If the link isn't essential for the visual to function properly, we recommend that you give the report's author a way to disable and hide the link. Special Power BI use cases, such as embedding a report in a third-party application or publishing it to the web, might require disabling and hiding the link.

* Avoid triggering a `launchUrl()` call from inside a loop, the visual's `update` function, or any other frequently recurring code.

## A step-by-step example

### Add a link-launching element

Add the following lines to the visual's `constructor` function:

```typescript
    this.helpLinkElement = this.createHelpLinkElement();
    options.element.appendChild(this.helpLinkElement);
```

Add a private function that creates and attaches the anchor element:

```typescript
private createHelpLinkElement(): Element {
    let linkElement = document.createElement("a");
    linkElement.textContent = "?";
    linkElement.setAttribute("title", "Open documentation");
    linkElement.setAttribute("class", "helpLink");
    linkElement.addEventListener("click", () => {
        this.host.launchUrl("https://learn.microsoft.com/power-bi/developer/visuals/custom-visual-develop-tutorial");
    });
    return linkElement;
};
```

Define the style for the link element with an entry in the *visual.less* file:

```less
.helpLink {
    position: absolute;
    top: 0px;
    right: 12px;
    display: block;
    width: 20px;
    height: 20px;
    border: 2px solid #80B0E0;
    border-radius: 20px;
    color: #80B0E0;
    text-align: center;
    font-size: 16px;
    line-height: 20px;
    background-color: #FFFFFF;
    transition: all 900ms ease;

    &:hover {
        background-color: #DDEEFF;
        color: #5080B0;
        border-color: #5080B0;
        transition: all 250ms ease;
    }

    &.hidden {
        display: none;
    }
}
```

### Add a toggling mechanism

To add a toggling mechanism, you need to add a static object so that the report's author can toggle the visibility of the link element. (The default is set to *hidden*.) For more information, see the [static object tutorial](https://microsoft.github.io/PowerBI-visuals/docs/concepts/objects-and-properties).

Add the `showHelpLink` Boolean static object to the *capabilities.json* file's objects entry:

```typescript
"objects": {
    "generalView": {
            "displayName": "General View",
            "properties":
                "showHelpLink": {
                    "displayName": "Show Help Button",
                    "type": {
                        "bool": true
                    }
                }
            }
        }
    }
```

:::image type="content" source="media/launch-url/launchurl-toggle.png" alt-text="Screenshot of the Power BI Visualizations pane, which shows the new Enable Help Button option.":::

Add the following lines in the visual's `update` function:

```typescript
if (settings.generalView.showHelpLink) {
    this.helpLinkElement.classList.remove("hidden");
} else {
    this.helpLinkElement.classList.add("hidden");
}
```

The hidden class is defined in the *visual.less* file to control the display of the element.

## Considerations and limitations

* Use only absolute paths, not relative paths. For example, use an absolute path such as `https://some.link.net/subfolder/page.html`. The relative path,`/page.html`, won't be opened.

* Currently, only *HTTP* and *HTTPS* protocols are supported. Avoid *FTP*, *MAILTO*, and other protocols.



================================================
FILE: powerbi-docs/developer/visuals/licensing-api.md
================================================
---
title: Transactability and license enforcement
description: This article discusses how to retrieve the Power BI visual's licenses and trigger the display of out of box license related notifications to the Power BI user.
author: jennyfel
ms.author: jennyfel
ms.reviewer: billmath
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 11/04/2024
#customer intent: As a Power BI visual developer, I want to learn how to retrieve the Power BI visual's licenses and trigger the display of out of box license related notifications to the PBI user.
---

# Licensing and transactability enforcement (Public preview)

When you create Power BI visuals for download on AppSource, you can now manage and enforce their licenses using Microsoft systems. The end-user assigns and manages licenses using familiar tools like [Microsoft 365 admin center](https://admin.microsoft.com/), and the [licensing API](#licensing-api) lets you enforce these licenses and ensure that only licensed users can render the visuals.

## License enforcement process

The following table illustrates the steps involved in managing your visual licenses through Microsoft:

| Step | Details |
|--|--|
| **[Create an offer](/azure/marketplace/marketplace-power-bi-visual) in [Partner Center](https://partner.microsoft.com)** | Choose to transact through the Microsoft commerce system. Enable Microsoft to manage licenses. Set pricing and availability. |
| **Add license enforcement to your Power BI visual package** | Create or reconfigure your package to use the Power BI runtime license, which enforces licensing according to each user’s access. |
| **Customers discover your offer in AppSource and purchase a subscription** | When customers purchase your offer in [AppSource](https://appsource.microsoft.com), they also get licenses for the Power BI Visual. |
| **Customers manage their subscriptions and assign/unassign user license**s | Customers manage subscriptions and assign licenses for these Visuals and offers in the [Microsoft 365 admin center](https://admin.microsoft.com/), just like they do for any of their other subscriptions like Office or Power BI. |
| **Enforce runtime checks** | Give your customers a uniform experience by using our out-of-the-box APIs to enforce runtime license checks. |
| **[View reports](/azure/marketplace/summary-dashboard) to fuel growth** | Gain insight into revenue, payout information, and order and license details. View information about licenses and orders purchased, renewed, and canceled over time and by geography. |

## Licensing API

The **Licensing API** allows Power BI visual developers to enforce Power BI visual licenses. The API supports retrieving the information on Power BI visual licenses that are assigned to the Power BI user. It also enables triggering the licensing related notifications that appear on the Power BI visual and inform the user that they need to purchase the missing licenses.
The visual shouldn't display its own licensing UX, instead use one of Power BI supported predefined notifications as detailed in the following sections.

Learn more about Power BI licensing see [license enforcement](custom-visual-licenses.md).

>[!NOTE]
>The **Licensing API** is available from version 4.7. To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

### Retrieve visual's service plans that are assigned to the active user

To get service plans assigned, add a call to `getAvailableServicePlans` (available via `IVisualLicenseManager`).
From performance perspective, attempt to fetch the licenses once, preferably in the `constructor` or the `init` calls, and save the result.  
Once licenses are retrieved, they're cached on Power BI host side during the Power BI session and any further calls to the same return the cached data.

```typescript
export interface IVisualLicenseManager {
        getAvailableServicePlans(): IPromise<powerbi.extensibility.visual.LicenseInfoResult>;
    }
```

Retrieving the licenses might be a long operation, thus the `getAvailableServicePlans` call is an asynchronous call, and should be handled as such in your code.  
As a response to calling the method,  `LicenseInfoResult` object is returned.

```typescript
export interface LicenseInfoResult {
        plans: ServicePlan[] | undefined;
        isLicenseUnsupportedEnv: boolean; 
        isLicenseInfoAvailable: boolean; 
    }
```

* `plans` - an array of Service Plans purchased by the active user for *this* visual. (Licenses purchased for any other visuals aren't included in the response.)  
  A ServicePlan contains the service identifier (spIdentifier) and its state (ServicePlanState).  
  
  * spIdentifier: the string value of the Service ID generated when you configure your offer’s plans in Partner Center (see the following example)
      :::image type="content" source="media/licensing-api/service-id-example.png" alt-text="Screenshot showing an example of a Service ID string.":::

  * state – enum (ServicePlanState) that represents the state of the plans assigned.  
     Supported service plan states:

     | State | Description |
     | - | - |
     | Inactive | Indicates that the license isn't active and shouldn't be used for provisioning benefits. |
     | Active | Indicates that the license is active and can be used for provisioning benefits. |
     | Warning | Indicates that the license is in grace period likely due to payment violation. |
     | Suspended | Indicates that the license is suspended likely due to payment violation. |
     | Unknown | Microsoft Sentinel value. |

     **Only the *active* and *warning* states represent a usable license. All other states should be treated as not resulting in a usable license.**

* `isLicenseUnsupportedEnv` - indicates that the visual is being rendered in a Power BI environment that doesn't support licenses management or enforcement.
Currently, the following Power BI environments don't support license management or license enforcement:
  * Embedded - Publish To Web, PaaS embed
  * National/Regional clouds (Depends on general support for transactability in national/regional clouds)
  * RS Server (No planned support)
  * Exporting (PDF\PPT) using [REST API](/rest/api/power-bi/reports/export-to-file)

* `isLicenseInfoAvailable` - Indicates whether the licenses info could be retrieved.
Failure in licenses retrieval can occur in case Power BI Desktop user isn't signed in or isn't connected to the internet (offline). For web, licenses retrieval can fail due to a temporary service outage.

Example of calling `getAvailableServicePlans` to retrieve the user's service plans for this visual:  

```typescript
private currentUserValidPlans: ServicePlan[] | undefined;
private hasServicePlans: boolean | undefined;
private isLicenseUnsupportedEnv: boolean | undefined;

this.licenseManager.getAvailableServicePlans()
 .then(({ plans, isLicenseUnsupportedEnv, isLicenseInfoAvailable }: LicenseInfoResult) => {
  if (isLicenseInfoAvailable && !isLicenseUnsupportedEnv) {
   this.currentUserValidPlans = plans?.filter(({ spIdentifier, state }) => 
    (state === powerbi.ServicePlanState.Active || state === powerbi.ServicePlanState.Warning)
   );
   this.hasServicePlans = !!currentUserValidPlans?.length;
  }
  this.isLicenseUnsupportedEnv = isLicenseUnsupportedEnv;
 }).catch((err) => {
  this.currentUserValidPlans = undefined;
  this.hasServicePlans = undefined;
  console.log(err);
 });
```

> [!NOTE]
> This example only demonstrates how to verify whether the user has valid plans for this visual. The `plans` array may contain different `spIdentifier` values, and each identifier can appear multiple times with different states.

### Notify the user that the required licenses are missing

Power BI platform provides several out of the box experiences that can be used to notify:

* Licenses should be purchased in order to enjoy full visual's capabilities
* Particular visual's feature is blocked due to missing licenses
* Entire visual is blocked due to missing licenses
* Entire visual is blocked because the Power BI environment in use doesn't support license management\enforcement

```typescript
export interface IVisualLicenseManager {
        notifyLicenseRequired(notificationType: LicenseNotificationType): IPromise<boolean>;
        notifyFeatureBlocked(tooltip: string): IPromise<boolean>;
        clearLicenseNotification(): IPromise<boolean>;
    }
```

Example of calling `notifyLicenseRequired`:  

```typescript
private defaultNotificationType: powerbi.LicenseNotificationType = powerbi.LicenseNotificationType.General;
private isNotificaitonDisplayed: boolean = false;

if (!this.isNotificaitonDisplayed) {
    const notificationType = this.isLicenseUnsupportedEnv ? powerbi.LicenseNotificationType.UnsupportedEnv : this.defaultNotificationType
    this.licenseManager.notifyLicenseRequired(this.getNotificationType())
        .then((value) => {
            this.isNotificaitonDisplayed = value;
        }).catch((err) => {
            console.log(err);
        });
}
```

#### General icon indicating a required license is missing

Use `notifyLicenseRequired` call with `LicenseNotificationType.General` to display an icon as part of the visual's container.  
Once triggered, the icon is preserved throughout the visual's lifetime until `clearLicenseNotification` or `notifyLicenseRequired` are called.

> [!NOTE]
> The `LicenseNotificationType.General` notification is only enforced from an environment that supports licensing management and for Power BI Edit scenarios. Calling this in an unsupported environment or when the report is in Read mode or in dashboard doesn't apply the icon and returns `false` in the call's response.

Example of the visual display containing the "licenses are required" general icon:

:::image type="content" source="media/licensing-api/general-icon.png" alt-text="Screenshot of visual display containing the *licenses are required* general icon.":::

:::image type="content" source="media/licensing-api/general-icon-expanded.png" alt-text="Screenshot of visual display containing the *licenses are required* expanded icon.":::

#### Overlay the visual's display with a *missing license* notification

Use `notifyLicenseRequired` call with `LicenseNotificationType.VisualIsBlocked` to overlay the visual's display with a notification that visual is blocked since required licenses were found missing.  
Once triggered, this notification is preserved throughout the visual's lifetime until `clearLicenseNotification` or `notifyLicenseRequired` are called.

Example of the visual display containing the *visual blocked* notification. Power BI Desktop only displays the *Get a license* option:

:::image type="content" source="media/licensing-api/blocked-visual.png" alt-text="Visual display containing the *visual blocked* notification.":::

### Overlay the visual's display with an *unsupported environment* notification

Use `notifyLicenseRequired` call with `LicenseNotificationType.UnsupportedEnv` to overlay the visual's display with a notification that visual is blocked since the Power BI in use doesn't support licenses management\enforcement.  
Once triggered, the icon is preserved throughout the visual's lifetime until `clearLicenseNotification` or `notifyLicenseRequired` are called.

> [!NOTE]
> The `LicenseNotificationType.UnsupportedEnv` notification is only enforced when called in context of unsupported for licensing environment. Calling this in any other environment doesn't apply the notification and returns `false` in the call's response.

Example of the visual display containing the "Unsupported Environment" notification:

:::image type="content" source="media/licensing-api/unsupported-environment.png" alt-text="Screenshot of visual display containing the 'Unsupported Environment' notification":::

#### Display a banner notifying that a specific visual's functionality couldn't be applied

When applying a specific visual's functionality requires licenses that were found missing, you can use the `notifyFeatureBlocked` call that displays a pop-up banner as part of the visual's container. The banner also supports a custom tooltip that you can set and use to provide additional information on the feature that triggered the notification.

> [!NOTE]
> The *feature is blocked* notification is only enforced when both the following conditions apply:
>
> * It's called from a supported licensing environment 
> * Blocking overlays aren't applied (`LicenseNotificationType.UnsupportedEnv`, `LicenseNotificationType.VisualIsBlocked`).
>
> Calling this notification in an unsupported environment doesn't apply the notification and returns `false` in the call's response.

> [!NOTE]
> To support localized Power BI environment, we recommend maintaining localized versions of the tooltips in use. Please use [Localization API](./localization.md) to retrieve the Power BI locale language.

Once triggered, the banner is displayed for 10 seconds,
or
until other "feature blocked" banner is triggered,
or
until `clearLicenseNotification` is called (whatever comes first).

Example of the visual display containing the "feature blocked" banner notification:

:::image type="content" source="media/licensing-api/feature-banner-upgrade.png" alt-text="Screenshot of visual display containing the 'feature blocked' banner notification":::

## Test a licensed visual

To test a licensed visual end to end before making it publicly available:

* If you're creating a brand new offer, add the visual as a private plan for a test customer account. The offer is only visible to this test account for purchasing.
Use this account to validate the offer before making it public.
* If your visual is already available in AppSource and you want to upgrade it to a licensed visual, you *can't make it a private plan* because that hides the visual from AppSource, and your existing users won't have access to it. There's currently no way to test a published visual end to end. Test it the same way you tested the original visual to AppSource, by mocking the licensing API value to check the different possibilities.

## Considerations and limitations

* Tooltip for feature banner is limited by 500 chars.
* Tooltip for feature banner requires localization.
* License bundling (that is, one license that covers multiple offers from the same publisher) isn't yet supported.

## Related content

[Publish a Power BI custom visual](office-store.md)

More questions? [Try asking the Power BI Community](https://community.powerbi.com/)



================================================
FILE: powerbi-docs/developer/visuals/licensing-faq.yml
================================================
### YamlMime:FAQ
metadata:
  title: Frequently asked questions about Custom visual license management
  description: Browse a list of frequently asked questions and answers about transactability and license management for custom Power BI visuals
  author: billmath
  ms.author: billmath
  ms.reviewer: ''
  ms.service: powerbi
  ms.subservice: powerbi-custom-visuals
  ms.topic: faq
  ms.date: 07/25/2024
title: Frequently asked questions about Custom visual license management and transactability
summary: |
  This article answers some of the questions users often have about how to set up, pay for, and manage licenses for custom Power BI visuals that they purchase from [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals&exp=kyyw&page=1&filters=pay-as-you-go).

  > [!NOTE]
  > If you just purchased a licensed visual, you are assigned a license automatically. [Just refresh your report](#once-i-assign-a-license--how-long-does-it-take-until-i-can-use-it-).
  >
  > To assign licenses to other users in your organization, see [How do we assign licenses](#how-do-we-assign-the-licenses-).

sections:
  - name: Purchasing
    questions:
      - question: |
          What are licensed visuals?
        answer: |
          [Licensed visuals](./custom-visual-licenses.md) are Power BI visuals available from the [Microsoft commercial marketplace](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals&exp=kyyw&page=1&filters=pay-as-you-go). All licensed visuals have a limited basic version available for free, and a version with more functionality available for purchase. You can try out a free version of the visual before you need to purchase a license. You can also assign licenses to other users in your organization.

      - question: |
          Do I have to pay when I install a visual?
        answer: |
          You can install the visual for free from [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals&exp=kyyw&page=1&filters=pay-as-you-go) by selecting **Install free** and following the instructions there, or by [embedding it directly into your report](./import-visual.md#import-a-power-bi-visual-directly-from-appsource). This allows you to use the free features provided. For the full experience, however, you need to purchase the visual from [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals&exp=kyyw&page=1&filters=pay-as-you-go). The pricing for each licensed visual is described in the *Plans + Pricing* tab.

          :::image type="content" source="./media/licensing-faq/plans-and-pricing.png" alt-text="Screenshot of AppSource with Plans + Pricing tab highlighted.":::
          
      - question: |
          Who can purchase a visual license?
        answer: |
          *Anyone* can purchase a license, and assign the license to themselves or others.

      - question: |
          How can I purchase and pay for the visuals?
        answer: |
          To purchase the visual, select **Buy now** and complete the checkout path in [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals&exp=kyyw&page=1&filters=pay-as-you-go). 

          :::image type="content" source="./media/licensing-faq/buy-now.png" alt-text="Screenshot of AppSource with Buy now button highlighted.":::

          You can pay for the licenses with a credit card.  
          Prepaid cards are not supported.

          Billing admins can also pay by [invoice](/microsoft-365/commerce/billing-and-payments/pay-for-subscription-billing-profile#paying-by-invoice) if that's set up for your company.

          Read more about [setting payment methods](/microsoft-365/commerce/billing-and-payments/manage-payment-methods#change-a-payment-method-for-a-single-subscription).
          Follow [these steps](/microsoft-365/commerce/billing-and-payments/manage-billing-profiles#view-my-billing-profiles) to see your billing profile.

          :::image type="content" source="./media/licensing-faq/payment.png" alt-text="Screenshot of billing profile with Invoice selected.":::

          For troubleshooting payment and billing issues, see [Troubleshoot Azure payment issues](/azure/cost-management-billing/manage/billing-troubleshoot-azure-payment-issues) and [Troubleshoot a declined card](/azure/cost-management-billing/manage/troubleshoot-declined-card).


      - question: |
          Do we need to have Power BI Premium to purchase Licenses?
        answer: |
          No. any user can purchase visual licenses in AppSource.

      - question: |
          We have a Power BI Enterprise agreement with Microsoft. Is this included under that agreement?
        answer: |
          Not yet.

      - question: |
          How do we negotiate site licensing or private custom offers?
        answer: |
          Private offers and site licensing aren't supported yet. You can, however create Private Plans. [Learn more about private plans](/azure/marketplace/private-plans).

      - question: |
          Can we buy in local currency?
        answer: |
          Yes.

      - question: |
          Can we do multi-year license purchase instead of one year at a time?
        answer: |
          Not yet.

      - question: |
          How do I know if someone in my company has already purchased this same visual?
        answer: |
          If you're a company administrator, sign in to the [Microsoft 365 admin center](https://admin.microsoft.com/Adminportal/Home#/homepage) to see all subscriptions and to whom they're assigned.  
          If you aren't an administrator, speak to the administrator in your company.

      - question: |
          How can I add a purchase order number to the transaction?
        answer: |
          You can add a purchase number to the billing profile of your order. At the final stage of your checkout, select **Add new** under the billing profile.

          :::image type="content" source="./media/licensing-faq/billing-profile.png" alt-text="Screenshot of the final stage of checkout with the Add new link highlighted.":::

          Add the purchase order number in the appropriate space.

          :::image type="content" source="./media/licensing-faq/add-purchase-order-number.png" alt-text="Screenshot of billing profile with box for adding purchase order number.":::

      - question: |
          How can I download my receipt after purchase?
        answer: |
          After you complete your purchase, you can find your receipt and download it as PDF from the Microsoft 365 admin center under Bills & payments - Invoices. 

          :::image type="content" source="./media/licensing-faq/receipt-download.png" alt-text="Screenshot of Bills & payments - Invoices page with Download PDF in upper right corner.":::

      - question: |
          Can we use a visual without having to upload it to organization visual?
        answer: |
          Yes. You can download a visual [directly to your reports](./import-visual.md#import-a-power-bi-visual-directly-from-appsource).  

      - question: |
          How do we get upgrades of the visuals? 
        answer: |
          The AppSource visuals are updated automatically when a new version is available.

      - question: |
          What is the refund policy? 
        answer: |
          You're eligible for a full refund if you cancel your subscription within seven days of purchase. Refunds aren’t available for subscriptions canceled after that time period.

      - question: |
          How can I get more help buying a visual?
        answer: |
          For help with buying a visual, [contact support](https://support.microsoft.com/account-billing/contact-microsoft-store-support-4f615f2a-6bbd-fd69-6695-ae213d63eef0).  

  - name: License assignment
    questions:
      - question: |
          Who can assign licenses after the purchase is complete?
        answer: |
          The person who buys the visual is the owner, and only the owner can assign licenses. 
          
          > [!NOTE]
          > After buying the visual, the buyer (owner) is automatically assigned a license. Their license is available after [refreshing the report](#once-i-assign-a-license--how-long-does-it-take-until-i-can-use-it-). It might take a few minutes.

          If the tenant admin owns the licenses (organizational licenses), then any of the license admins (License Admin or User Admin) can manage the licenses.  
          However, if the license owner isn't an admin, then only the purchaser/owner can manage the subscription and licenses.

      - question: |
          How do we assign the licenses?
        answer: |
          Only the buyer (owner) can assign a license. You receive a license automatically within five minutes of purchasing the visual. If you want to assign a license to other users or update your subscription, go to [admin.microsoft.com](https://admin.microsoft.com/) and select the **License** link under the **Billing** node from the menu. A list of visuals appears.

          :::image type="content" source="./media/licensing-faq/assign-licenses.png" alt-text="Screenshot of Admin homepage with billing licenses selected.":::

           Select the Visual you want to assign licenses for. In the next page, select the user(s) you want to assign the licenses to.

      - question: |
          Once I assign a license, how long does it take until I can use it?
        answer: |
          > [!NOTE]
          > After you assign a license in the Microsoft 365 Admin Center, the license should be available within a few minutes.
          
          If you were just assigned a license, refresh the report to activate it by doing one of the following:
          
           * If you're using the licensed visual in the Power BI Service, refresh the report by hitting <kbd>F5</kbd>.
           * If you're using the licensed visual in the Power BI Desktop, close and reopen it.
          
           If, after you refresh, the license is still not available, wait a while and try again. It could take up to five minutes.

      - question: |
          Can I sign in to Microsoft 365 admin center even if I'm not an admin?
        answer: |
          Yes. When you purchase a Power BI Visual subscription, you also get access to the Microsoft 365 admin center. You can manage your own license subscriptions from there, but can’t see or access any other subscriptions unless you're an admin.

      - question: |
          Do I have to assign a license to myself even if I'm the owner?
        answer: |
          No. Buyers get a license assigned to them automatically. It can take up to five minutes from the time of purchase [for the license to take effect](#once-i-assign-a-license--how-long-does-it-take-until-i-can-use-it-). If you want to add more users or update your subscription, go to the [admin center](https://admin.microsoft.com/).

      - question: |
          As an admin can I see the subscriptions that were purchased in my organization?
        answer: |
          A tenant admin can see all subscriptions purchased under the tenant account, including the subscriptions purchased by non-admins.

      - question: |
          What happens if the subscription owner leaves the company?
        answer: |
          Even if the owner of the subscription leaves the company, tenant admin purchases (typically known as organizational purchases) continue to work as-is. If the owner was an admin, any license admin (License Admin, User Admin) can continue to manage the licenses. The subscriptions can be managed by any Billing Admin with access to the billing account used for purchase.  
          If the owner wasn't an admin, the license will continue to work as long as the subscription is active. However, the subscription can't be managed by anyone else.
          
      - question: |
          We're a global team. Can we assign licenses to someone working in another country/region?
        answer: |
          You can assign licenses to users in the same tenant that you purchased subscription under regardless of the location.

      - question: |
          As an admin, can I cancel offer purchase from AppSource?
        answer: |
          As a billing admin, you can see all subscriptions in the Microsoft 365 admin center, and you can cancel them.

      - question: |
          How can I get more help or support for managing licenses?
        answer: |
          For help managing licenses, [contact support](https://support.microsoft.com/account-billing/contact-microsoft-store-support-4f615f2a-6bbd-fd69-6695-ae213d63eef0)

additionalContent: |
  ## Related content

  [Licensing models](custom-visual-licenses.md)

  More questions? [Ask the Power BI Community](https://community.powerbi.com)



================================================
FILE: powerbi-docs/developer/visuals/local-storage.md
================================================
---
title: Local Storage API in Power BI Visuals
description: This article describes how to use the Power BI Visuals API to gain access to the browser's local storage.
author: billmath
ms.author: billmath
ms.reviewer: shafeeq, jennyf
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 04/30/2025
---

# Local Storage API

With the local storage API, you can store data in the browser's local storage. To use the local storage API, the customer's [local storage admin switch](/fabric/admin/organizational-visuals#local-storage) has to be enabled.

Local storage is isolated so that each type of visual has its own separate storage access.

> [!NOTE]
> It’s developer’s responsibility to ensure that the stored data conforms to the consumer’s organizational policies, and to inform users about what information is stored, if the sensitivity of the data requires it. In particular, custom visual developers should encrypt the data if business goals or scenarios expect it.

## How to use local storage

### [Version 1](#tab/v1)

This version of the *local storage API* is scheduled for deprecation. We're not accepting any more requests. When possible, use Version 2.

In the following example, a counter is increased whenever the *update* method is called. The counter value is saved locally and called each time the visual starts. This way, the counter continues counting from where it left off instead of starting over each time the visual is started:

```typescript
export class Visual implements IVisual {
        // ...
        private updateCountName: string = 'updateCount';
        private updateCount: number;
        private storage: ILocalVisualStorageService;
        // ...

        constructor(options: VisualConstructorOptions) {
            // ...
            this.storage = options.host.storageService;
            // ...

            this.storage.get(this.updateCountName).then(count =>
            {
                this.updateCount = +count;
            })
            .catch(() =>
            {
                this.updateCount = 0;
                this.storage.set(this.updateCountName, this.updateCount.toString());
            });
            // ...
        }

        public update(options: VisualUpdateOptions) {
            // ...
            this.updateCount++;
            this.storage.set(this.updateCountName, this.updateCount.toString());
            // ...
        }
}
```

### [Version 2](#tab/v2)

### Local storage methods

The local storage API has four methods:

* *status*:
  
  * Returns the status of the local storage v2 API.

    * PrivilegeStatus.DisabledByAdmin: the tenant admin switch is off
    * PrivilegeStatus.NotDeclared: the visual has no declaration for the local storage in the privileges array
    * PrivilegeStatus.NotSupported: the API isn't supported (see [limitations](#considerations-and-limitations) for more information)
    * PrivilegeStatus.Allowed: the API is supported and allowed

  Before using the *get*, *set*, or *remove* methods, it's best practice to use the *status* method to check the status of the API and ensure that your visual behaves as expected.

* *get*:

  * This method expects one parameter:

    * *key* – the key whose value you want to get.
  
  * Returns a promise that resolves with the value if the key exists, and rejects otherwise.

* *set*:

  * This method expects two parameters:

    * *key* – the key you want to set its value
    * *data* – the value for the key

  * Returns a promise that resolves to a *struct* of the type `StorageV2ResultInfo`, or rejects if an error occurred.

* *remove*:

  * This method expects one parameter:

    * *key* – the key of the pair you want to remove

### How to use the local storage API

To use the local storage API, add a declaration to the [privileges array in visual capabilities.](./capabilities.md#define-privileges)

The following example shows how to set and retrieve data from the local storage using version 2 of the local storage API:

```typescript
import IVisualLocalStorageV2Service = powerbi.extensibility.IVisualLocalStorageV2Service; 
import StorageV2ResultInfo = powerbi.extensibility.StorageV2ResultInfo; 
import PrivilegeStatus = powerbi.PrivilegeStatus; 
 
export class Visual implements IVisual { 
    // ... 
    private updateCountName: string = 'updateCount'; 
    private updateCount: number; 
    private storageV2Service: IVisualLocalStorageV2Service; 
 
    constructor(options: VisualConstructorOptions) { 
        this.storageV2Service = options.host.storageV2Service; 
        this.init(); 
    } 
 
    private async init() { 
        try { 
            let status: powerbi.PrivilegeStatus = await this.storageV2Service.status(); 
            if (status === PrivilegeStatus.DisabledByAdmin) { 
                //handle if the api blocked by admin 
            } else if (status === PrivilegeStatus.Allowed) { 
                this.updateCount = await this.storageV2Service.get(this.updateCountName); 
            } 
        } catch (error) { 
            //handle error 
        } 
    } 

    private async updateCount(count: number) { 
        try { 
            let status: PrivilegeStatus = await this.storageV2Service.status(); 
            if (status === PrivilegeStatus.Allowed) { 
                let resultInfo: StorageV2ResultInfo = this.storageV2Service.set(this.updateCountName, count); 
                if (resultInfo.success) { 
                    //updateCount was set. 
                } else { 
 
                } 
            } 
        } catch (error) { 
            // handle error 
        } 
    } 

    private async removeUpdateCount() { 
        let status: PrivilegeStatus = await this.storageV2Service.status(); 
        if (status === PrivilegeStatus.Allowed) { 
            this.storageV2Service.remove(this.updateCountName); 
        } 
    } 
} 
```

---

## Considerations and limitations

### [Considerations and limitations Version 1](#tab/v1)

* The local storage limit is 1 mb per GUID.
* Data can be shared between visuals with the same GUID only.
* Data can't be shared with another instance of Power BI Desktop.
* The local storage API isn't activated by default. To activate it for your Power BI visual, send a request to Power BI visuals support, `pbicvsupport@microsoft.com`.
* The local storage API doesn't support `await` constructions. Only `then` and `catch` methods are allowed.

**Your visual should be available in [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals) and be [certified](power-bi-custom-visuals-certified.md).**

### [Considerations and limitations Version 2](#tab/v2)

* The custom visuals local storage limit is 100 KB.
* Data can be shared between visuals with the same GUID, same environment, and for the same user only.
* The API is supported in the following environments:
  * Web
  * Desktop
  * SaaS Embed
  <!---   * Mobile
   * Report Server --->
   > [!NOTE]
   > There is currently no support for Report Server or Mobile.
* Local storage isn't supported when Exporting to *PDF* or *pptx*.
* The API is supported only when a user is signed in.
* A visual’s data is cleared 29 days after the most recent modification time.
* This API is a [privileged API](./capabilities.md#privileges-define-the-special-permissions-that-your-visual-requires).
* The key (parameter provided to *set*, *get*, *Remove*) has the following restrictions:
  * Length must be fewer than 128 characters
  * Can't contain the character '|'
* If the browser is in kiosk mode, local storage availability might differ between browsers, and by the kiosk owner's settings.
* There are many reasons this API might not be supported. For example, the environment might not be supported or the browser’s local storage isn't available. We recommend checking the *status* of the API before using the *set/get/remove* methods. Error handling is important since even if the API is supported, it might fail.

---

## Related content

* [Power BI custom visual API](visual-api.md)



================================================
FILE: powerbi-docs/developer/visuals/localization.md
================================================
---
title: Add the locale in Power BI for Power BI visuals
description: Learn how visuals can retrieve the Power BI locale to localize their content to the relevant language.
author: billmath
ms.author: billmath
manager: 
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 10/10/2024
#customer intent: As a Power BI visual developer, I want to learn how to localize my visual to the Power BI locale so that I can provide content in the user's language.
---

# Add the local language to your Power BI visual

Power BI [supports a range of local languages](./../../fundamentals/supported-languages-countries-regions.md). You can retrieve the Power BI locale language, and use it to display content in your visual.

The following tabs show examples of the same *sample bar chart* visual displaying content in different languages. Each of these bar charts was created using a different locale language (English, Basque, and Hindi) which is displayed in the tooltip.

## [English bar chart](#tab/English)

![Sample Bar Chart visual displaying in English.](media/localization/locale-in-sample-bar-chart-english.png)

## [Basque bar chart](#tab/basque)

![Sample Bar Chart visual displaying in Basque.](media/localization/locale-in-sample-bar-chart-basque.png)

## [Hindi bar chart](#tab/hindi)

![Sample Bar Chart visual displaying in Hindi.](media/localization/locale-in-sample-bar-chart-hindi.png)

---

> [!NOTE]
>
> * The localization manager in the visual's code is supported from API 1.10.0 and higher.
> * Localization is not supported for debugging the visual while in development.

## How to add the local Power BI language to your visual

To add the local Power BI language to your visual, follow these steps:

1. [Set up your environment to display a language that isn't English](#step-1---set-up-your-environment-to-display-a-language-that-isnt-english).

2. [Get the local Power BI language](#step-2---get-the-locale-power-bi-language).

3. [Set the visual display names](#step-3---set-the-visual-display-names)

4. [Create a language folder](#step-4---create-a-language-folder).

5. [Add a resources file for each language](#step-5---add-a-resources-file-for-each-language).

6. [Create a new localizationManager instance](#step-6---create-a-new-localizationmanager-instance).

7. [Call the getDisplayName function](#step-7---call-the-getdisplayname-function).

### Step 1 - Set up your environment to display a language that isn't English

To test your visual, set Power BI to a language that isn't English. This section shows how to change the settings of Power BI Desktop and Power BI service, so that they use a local language that isn't English.

* **Power BI Desktop** - Download the localized version of Power BI desktop from https://powerbi.microsoft.com

* **Power BI service** - If you're using Power BI service (web portal), change your language in settings:

    1. Sign in to [PowerBI.com](https://powerbi.microsoft.com/).

    2. Navigate to **Settings** > **General**.

          :::image type="content" source="./media/localization/powerbi-settings.png" alt-text="Screenshot of the settings, general, menu option in Power B I service.":::

    3. Select **Select display language** to select the language you want Power BI to use.

          :::image type="content" source="media/localization/webservice-settings.png" alt-text="Screenshot showing the language settings in Fabric.":::>

### Step 2 - Get the locale Power BI language

The local Power BI language is passed as a string called `locale` during the initialization of the visual. If a locale language is changed in Power BI, the visual is generated again in the new language.

```typescript
private locale: string;
...
this.locale = options.host.locale;
```

> [!NOTE]
> In Power BI Desktop, the `locale` property contains the language of the installed Power BI Desktop.

### Step 3 - Set the visual display names

Every visual displays information in the property pane. For example, a nonlocalized custom visual created by using the `pbiviz new` command shows the *Category Data* and *Measure Data* fields in the property pane.

>[!div class="mx-imgBorder"]
>![A screenshot showing the category data and measure data fields in a newly created Power BI visual.](media/localization/property-pane.png)

The property pane display fields are defined in the  **capabilities.json** file. Every display field is defined using a `displayName` property. Add a `displayNameKey` to every display name you want to localize.

```json
{
    "dataRoles": [
        {
            "displayName": "Category Data",
            "displayNameKey": "VisualCategoryDataNameKey1",
            "name": "category",
            "kind": "Grouping"
        },
        {
            "displayName": "Measure Data",
            "displayNameKey": "VisualMeasureDataNameKey2",
            "name": "measure",
            "kind": "Measure"
        }
    ]
}
```

### Step 4 - Create a language folder

To create localized visuals, your project needs to have a language folder. In your project, create a folder called **stringResources**. The folder contains one sub folder for each local language you want your visual to support. For example, to support Arabic and Hebrew, add two folders in the following way:

>[!div class="mx-imgBorder"]
>![A VS code screenshot of a visual project folder.The string resources folder has two sub folders, one for Arabic and one for Hebrew.](media/localization/stringresources-files.png)

### Step 5 - Add a resources file for each language

For each language you want your visual to support, add a **resources.resjson** JSON file in the appropriate **stringResources** sub folder. These files contain the locale language information, and the localized string values for every `displayNameKey` you want to replace.

>[!div class="mx-imgBorder"]
>![A VS code screenshot of a visual project folder. Each sub-folder in the string resources folder has a resources dot resjson file.](media/localization/new-resjson.png)

Every JSON file defines a single [supported locale language](#supported-languages). Add all the localization strings you're going to use into each **resources.resjson** file.

#### Examples

* **resources.resjson** file with *Russian* strings for each `displayNameKey`.

    ```json
    {
        ...
        "Role_Legend": "Обозначения",
        "Role_task": "Задача",
        "Role_StartDate": "Дата начала",
        "Role_Duration": "Длительность"
        ...
    }
    ```

* **resources.resjson** file with *Hebrew* strings for each `displayNameKey`.

    ```json
    {
        ...
        "Role_Legend": "מקרא",
        "Role_task": "משימה",
        "Role_StartDate": "תאריך התחלה",
        "Role_Duration": "משך זמן"
        ...
    }
    ```

### Step 6 - Create a new localizationManager instance

Create a new `localizationManager` instance in your visual's code.

```typescript
private localizationManager: ILocalizationManager;

constructor(options: VisualConstructorOptions) {
    this.localizationManager = options.host.createLocalizationManager();
}
```

### Step 7 - Call the getDisplayName function

After creating a new `localizationManager` instance, you can call the localization manager's `getDisplayName` function with the string key argument you defined in **resources.resjson**.

For example, the following code returns *Legend* for **en-US**, and *Обозначения* for **ru-RU**.

```typescript
let legend: string = this.localization.getDisplayName("Role_Legend");
```

## Format pane and analytics pane localization

> [!NOTE]
> Relevant to API version 5.1+

To support localization on format pane and analytics pane components, set localized string as follows:

```typescript
displayName: this.localization.getDisplayName("Font_Color_DisplayNameKey");
description: this.localization.getDisplayName("Font_Color_DescriptionKey");
```

For **localize formatting model** see [format pane localization](format-pane-example.md#localization).  
For **localize formatting model utils** see [formatting model utils - localization](utils-formatting-model.md#localization).

## Supported languages

The following table contains a list of all the languages supported in Power BI, and the string that the `locale` variable returns for each one.

Locale string | Language
--------------|---------------------
ar-SA | العربية (Arabic)
bg-BG | български (Bulgarian)
ca-ES | català (Catalan)
cs-CZ | čeština (Czech)
da-DK | dansk (Danish)
de-DE | Deutsche (German)
el-GR | ελληνικά (Greek)
en-US | English (English)
es-ES | español service (Spanish)
et-EE | eesti (Estonian)
eU-ES | Euskal (Basque)
fi-FI | suomi (Finnish)
fr-FR | français (French)
gl-ES | galego (Galician)
he-IL | עברית (Hebrew)
hi-IN | हिन्दी (Hindi)
hr-HR | hrvatski (Croatian)
hu-HU | magyar (Hungarian)
id-ID | Bahasa Indonesia (Indonesian)
it-IT | italiano (Italian)
ja-JP | 日本の (Japanese)
kk-KZ | Қазақ (Kazakh)
ko-KR | 한국의 (Korean)
lt-LT | Lietuvos (Lithuanian)
lv-LV | Latvijas (Latvian)
ms-MY | Bahasa Melayu (Malay)
nb-NO | norsk (Norwegian)
nl-NL | Nederlands (Dutch)
pl-PL | polski (Polish)
pt-BR | português (Portuguese)
pt-PT | português (Portuguese)
ro-RO | românesc (Romanian)
ru-RU | русский (Russian)
sk-SK | slovenský (Slovak)
sl-SI | slovenski (Slovenian)
sr-Cyrl-RS | српски (Serbian)
sr-Latn-RS | srpski (Serbian)
sv-SE | svenska (Swedish)
th-TH | ไทย (Thai)
tr-TR | Türk (Turkish)
uk-UA | український (Ukrainian)
vi-VN | tiếng Việt (Vietnamese)
zh-CN | 中国 (Chinese-Simplified)
zh-TW | 中國 (Chinese-Tranditional)

## Related content

[Formatting utils](utils-formatting.md)

Questions? Ask the [Power BI community](https://community.powerbi.com/)



================================================
FILE: powerbi-docs/developer/visuals/mobile-development.md
================================================
---
title:  Mobile development in Power BI
description: Learn how to create mobile-friendly Power BI visuals by using essential and recommended functions to add interactive functionality.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 1/19/2024
#customer intent: As a Power BI visual developer, I want to learn how to create mobile-friendly visuals so that I can provide a better user experience on mobile devices.
---

# How to create mobile-friendly Power BI visuals

Mobile devices allow users to connect to their data anytime and anywhere.

[Power BI apps for Windows, iOS, and Android](../../consumer/mobile/mobile-apps-for-mobile-devices.md) enable business users to have a comprehensive view of their data that's always at their fingertips.

As a developer creating Power BI visuals, you must address the unique constraints of each mobile device to reach as many users as possible and provide the best mobile experience.

## Required functionality

The following requirements are essential for developing mobile-friendly visuals:

* **Rendering**

  A Power BI visual has to render on all [supported mobile devices](/power-platform/admin/supported-web-browsers-and-mobile-devices), including browsers and applications. There should be no errors in reports and dashboards, or when visuals run in **Focus** mode.

* **Interactivity**

  Mobile devices should have the same interactive functionality as desktop devices. All events handled on desktop browsers must be supported, or have comparable event handlers, on mobile devices.
  
  For example, if a desktop visual supports multi-selection using the <kbd>Ctrl</kbd> key, consider adding a similar event handler for mobile devices.

  The following table provides a list of corresponding events on mobile devices.

  | Mouse event name | Touch event name |
  |:----------------:|:----------------:|
  | `click` | `click` |
  | `mousemove` | `touchmove` |
  | `mousedown` | `touchstart` |
  | `mouseup` | `touchend` |
  | `dblclick` | external library |
  | `contextmenu` | external library |
  | `mouseover` | `touchmove` |
  | `mouseout` | `touchmove` (or external library) |
  | `wheel` | `N/A` |

  > [!NOTE]
  > Not all mobile or touch screen devices support mouse (or *mouse* prefixed) events. In unsupported cases, handle both *mouse* and *touch* events at the same time.

## Optional functionality

The following functions are optional. The optional functions can be used to create a better end-user experience.

* **Recommended rendering**

  To support smaller visual sizes, add format options that allow the user to adjust the size of each element. For example, add format options to labels to use in reports and dashboards. The format options allow users to customize a visual specifically for their mobile device.
  
  The same settings can be applied to the visuals in desktop browsers and, if needed, be overridden to adapt the visual to smaller screens.

  > [!NOTE]
  > To optimize a visual in **Focus** mode, both portrait and landscape screen size orientations should be considered. See [Display content in Focus mode](../../consumer/end-user-focus.md).

* **Recommended interactivity**

  Consider adding mobile-specific event handlers, like dragging and scrolling.

* **Failover**

  If a visual can't render on a mobile device, the visual should show a **descriptive** error.

## Supported browsers and devices

Power BI visuals must render on all devices that support Power BI apps. For more information, see [supported browsers for Power BI](../../fundamentals/power-bi-browsers.md) and [Power BI mobile apps](../../consumer/mobile/mobile-apps-for-mobile-devices.md).

## Related content

[Develop a Power BI circle card visual](./develop-circle-card.md)


================================================
FILE: powerbi-docs/developer/visuals/no-dataroles-support.md
================================================
---
title: Create custom Power BI visuals without data binding
description: Learn how to create custom visuals for Power BI without data roles by using the No data binding feature.
author: billmath
ms.author: billmath
ms.reviewer: v-asemenov
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 1/31/2024
#customer intent: As a Power BI visual developer, I want to learn how to create a visual that doesn't require data binding so that I can create visuals that don't need data roles.
---

# Create custom Power BI visuals without data binding

This article explains how to use the *No data binding feature* to create Power BI custom visuals without data roles. Ordinarily, when you create a visual in a Power BI report, the values are defined interactively by adding data fields to the **Values** well on the **Visualizations** pane.

:::image type="content" source="media/no-dataroles-support/binding-data.png" alt-text="Screenshot of a Power BI visual that shows the Values well in the Visualizations pane.":::

By default, if no values are defined, the format settings are disabled, and you can't update the visual's formatting.

The `dataRoles` property of the [capabilities model](capabilities.md) allows you to format graphics in Power BI without binding data.

Using the `dataRoles` capabilities property, you can render a visual and use the `update` method to change the format settings. You can change settings even if the data buckets are empty, or if your visual doesn't use any data roles.

The following tabs show two examples of a Power BI visual. One visual requires binding data, and the other uses the *no data roles* feature and doesn't require binding data.

## [Binding data required](#tab/NoDataroles)

When binding data is required, the formatting settings are disabled if there are no data roles or the data wells are empty.

:::image type="content" source="media/no-dataroles-support/no-dataroles-1.png" alt-text="Screenshot of a Power BI visual that shows empty data and inactive visual settings in the Visualizations pane.":::

## [Binding data not required](#tab/NoDatarolesSupport)

With the *no data binding* feature, the formatting settings are enabled even if there are no data roles or the data wells are empty.

:::image type="content" source="media/no-dataroles-support/no-dataroles-2.png" alt-text="Screenshot of a Power BI visual that shows empty data and active format settings in the Visualizations pane.":::

---

## How to create a visual that doesn't require data binding

> [!NOTE]
> This feature is available from [API version 3.6.0](changelog.md#api-v360) and above. To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

To enable the No data binding feature, set the following two parameters in the *capabilities.json* file to `true`.

* `supportsLandingPage` allows you to display information on the Power BI card before it's loaded with data.

* `supportsEmptyDataView` allows Power BI updates when the values field is empty.

```json
    {
        "supportsLandingPage": true,
        "supportsEmptyDataView": true,
    }
```

## Related content

* [Using capabilities](capabilities.md)
* [Add a landing page](landing-page.md)



================================================
FILE: powerbi-docs/developer/visuals/objects-properties.md
================================================
---
title: Objects and properties of Power BI visuals
description: This article explains which Power BI visual properties are customizable and how to customize the visual properties in the formatting pane.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 10/11/2024
#customer intent: As a Power BI visual developer, I want to learn about the objects and properties of Power BI visuals so that I can customize my visuals.
---

# Objects and properties of Power BI visuals

Objects describe customizable properties that are associated with a visual. An object can have multiple properties, and each property has an associated type that describes what the property will be. This article provides information about objects and property types.

`myCustomObject` is the internal name that's used to reference the object within `dataView`.

```json
"objects": {
    "myCustomObject": {
        "properties": { ... }
    }
}
```

## Display name and description

> [!NOTE]
> Display name and description are deprecated from API version 5.1+. The display name and description are now added in the formatting model instead of the *capabilities.json* file.

`displayName` is the name that will be shown in the property pane.
`description` is a description of the formatting property that will be shown to the user as a tooltip.

## Properties

`properties` is a map of properties that are defined by the developer.

```json
"properties": {
    "myFirstProperty": {
        "type": ValueTypeDescriptor | StructuralTypeDescriptor
    }
}
```

> [!NOTE]
> `show` is a special property that enables a switch to toggle the object.

Example:

```json
"properties": {
    "show": {
        "type": {"bool": true}
    }
}
```

### Property types

There are two property types: `ValueTypeDescriptor` and `StructuralTypeDescriptor`.

#### Value type descriptor

`ValueTypeDescriptor` types are mostly primitive and are ordinarily used as a static object.

Here are some of the common `ValueTypeDescriptor` elements:

```typescript
export interface ValueTypeDescriptor {
    text?: boolean;
    numeric?: boolean;
    integer?: boolean;
    bool?: boolean;
}
```

#### Structural type descriptor

`StructuralTypeDescriptor` types are mostly used for data-bound objects.
The most common `StructuralTypeDescriptor` type is *fill*.

```typescript
export interface StructuralTypeDescriptor {
    fill?: FillTypeDescriptor;
}
```

## Gradient property

The gradient property is a property that can't be set as a standard property. Instead, you need to set a rule for the substitution of the color picker property (*fill* type).

An example is shown in the following code:

```json
"properties": {
    "showAllDataPoints": {
        "type": {
            "bool": true
        }
    },
    "fill": {
        "type": {
            "fill": {
                "solid": {
                    "color": true
                }
            }
        }
    },
    "fillRule": {
        "type": {
            "fillRule": {}
        },
        "rule": {
            "inputRole": "Gradient",
            "output": {
                "property": "fill",
                    "selector": [
                        "Category"
                    ]
            }
        }
    }
}
```

Pay attention to the *fill* and *fillRule* properties. The first is the color picker, and the second is the substitution rule for the gradient that will replace the *fill property*, `visually`, when the rule conditions are met.

This link between the *fill* property and the substitution rule is set in the `"rule"`>`"output"` section of the *fillRule* property.

`"Rule"`>`"InputRole"` property sets which data role triggers the rule (condition). In this example, if data role `"Gradient"` contains data, the rule is applied for the `"fill"` property.

An example of the data role that triggers the fill rule (`the last item`) is shown in the following code:

```json
{
    "dataRoles": [
            {
                "name": "Category",
                "kind": "Grouping",
                "displayName": "Details",
                "displayNameKey": "Role_DisplayName_Details"
            },
            {
                "name": "Series",
                "kind": "Grouping",
                "displayName": "Legend",
                "displayNameKey": "Role_DisplayName_Legend"
            },
            {
                "name": "Gradient",
                "kind": "Measure",
                "displayName": "Color saturation",
                "displayNameKey": "Role_DisplayName_Gradient"
            }
    ]
}
```

## Formatting pane

To customize the properties in the formatting pane, use one of the following methods, depending on what API version you're using.

### [getFormattingModel API method](#tab/getFormattingModel)

> [!NOTE]
> The `getFormattingModel` API method is supported from API versions 5.1+. To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

To use objects effectively in API version 5.1+, you need to implement the `getFormattingModel` method.  
This method builds and returns a formatting model that includes full [properties pane](./format-pane-general.md) hierarchy of formatting cards, formatting groups, Also it contains formatting properties and their values.

### Capabilities objects reflected in formatting model

Each formatting property in the formatting model needs a corresponding object in the *capabilities.json* file. The formatting property should contain a descriptor with an object name and property name that exactly match the corresponding capabilities object (the object and property names are case sensitive).  
For example:

For the following formatting property in the formatting model (See the descriptor object content):

```typescript
 const myCustomCard: powerbi.visuals.FormattingCard = {
            displayName: "My Custom Object Card",
            uid: "myCustomObjectCard_uid",
            groups: [{
                displayName: undefined,
                uid: "myCustomObjectGroup_uid",
                slices: [
                    {
                        uid: "myCustomProperty_uid",
                        displayName: "My Custom Property",
                        control: {
                            type: powerbi.visuals.FormattingComponent.ColorPicker,
                            properties: {
                                descriptor: {
                                    objectName: "myCustomObject",
                                    propertyName: "myCustomProperty",
                                    selector: null // selector is optional
                                },
                                value: { value: "#000000" }
                            }
                        }
                    }
                ],
            }],
        };
```

The corresponding object from the capabilities `objects` section should be:

```json
    "objects": {
        "myCustomObject": {
            "properties": {
                "myCustomProperty": {
                    "type": {
                         "fill": {
                            "solid": {
                                "color": true
                            }
                        }
                    }
                }
            }
        }
    }           
```

### Formatting property selector

The optional selector in formatting properties descriptor determines where each property is bound in the dataView. There are [four distinct options](#objects-selectors-types).

#### Example

The above `myCustomCard` example shows what formatting property in formatting model would look like for an object with one property `myCustomProperty`. This property object bound *statically* to `dataViews[index].metadata.objects`.
Selector in descriptor can be changed accordingly to [selector type](#objects-selectors-types) you choose.

### [enumerateObjectInstances API method - deprecated](#tab/enumerateObjectInstances)

> [!NOTE]
> The enumerateObjectInstances method has been deprecated from API version 5.1. It was replaced by the `getFormattingModel` in the new API.

To use objects effectively, you need a function in your custom visual called `enumerateObjectInstances`. This function populates the property pane with objects and also determines where your objects should be bound within the dataView.  

Here is what a typical setup looks like:

```typescript
public enumerateObjectInstances(options: EnumerateVisualObjectInstancesOptions): VisualObjectInstanceEnumeration {
    let objectName: string = options.objectName;
    let objectEnumeration: VisualObjectInstance[] = [];

    switch( objectName ) {
        case 'myCustomObject':
            objectEnumeration.push({
                objectName: objectName,
                properties: { ... },
                selector: { ... }
            });
            break;
    };

    return objectEnumeration;
}
```

### enumerateObjectInstances properties

The properties in `enumerateObjectInstances` reflect the properties that you defined in your capabilities. For an example, go to the end of this article.

### enumerateObjectInstances Example

The following example shows what one objectEnumeration would look like for a customColor object with one property, *fill*. We want this object bound statically to `dataViews[index].metadata.objects`, as shown:

```typescript
objectEnumeration.push({
    objectName: "customColor",
    displayName: "Custom Color",
    properties: {
        fill: {
            solid: {
                color: dataPoint.color
            }
        }
    },
    selector: null
});
```

---

### Objects selectors types

The selector in `enumerateObjectInstances` determines where each object is bound in the dataView. There are four distinct options:

* [static](#static)
* [columns](#columns)
* [selector](#selector)
* [scope identity](#scope-identity)

#### static

This object is bound to metadata `dataviews[index].metadata.objects`, as shown here.

```typescript
selector: null
```

#### columns

This object is bound to columns with the matching `QueryName`.

```typescript
selector: {
    metadata: 'QueryName'
}
```

#### selector

This object is bound to the element that you created a `selectionID` for. In this example, let's assume that we created `selectionID`s for some data points, and we're looping through them.

```typescript
for (let dataPoint in dataPoints) {
    ...
    selector: dataPoint.selectionID.getSelector()
}
```

#### Scope identity

This object is bound to particular values at the intersection of groups. For example, if you have categories `["Jan", "Feb", "March", ...]` and series `["Small", "Medium", "Large"]`, you might want to have an object at the intersection of values that match `Feb` and `Large`. To accomplish this, you could get the `DataViewScopeIdentity` of both columns, push them to variable `identities`, and use this syntax with the selector.

```typescript
selector: {
    data: <DataViewScopeIdentity[]>identities
}
```

## Related content

[Performance tips](performance-tips.md)



================================================
FILE: powerbi-docs/developer/visuals/office-store.md
================================================
---
title: Publish Power BI visuals
description: Learn how to publish your custom visual to Partner Center and make it available for others to discover and use in the Microsoft commercial marketplace.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/09/2024
#customer intent: As a developer, I want to learn how to publish my Power BI visual to the Microsoft commercial marketplace so that others can discover and use it.
---

# Publish Power BI visuals to the Microsoft commercial marketplace

Once you have created your Power BI visual, you may want to publish it to AppSource for others to discover and use. For a detailed explanation of how to create a Power BI visual offer, see [Plan a Power BI visual offer](/azure/marketplace/marketplace-power-bi-visual).

## What is AppSource?

[AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals) is the place to find SaaS apps and add-ins for your Microsoft products and services. You can find many Power BI visuals here.

![Screenshot of Power B I visuals in AppSource.](media/office-store/appsource-01.png)

## Prerequisite

To submit your Power BI visual, you must be enrolled with [Partner Center](/partner-center/overview). If you're not yet enrolled, [Open a developer account in Partner Center](/azure/marketplace/create-account).

## Prepare to submit your Power BI visual

Before submitting a Power BI visual to AppSource, ensure that it complies with the [Power BI visuals guidelines](guidelines-powerbi-visuals.md).

>[!IMPORTANT]
>If you're resubmitting or updating a visual, **do not change its GUID**. Follow these instructions to [test a new version of a visual](submission-testing.md#testing-a-new-version-of-a-published-visual).

When you're ready to submit your Power BI visual, verify that your visual meets all the following requirements.

| Item | Required | Description |
| --- | --- | --- |
| Pbiviz package |Yes |[Pack your Power BI visual into a *.pbiviz* package](package-visual.md). Ensure the *pbiviz.json* file contains all the required metadata: <br>- Visual name<br>- Display name<br> - GUID<br> - Version (four digits: `x.x.x.x`)<br> - Description<br> - Support URL<br> - Author name and email |
| Sample *.pbix* report file |Yes |To help users become familiar with the visual, highlight the value that the visual brings to the user and give examples of usage and formatting. You can also add a *"hints"* page at the end with some tips and tricks and things to avoid.<br>The sample *.pbix* report file must work offline, without any external connections. |
| Logo |Yes |Include the custom visual logo that will appear in the Marketplace listing. It should be in PNG format and exactly 300 x 300 px.<BR>**Important!** Review the [AppSource store images guide](/office/dev/store/craft-effective-appsource-store-images) carefully, before submitting the logo. |
| Screenshots |Yes |Provide at least one screenshot, and up to five, in PNG format. The dimensions must be exactly 1366 px (width) by 768 px (height), and the size not larger than 1024 kb.<br>Add text bubbles to explain the value of key features shown in each screenshot. |
| Support download link |Yes |Provide a support URL for your customers. This link is entered as part of your Partner Center listing, and is visible to users when they access your visual's listing on AppSource. The URL should start with https://. |
| Privacy document link |Yes |Provide a link to the visual's privacy policy. This link is entered as part of your Partner Center listing, and is visible to users when they access your visual's listing on AppSource. The URL should start with https://. |
| End-user license agreement (EULA) |Yes |You must provide an EULA file for your Power BI visual. You can use the [standard contract](https://go.microsoft.com/fwlink/?linkid=2041178), [Power BI visuals contract](https://powerbi.microsoft.com/visuals-gallery-terms/), or your own EULA. |
| Video link |No |To increase the interest of users for your custom visual, provide a link to a video about your visual. The URL should start with https://. |

## Submit or update your custom visual to AppSource

To submit a Power BI visual to AppSource, upload a **.pbiviz** package and **.pbix** file to Partner Center.

Before you create the **.pbiviz** package, complete the following fields in the **pbiviz.json** file:

* description
* supportUrl
* author
* name
* email

>[!NOTE]
>**Individual publishers** can use one of these methods to submit a Power BI visual:
>
>* If you have an old Seller Dashboard account, you can continue using this account's credentials to sign into Partner Center.
>* If you don't have an old Seller Dashboard account, and are not registered to Partner Center, you'll need to [Open a developer account in Partner Center](/office/dev/store/open-a-developer-account) using your work email.

> [!IMPORTANT]
> Before you submit your visual, make sure it passes all the [requirements](submission-testing.md). A visual that doesn't pass the requirements will be rejected.

When you're ready to create or update your offer, follow the instructions in [Create a Power BI app offer](/azure/marketplace/marketplace-power-bi-visual).

## Track submission status and usage

* Review the [validation policies](/legal/marketplace/certification-policies#1180-power-bi-visuals).

<!--- * After submission, you will be able to view the submission status in the [app dashboard](https://sellerdashboard.microsoft.com/Application/Summary/). --->

* To understand when your Power BI visual will be available to download from AppSource, review the Power BI visuals [publication timeline](power-bi-custom-visuals-certified.md#publication-timeline).

## Certify your visual

Certified Power BI visuals are visuals in the Marketplace that meet certain specified code [requirements](power-bi-custom-visuals-certified.md#certification-requirements) that the Microsoft Power BI team has tested and approved. To request certification, select the Request Power BI certification check box.
We recommend that you submit and publish your Power BI visual before you request certification, because the certification process can take time. When you request certification, be sure to provide all required certification information in the Notes for certification box on the Review and publish page.
All certified visuals must pass all the [certification requirements](power-bi-custom-visuals-certified.md#certification-requirements).

## Related content

* [Performance tips for creating quality Power BI custom visuals](performance-tips.md)
* [Guidelines for publishing Power BI visuals](guidelines-powerbi-visuals.md)
* [Test your Power BI visual before submitting for certification](submission-testing.md)  

**More questions?** [Try asking the Power BI Community](https://community.powerbi.com/).



================================================
FILE: powerbi-docs/developer/visuals/on-object-formatting-api.md
================================================
---
title: Format objects directly API in Power BI Visuals
description: The article describes how to use Power BI Visuals On-object formatting API to allow users to format visuals easily.
author: billmath
ms.author: billmath
ms.reviewer: tebercov , shafeeq
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 02/19/2024
---

# On-object formatting API (preview)

[On-object formatting](../../create-reports/power-bi-on-object-interaction.md) allows users to quickly and easily modify the format of visuals by directly selecting the elements they want to modify. When an element is selected, the format pane automatically navigates and expands the specific formatting setting for the selected element.
For more information about on-object formatting, see [On-object formatting in Power BI Desktop](../../create-reports/power-bi-on-object-interaction.md).

To add these functionalities to your visual, each visual needs to provide a subselection style option and shortcut for each subselectable region.

> [!NOTE]
>
> * Visuals that support on-object formatting need to implement the [getFormattingModel API](./format-pane-general.md#formatting-model) which is available from API version 5.1.
> * If you are using powerbi-visuals-utils-formattingmodel, use version 6.0.0 at least.

## Create an on-object experience

Use the subselection service when the user selects a subselectable element to send Power BI the subselection. Provide the subselection styles and shortcuts using the [subselection API](./subselection-api.md). The [subselection helper](./utils-on-object.md) can be used to simplify the process.

## Format mode

Format mode is a new mode where the user can turn `onObject` formatting on and off when in authoring mode. The visual is updated with the status of the format mode in the update options. The update options also include the currently subselected subSelection as `CustomVisualSubSelection`.

## How to implement the on-object formatting API

### Capabilities file

In the *capabilites.json* file, add the following properties to declare that the visual supports on-object formatting:

```json
{
  "supportsOnObjectFormatting": true,
  "enablePointerEventsFormatMode": true,
}
```

### IVisual interface

The visual needs to implement the `VisualOnObjectFormatting` interface as part of the IVisual interface.

VisualOnObjectFormatting contains three methods:

* [getSubSelectionStyles](#getsubselectionstyles)
* [getSubSelectionShortcuts](#getsubselectionshortcuts)
* [getSubSelectables](#getsubselectables)

#### getSubSelectionStyles

Each visual is required to implement a `getSubSelectionStyles` method, which is called when a subselectable element is subselected. The `getSubSelectionStyles` method is provided with the current subselected elements as a `CustomVisualSubSelection` array and is expected to return either a `SubSelectionStyles` object or `undefined`.

There are three categories of subselection styles that cover most scenarios:

* Text
* Numeric Text
* Shape

Each `SubSelectionStyles` object provides a different experience for the user for modifying the style of an element.

#### getSubSelectionShortcuts

To provide more options for the user, the visual must implement the `getSubSelectionShortcuts` method. This  method returns either `VisualSubSelectionShortcuts` or `undefined`. Additionally, if `SubSelectionShortcuts` are provided, a `VisualNavigateSubSelectionShortcut` must also be provided so that when a user subselects an element and the format pane is open, the pane automatically scrolls to the appropriate card.

There are several subselection shortcuts to modify the visual state. Each one defines a menu item in the context menu with the appropriate label.

**Sub-Selection Disambiguation Menu:**
The On-Object disambiguation menu provides a method for users to select their desired subselection when it's not clear which visual element is being subselected. This often happens when the user subselects the background of the visual. For the disambiguous menu to present more subselections, the visual must provide all subselections via the [`getSubSelectables`](#getsubselectables) method.

#### getSubSelectables

To provide subselections to the disambiguation menu, the visual needs to implement the `getSubSelectables` method. This method is provided an optional `filterType` argument, of type `SubSelectionStylesType` and returns an array of `CustomVisualSubSelection` or `undefined`.
If the `HTMLSubSelectionHelper` is being utilized to create a subselection, the *HTMLSubSelectionHelper.getSubSelectables()* method can be used to gather subselectable elements from the DOM.

**Sub-Selection Direct Text Editing:**
With On-Object formatting, you can double-click the text of a subs-electable element to directly edit it.
To provide direct-edit capability, you need to provide a `RectangleSubSelectionOutline` with the appropriate cVDirectEdit Property populated with a SubSelectableDirectEdit object. The outline can either be provided as a custom outline or, if you're using the `HTMLSubSelectionHelper` you can use the `SubSelectableDirectEdit` attribute. (See the attributes provided by the HTMLSubSelectionHelper)

Adding a direct edit for a specific datapoint (using selectors) isn't yet supported.

### FormattingId interface

The following interface is used to reference the `subSelection` shortcuts and styles.

```typescript
interface FormattingId {
            objectName: string;
            propertyName: string;
            selector?: powerbi.data.Selector;
        }
```

* objectName: the object name as declared in the capabilities.json.
* propertyName: the property name of an object as declared in the capabilities.json.
* selector:  if the datapoint has a selectionId, use selectionId.getSelector(), this selector must be the same as provided for the formatting model slice.

## Examples

In this example, we  build a custom visual that has two objects, `colorSelector` and `directEdit`. We use the `HTMLSubSelectionHelper` from the `onobjectFormatting` utils, to handle most of the subSelection job.
For more information, see [on-object utils](./utils-on-object.md).

First, we build cards for the formatting pane and provide *subSelectionShortcuts* and *styles* for each subselectable.

### Define the objects

Define the objects and declare that the visual is supporting OnObject Formatting in the capabilities.json:

```json
"objects": {
      "directEdit": {
      "properties": {
        "show": {
          "displayName": "Show",
          "type": {
            "bool": true
          }
        },
        "textProperty": {
          "displayName": "Text",
          "type": {
            "text": true
          }
        },
        "fontFamily": {
          "type": {
            "formatting": {
              "fontFamily": true
            }
          }
        },
        "fontSize": {
          "type": {
            "formatting": {
              "fontSize": true
            }
          }
        },
        "bold": {
          "type": {
            "bool": true
          }
        },
        "italic": {
          "type": {
            "bool": true
          }
        },
        "underline": {
          "type": {
            "bool": true
          }
        },
        "fontColor": {
          "displayName": "Font Color",
          "type": {
            "fill": {
              "solid": {
                "color": true
              }
            }
          }
        },
        "background": {
          "displayName": "Background",
          "type": {
            "fill": {
              "solid": {
                "color": true
              }
            }
          }
        },
        "position": {
          "displayName": "Position",
          "type": {
            "enumeration": [
              { "displayName": "Left", "value": "Left" }, { "displayName": "Right", "value": "Right" }
            ]
          }
        }
      }
    },
    "colorSelector": {
      "displayName": "Data Colors",
      "properties": {
        "fill": {
          "displayName": "Color",
          "type": {
            "fill": {
              "solid": {
                "color": true
              }
            }
          }
        }
      }
    },
   },
  "supportsOnObjectFormatting": true,
  "enablePointerEventsFormatMode": true,
```

### Build the formatting cards

Build their formatting cards using the [formattingModel utils](./format-pane-general.md#formatting-model).

#### Color selector card settings

```typescript
class ColorSelectorCardSettings extends Card {
    name: string = "colorSelector";
    displayName: string = "Data Colors";
    slices = [];
}
```

Add a method to the formattingSetting so we can populate the slices dynamically for the colorSelector object (our datapoints).

```typescript
populateColorSelector(dataPoints: BarChartDataPoint[]) {
        let slices: formattingSettings.ColorPicker[] = this.colorSelector.slices;
        if (dataPoints) {
            dataPoints.forEach(dataPoint => {
                slices.push(new formattingSettings.ColorPicker({
                    name: "fill",
                    displayName: dataPoint.category,
                    value: { value: dataPoint.color },
                    selector: dataPoint.selectionId.getSelector(),
                }));
            });
        }
    }
```

We pass the selector of the specific datapoint in the selector field. This selector is the one used when implementing the get APIs of the OnObject.

#### Direct edit card settings

```typescript
class DirectEditSettings extends Card {
    displayName = 'Direct Edit';
    name = 'directEdit';
    private minFontSize: number = 8;
    private defaultFontSize: number = 11;
    show = new formattingSettings.ToggleSwitch({
        name: "show",
        displayName: undefined,
        value: true,
    });
    topLevelSlice = this.show;
    textProperty = new formattingSettings.TextInput({
        displayName: "Text Property",
        name: "textProperty",
        value: "What is your quest?",
        placeholder: ""
    });
    position = new formattingSettings.ItemDropdown({
        name: 'position',
        items: [{ displayName: 'Left', value: 'Left' }, { displayName: 'Right', value: 'Right' }],
        value: { displayName: 'Right', value: 'Right' }
    });
    font = new formattingSettings.FontControl({
        name: "font",
        displayName: 'Font',
        fontFamily: new formattingSettings.FontPicker({
            name: "fontFamily",
            displayName: "Font Family",
            value: "Segoe UI, wf_segoe-ui_normal, helvetica, arial, sans-serif"
        }),
        fontSize: new formattingSettings.NumUpDown({
            name: "fontSize",
            displayName: "Font Size",
            value: this.defaultFontSize,
            options: {
                minValue: {
                    type: powerbi.visuals.ValidatorType.Min,
                    value: this.minFontSize,
                }
            }
        }),
        bold: new formattingSettings.ToggleSwitch({
            name: 'bold',
            displayName: "Font Size",
            value: true
        }),
        italic: new formattingSettings.ToggleSwitch({
            name: 'italic',
            displayName: "Font Size",
            value: true
        }),
        underline: new formattingSettings.ToggleSwitch({
            name: 'underline',
            displayName: "Font Size",
            value: true
        })
    });
    fontColor = new formattingSettings.ColorPicker({
        name: "fontColor",
        displayName: "Color",
        value: { value: "#000000" }
    });
    background = new formattingSettings.ColorPicker({
        name: "background",
        displayName: "Color",
        value: { value: "#FFFFFF" }
    });
    slices = [this.show, this.textProperty, this.font, this.fontColor, this.background, this.position];
}
```

### Use subselection helper attributes

Add the `HTMLSubSelectionHelper` attributes to our objects. To see which attributes the HTMLSubSelectionHelper provide, check the on [object utils documentation](./utils-on-object.md).

* For the directEdit attribute:

  ```typescript
  import {
     HtmlSubSelectableClass, HtmlSubSelectionHelper, SubSelectableDirectEdit as SubSelectableDirectEditAttr,
     SubSelectableDisplayNameAttribute, SubSelectableObjectNameAttribute, SubSelectableTypeAttribute 
  } from 'powerbi-visuals-utils-onobjectutils';

  const DirectEdit: powerbi.visuals.SubSelectableDirectEdit = {
      reference: {
          objectName: 'directEdit',
          propertyName: 'textProperty'
      },
      style: SubSelectableDirectEditStyle.Outline,
  };
  private visualDirectEditSubSelection = JSON.stringify(DirectEdit);

  this.directEditElement
              .classed('direct-edit', true)
              .classed('hidden', !this.formattingSettings.directEditSettings.show.value)
              .classed(HtmlSubSelectableClass, options.formatMode && this.formattingSettings.directEditSettings.show.value)
              .attr(SubSelectableObjectNameAttribute, 'directEdit')
              .attr(SubSelectableDisplayNameAttribute, 'Direct Edit')
              .attr(SubSelectableDirectEditAttr, this.visualDirectEditSubSelection)
  ```

  The `HTMLSubSelectionHelper` uses the `SubSelectableDirectEditAttr` attribute to provide the directEdit reference of the directEdit outline, so a direct edit starts when a user double clicks on the element.

    :::image type="content" source="./media/on-object-formatting-api/sub-selection-helper.png" alt-text="Screenshot showing how the subselection helper works.":::

* For the colorSelector:

  ```typescript
  barSelectionMerged
            .attr(SubSelectableObjectNameAttribute, 'colorSelector')
            .attr(SubSelectableDisplayNameAttribute, (dataPoint: BarChartDataPoint) => this.formattingSettings.colorSelector.slices[dataPoint.index].displayName)
            .attr(SubSelectableTypeAttribute, powerbi.visuals.SubSelectionStylesType.Shape)
            .classed(HtmlSubSelectableClass, options.formatMode)

  ```

### Define references

Define the following interface to simplify the examples:

> [!NOTE]
> The `cardUid` you provide should be the same as the one provided for the getFormattingModel API. For example, if you're using powerbi-visuals-utils-formattingmodel, provide the `cardUid` as *Visual-cardName-card*, where the cardName is the name you assigned to this card in the formatting model settings. Otherwise, provide it as the *Visual-cardUid* you assigned to this card.

```typescript
interface References {
    cardUid?: string;
    groupUid?: string;
    fill?: FormattingId;
    font?: FormattingId;
    fontColor?: FormattingId;
    show?: FormattingId;
    fontFamily?: FormattingId;
    bold?: FormattingId;
    italic?: FormattingId;
    underline?: FormattingId;
    fontSize?: FormattingId;
    position?: FormattingId;
    textProperty?: FormattingId;
}
```

For the purpose of this example, create an enum for the objects names:

```typescript
const enum BarChartObjectNames {
    ColorSelector = 'colorSelector',
    DirectEdit = 'directEdit'
}
```

* References for the `directEdit` object:

```typescript
const directEditReferences: References = {
    cardUid: 'Visual-directEdit-card',
    groupUid: 'directEdit-group',
    fontFamily: {
        objectName: BarChartObjectNames.DirectEdit,
        propertyName: 'fontFamily'
    },
    bold: {
        objectName: BarChartObjectNames.DirectEdit,
        propertyName: 'bold'
    },
    italic: {
        objectName: BarChartObjectNames.DirectEdit,
        propertyName: 'italic'
    },
    underline: {
        objectName: BarChartObjectNames.DirectEdit,
        propertyName: 'underline'
    },
    fontSize: {
        objectName: BarChartObjectNames.DirectEdit,
        propertyName: 'fontSize'
    },
    fontColor: {
        objectName: BarChartObjectNames.DirectEdit,
        propertyName: 'fontColor'
    },
    show: {
        objectName: BarChartObjectNames.DirectEdit,
        propertyName: 'show'
    },
    position: {
        objectName: BarChartObjectNames.DirectEdit,
        propertyName: 'position'
    },
    textProperty: {
        objectName: BarChartObjectNames.DirectEdit,
        propertyName: 'textProperty'
    }
};
```

* For `colorSelector`:

```typescript
const colorSelectorReferences: References = {
    cardUid: 'Visual-colorSelector-card',
    groupUid: 'colorSelector-group',
    fill: {
        objectName: BarChartObjectNames.ColorSelector,
        propertyName: 'fill'
    }
};
```

### Implement APIs

Now let's implement the get APIs for the onObject formatting and provide them in the visualOnObjectFormatting:

1. In the constructor code, provide the get methods in the visualOnObjectFormatting:

    ```typescript
    public visualOnObjectFormatting: powerbi.extensibility.visual.VisualOnObjectFormatting;
    constructor(options: VisualConstructorOptions) {
            this.subSelectionHelper = HtmlSubSelectionHelper.createHtmlSubselectionHelper({
                     hostElement: options.element,
                     subSelectionService: options.host.subSelectionService,
                     selectionIdCallback: (e) => this.selectionIdCallback(e),
                });

     this.visualOnObjectFormatting = {
                    getSubSelectionStyles: (subSelections) => this.getSubSelectionStyles(subSelections),
                    getSubSelectionShortcuts: (subSelections, filter) => this.getSubSelectionShortcuts(subSelections, filter),
                    getSubSelectables: (filter) => this. getSubSelectables(filter)
                }
       }

    private getSubSelectionStyles(subSelections: CustomVisualSubSelection[]): powerbi.visuals.SubSelectionStyles | undefined {
            const visualObject = subSelections[0]?.customVisualObjects[0];
            if (visualObject) {
                switch (visualObject.objectName) {
                    case BarChartObjectNames.ColorSelector:
                        return this.getColorSelectorStyles(subSelections);
                     case BarChartObjectNames.DirectEdit:
                        return this.getDirectEditStyles();
                }
            }
        }

    private getSubSelectionShortcuts(subSelections: CustomVisualSubSelection[], filter: SubSelectionShortcutsKey | undefined):    VisualSubSelectionShortcuts | undefined {
            const visualObject = subSelections[0]?.  customVisualObjects[0];
            if (visualObject) {
                switch (visualObject.objectName) {
                    case BarChartObjectNames.ColorSelector:
                        return this.getColorSelectorShortcuts(subSelections);
                    case BarChartObjectNames.DirectEdit:
                        return this.getDirectEditShortcuts();
                }
            }
        }
    ```

1. Implement the getSubSelection shortcuts and style for the colorSelector:

    ```typescript
    private getColorSelectorShortcuts(subSelections:  CustomVisualSubSelection[]): VisualSubSelectionShortcuts   {
            const selector = subSelections[0].customVisualObjects[0].selectionId?.getSelector();
            return [
                {
                    type: VisualShortcutType.Reset,
                    relatedResetFormattingIds: [{
                        ...colorSelectorReferences.fill,
                        selector
                    }],
                },
                {
                    type: VisualShortcutType.Navigate,
                    destinationInfo: { cardUid: colorSelectorReferences.cardUid },
                    label: 'Color'
                }
            ];
        }
    ```

    The above shortcut returns relevant menu item in the context menu and adds the following functionalities:

    * VisualShortcutType.Navigate: when a user selects on one of the bars (data point), and the formatting pane is open, the format pane scrolls to the color selector card and open it
    * VisualShortcutType.Reset: adds a reset shortcut to the context menu. It's enabled if the fill color was changed.

    ```typescript
    private getColorSelectorStyles(subSelections: CustomVisualSubSelection[]): SubSelectionStyles {
            const selector = subSelections[0].customVisualObjects[0].selectionId?.getSelector();
            return {
                type: SubSelectionStylesType.Shape,
                fill: {
                    label: 'Fill',
                    reference: {
                        ...colorSelectorReferences.fill,
                     selector
                    },
                },
            };
        }
    ```

When a user right-clicks on a bar, the following appears:

:::image type="content" source="./media/on-object-formatting-api/right-click-bar.png" alt-text="Screenshot of user interface when a user right-clicks on a bar.":::

When changing the color:

:::image type="content" source="./media/on-object-formatting-api/change-color.png" alt-text="Screenshot of changing color.":::

### Subsection shortcuts

To implement the subSelection shortcuts and styles for the directEdit:

```typescript
private getDirectEditShortcuts(): VisualSubSelectionShortcuts {
        return [
            {
                type: VisualShortcutType.Reset,
                relatedResetFormattingIds: [
                    directEditReferences.bold,
                    directEditReferences.fontFamily,
                    directEditReferences.fontSize,
                    directEditReferences.italic,
                    directEditReferences.underline,
                    directEditReferences.fontColor,
                    directEditReferences.textProperty
                ]
            },
            {
                type: VisualShortcutType.Toggle,
                relatedToggledFormattingIds: [{
                    ...directEditReferences.show,
                }],
                ...directEditReferences.show,
                disabledLabel: 'Delete',
            },
            {
                type: VisualShortcutType.Picker,
                ...directEditReferences.position,
                label: 'Position'
            },
            {
                type: VisualShortcutType.Navigate,
                destinationInfo: { cardUid: directEditReferences.cardUid },
                label: 'Direct edit'
            }
        ];
    }
```

This shortcut adds a relevant menu item in the context menu and adds the following functionalities:

* VisualShortcutType.Reset: adds a reset to the default item to the context menu, when one of the properties provided in relatedResetFormattingIds array changes.
* VisualShortcutType.Toggle: adds a Delete options to the context menu. When clicked, the toggle switch for the *directEdit* card is turned off.
* VisualShortcutType.Picker: Adds an option in the context menu to pick between Right and Left, since we added the position slice in the formatting card for the *directEdit*.
* VisualShortcutType.Navigate: When the format pane is open and the user selects the *directEdit* element, the format pane scrolls and opens the *directEdit* card.

```typescript
private getDirectEditStyles(): SubSelectionStyles {
        return {
            type: powerbi.visuals.SubSelectionStylesType.Text,
            fontFamily: {
                reference: {
                    ...directEditReferences.fontFamily
                },
                label: 'font family'
            },
            bold: {
                reference: {
                    ...directEditReferences.bold
                },
                label: 'bold'
            },
            italic: {
                reference: {
                    ...directEditReferences.italic
                },
                label: 'italic'
            },
            underline: {
                reference: {
                    ...directEditReferences.underline
                },
                label: 'underline'
            },
            fontSize: {
                reference: {
                    ...directEditReferences.fontSize
                },
                label: 'font size'
            },
            fontColor: {
                reference: {
                    ...directEditReferences.fontColor
                },
                label: 'font color'
            },
            background: {
                reference: {
                    objectName: 'directEdit',
                    propertyName: 'background'
                },
                label: 'background'
            }
        }
    }
```

We provided the relevant properties as we added them in the formattingSettings.

The following image illustrates how the UI looks when right-clicking on the directEdit element:

:::image type="content" source="./media/on-object-formatting-api/direct-edit.png" alt-text="Screenshot of the direct edit interface.":::

## Localization

The visual should handle the localization and provide localized strings.

## GitHub resources

* All on object formatting interfaces can be found in (link to be provided once the API is released) in on-object-formatting-api.d.ts
* We recommend using the [on object utils], which include the [HTMLSubSelectionHelper](link to be provided once the API is released)
* You can find an example of a custom visual [SampleBarChart](./create-bar-chart.md) that uses API version 5.8.0 and implements the support for the on object formatting using the on object utils at (link to be provided once the API is released)

## Related content

* [Subselection API](./subselection-api.md)
* [On-object utils](./utils-on-object.md)



================================================
FILE: powerbi-docs/developer/visuals/package-visual.md
================================================
---
title: Package a Power BI visual
description: Learn how to enter property values, update an icon, and package a Power BI visual so it can be shared and imported by other users.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/03/2024
#customer intent: As a Power BI visual developer, I want to learn how to package a Power BI visual so that I can share it with others.
---

# Package a Power BI visual

Before you can load your custom visual into [Power BI Desktop](https://powerbi.microsoft.com/desktop/) or share it with the community in the [Power BI Visual Gallery](https://visuals.powerbi.com/), you need to package it. Using this tutorial, you will:

* [Provide property values](#enter-property-values) and metadata for the visual.
* [Update the icon](#update-the-icon-optional).
* [Package](#package-the-visual) the custom visual.

## Enter property values

1. In **PowerShell**, stop the visual if it's running.
2. In **VS Code**, navigate to the root folder of your visual project and open the *pbiviz.json* file.

3. In the `visual` object, set the `displayName` value to what you want to be your visual's display name.

    :::image type="content" source="media/custom-visual-develop-tutorial-format-options/display-name-viz.png" alt-text="Screenshot of VS Code, which shows the display name value is set to Circle Card.":::

    The visual's display name appears in the **Visualizations** pane of Power BI when you hover the cursor over the visual icon.

4. Fill in or modify the following fields in the *pbiviz.json* file:
    * `visualClassName`
    * `description`

    `visualClassName` is optional, but `description` must be filled in for the package command to run.

5. Fill in `supportUrl` and `gitHubUrl` with the URLs that a user can visit to get support and view your visual's GitHub project.

    The following code shows `supportUrl` and `gitHubUrl` examples:

    ```json
    {
        "supportUrl": "https://community.powerbi.com",
        "gitHubUrl": "https://github.com/microsoft/PowerBI-visuals-circlecard"
    }
    ```

6. Enter your name and email in the `author` object.

7. Save the *pbiviz.json* file.

## Update the icon (optional)

1. In the *pbiviz.json* file, notice that the document defines a path to an icon in the `assets` object. The icon is the image that appears in the **Visualizations** pane in Power BI. It must be a PNG format file and 20 x 20 pixels.

2. In **Windows Explorer**, copy the *icon.png* file you want to use, and then paste it to replace the default *icon.png* file located in the *assets* folder.

3. In **VS Code**, in the Explorer pane, expand the *assets* folder, and then select the *icon.png* file.

4. Review the icon.

    :::image type="icon" source="media/package-visual/viz-pane-image.png":::

## Package the visual

1. In **VS Code**, ensure that all files are saved.

2. In **PowerShell**, enter the following command to generate a *pbiviz* file:

    ```powershell
    pbiviz package
    ```

    This command creates a *pbiviz* file in the */dist/* directory of your visual project, and overwrites any previous *pbiviz* file that might exist.

    :::image type="content" source="media/package-visual/dist-folder.png" alt-text="Screenshot of Windows Explorer, which shows the folder hierarchy of the Power BI visual project. The dist folder is highlighted.":::

The package outputs to the */dist/* folder of the project. The package contains everything required to import the custom visual into either the Power BI service or a Power BI Desktop report. You packaged the custom visual, and it's ready for use.

## Related content

* [Publish Power BI visuals to Partner Center](office-store.md)
* [Import a custom visual](import-visual.md)



================================================
FILE: powerbi-docs/developer/visuals/performance-tips.md
================================================
---
title: Tips for creating quality Power BI custom visuals
description: Learn specific techniques to develop high performance Power BI custom visuals for your organization.
author: billmath
ms.author: billmath
ms.reviewer: tebercov , asafmozes
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 05/15/2024
ms.custom: engagement-fy23
#customer intent: As a Power BI visual developer, I want to learn how to optimize my custom visual for performance so that it renders quickly and efficiently.
---
# Performance tips for creating quality Power BI custom visuals

This article covers techniques on how a developer can achieve high performance when rendering their custom visuals.

No one wants a visual to take a long time to render. Getting the visual to render as quickly as possible is critical when writing the code.

> [!NOTE]
> As we continue to improve and enhance the platform, new versions of the API are constantly being released. In order to get the most out of the Power BI visuals' platform and feature set, we recommend that you keep up-to-date with the most recent version. To find out which version you’re using, check the `apiVersion` in the *pbiviz.json* file.

Here are some recommendations for achieving optimal performance for your custom visual.

## Reduce plugin size

A smaller custom visual plugin size results in:

* Faster download time
* Faster installation whenever the visual is run

These third party resources can help you decrease your plugin size, by finding ways for you to [remove unused code](https://web.dev/remove-unused-code/) or [tree-shaking and code-splitting](https://www.azavea.com/blog/2019/03/07/lessons-on-tree-shaking-lodash/).

## Check render time of the visual

Measure the render time of your visual in various situations to see which, if any, parts of the script need optimization.

### Power BI Desktop performance analyzer

:::image type="content" source="./media/performance-tips/performance-analyzer.png" alt-text="Screenshot of Performance Analyzer icon in main menu.":::

Use the [Power BI Desktop performance analyzer](../../create-reports/desktop-performance-analyzer.md) (**View** > **Performance Analyzer**) to check how your visual renders in the following cases:

* First render of the visual
* Thousands of data points
* A single data point/measure (to determine the visual render overhead)
* Filtering
* Slicing
* Resizing (may not work in the performance analyzer)

If possible, compare these measurements with those of a similar core visual to see if there are parts that can be optimized.

### Use the User Timing API

Use the [**User Timing API**](https://developer.mozilla.org/docs/Web/API/User_Timing_API) to measure your app's JavaScript performance. This API can also help you decide which parts of the script need optimization.

For more information, see the [Using the User Timing API](https://developer.mozilla.org/docs/Web/API/User_Timing_API/Using_the_User_Timing_API).

## Other ways to test your custom visual

* Code instrumentation - Use the following console tools to gather data about your custom visual's performance (note that these tools link to external third party tools):

  * [console.log()](https://developer.mozilla.org/docs/Web/API/Console/log)
  * [console.dir()](https://developer.mozilla.org/docs/Web/API/Console/dir)
  * [console.time()](https://developer.mozilla.org/docs/Web/API/console/time)
  * [console.timeEnd()](https://developer.mozilla.org/docs/Web/API/console/timeEnd)

* The following web developer tools can also help measure your visual's performance, but keep in mind that they profile Power BI as well:

  * [Metrics](https://web.dev/metrics/)
  * [JavaScript profiler](https://yonatankra.com/how-to-profile-javascript-performance-in-the-browser/)

Once you determined which parts of your visual need optimization, check out these tips.

## Update messages

When you update the visual:

* Don't rerender the entire visual if only some elements have changed. Render only the necessary elements.
* Store the data view passed on update. Render only the data points that are different from the previous data view. If they haven't changed, there's no need to rerender them.
* Resizing is often done automatically by the browser and doesn't require an update to the visual.

## Cache DOM nodes

When a node or list of nodes is retrieved from the DOM, think about whether you can reuse them in later computations (sometimes even the next loop iteration). As long as you don't need to add or delete more nodes in the relevant area, caching them can improve the application's overall efficiency.

To make sure that your code is fast and doesn’t slow down the browser, keep DOM access to a minimum.

For example:

**Instead of**:

   ```javascript
   public update(options: VisualUpdateOptions) { 
       let axis = $(".axis"); 
   }
   ```

**Try**:

   ```javascript
   public constructor(options: VisualConstructorOptions) { 
       this.$root = $(options.element); 
       this.xAxis = this.$root.find(".xAxis"); 
   } 
 
   public update(options: VisualUpdateOptions) { 
       let axis = this.axis; 
   }
   ```

## Avoid DOM manipulation

Limit DOM manipulations as much as possible.  *Insert operations* like `prepend()`, `append()`, and `after()` are time-consuming and should only be used when necessary.

For example:

**Instead of**:

  ```javascript
  for (let i=0; i<1000; i++) { 
      $('#list').append('<li>'+i+'</li>');
  }
  ```

**Try**:

Make the above example faster by using `html()` and building the list beforehand:

  ```javascript
  let list = ''; 
  for (let i=0; i<1000; i++) { 
      list += '<li>'+i+'</li>'; 
  } 

  $('#list').html(list); 
  ```

## Reconsider JQuery

Limit JS frameworks and use native JS whenever possible to increase the available bandwidth and lower your processing overhead. Doing this might also decrease compatibility issues with older browsers.

For more information, see [youmightnotneedjquery.com](http://youmightnotneedjquery.com/) for alternative examples for functions such as JQuery's `show`, `hide`, `addClass`, and more.  

## Animation

### Animation options

For repeated use of animations, consider using [**Canvas**](https://web.dev/canvas-performance/) or [**WebGL**](https://www.khronos.org/webgl/) instead of SVG. Unlike SVG, with these options performance is determined by size rather than content.

Read more about the differences in [SVG vs Canvas: How to Choose](/previous-versions/windows/internet-explorer/ie-developer/samples/gg193983(v=vs.85)).

### Canvas performance tips

Check out the following third party sites for tips on improving canvas performance.

* [Fast load times](https://web.dev/fast/)
* [Improving HTML5 Canvas performance](https://web.dev/canvas-performance/)
* [Optimizing canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas)

For example, learn how to [avoid unnecessary canvas state changes](https://web.dev/canvas-performance/#avoid-unnecessary-canvas-state-changes) by rendering by color instead of position.

### Animation functions

Use [requestAnimationFrame](https://www.w3.org/TR/animation-timing/) to update your on-screen animations, so your animation functions are called **before** the browser calls another repaint.

### Animation loops

Does the animation loop redraw unchanged elements?

If so, it wastes time drawing elements that don’t change from frame-to-frame.

Solution: Update the frames selectively.

When you're animating static visualizations, it’s tempting to lump all the draw code into one update function and repeatedly call it with new data for each iteration of the animation loop.

Instead, consider using a visual constructor method to draw everything static. Then the update function only needs to draw visualization elements that change.

   > [!TIP]
   > Inefficient animation loops are often found in axes and legends.

## Common issues

* Text size calculation: When there are a lot of data points, don't waste time calculating text size for each point. Calculate a few points and then estimate.
* If some elements of the visual aren't seen in the display, there's not need to render them.

## Related content

[Optimization guide for Power BI](../../guidance/power-bi-optimization.md)

**More questions?** [Ask the Power BI Community](https://community.powerbi.com/).



================================================
FILE: powerbi-docs/developer/visuals/permissions-api.md
================================================
---
title: Check privileges API in Power BI Visuals
description: The article describes how to use Power BI Visuals API to determine what privileges are enabled and how to check the permissions granted.
author: billmath
ms.author: billmath
ms.reviewer:
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 06/28/2024
---

# Check permissions API

As a developer of Power BI visuals, you can develop visuals that need permission to access various resources. You request these permissions in the privileges section of the [capabilities.json](capabilities.md) file. These privileges include the ability to access:

* remote resources or web sites
* local storage for downloading data

Each organization's admin can allow or block these permissions. The *check permissions API* allows you to query the host at runtime to determine which permissions are granted. You can use this information to design a visual that will work with various permission settings.

The *check permissions API* returns the status of each permission query function:

```typescript
/**
 * Represents a return type for privilege status query methods
 */
export const enum PrivilegeStatus {
    /**
     * The privilege is allowed in the current environment
     */
    Allowed,

    /**
     * The privilege declaration is missing in visual capabilities section
     */
    NotDeclared,

    /**
     * The privilege is not supported in the current environment
     */
    NotSupported,

    /**
     * The privilege usage was denied by tenant administrator
     */
    DisabledByAdmin,
}
```

## How to use the check permissions API

Every privilege API has its own query method to check for the permission status. The permission status can be one of the following:

* Allowed
* Not declared
* Not supported
* Disabled by Admin

### Web access

```typescript
export interface IWebAccessService {
    /**
     * Returns the availability status of the service for specified url.
     * 
     * @param url - the URL to check status for
     * @returns the promise that resolves to privilege status of the service
     */
    webAccessStatus(url: string): IPromise<PrivilegeStatus>;
}
```

### Export content

```typescript
export interface IDownloadService {
    /**
     * Returns the availability status of the service.
     * 
     * @returns the promise that resolves to privilege status of the service
     */
    exportStatus(): IPromise<PrivilegeStatus>;
}
```

## Related content

[Power BI custom visual API](visual-api.md)



================================================
FILE: powerbi-docs/developer/visuals/power-bi-custom-visuals-certified.md
================================================
---
title: Get your Power BI visuals certified
description: This article explains the requirements and process to submit a custom visual for certification in Power BI.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/23/2025
#customer intent: As a Power BI visual developer, I want to learn how to get my custom visual certified so that it can be used by others in Power BI.
---

# Certified Power BI visuals

Certified Power BI visuals are Power BI visuals in [AppSource](https://appsource.microsoft.com/marketplace/apps?page=1&product=power-bi-visuals) that meet the Microsoft Power BI team [code requirements](#certification-requirements) and testing. The tests performed are designed to check that the visual doesn't access external services or resources. However, Microsoft isn't the author of third-party custom visuals, and we advise customers to contact the author directly to verify the functionality of these visuals.

Certified Power BI visuals can be used like any other Power BI visual. They offer more features than noncertified visuals. For example, you can [export them to PowerPoint](../../collaborate-share/end-user-powerpoint.md), or display the visual in received emails when a user [subscribes to report pages](../../collaborate-share/end-user-subscribe.md).

The certification process is optional. It's up to the developers to decide if they want their visual certified. Power BI visuals that aren't certified, aren't necessarily unsafe. Some Power BI visuals aren't certified because they don't comply with one or more of the [certification requirements](power-bi-custom-visuals-certified.md#certification-requirements). For example, a map Power BI visual connecting to an external service, or a Power BI visual using commercial libraries can't be certified.

## Removal of certification

Microsoft reserves the right to remove a visual from the certified list, at its discretion.

## Certification requirements

To get your Power BI visual certified, it must meet the requirements listed in this section.

### General requirements

Your Power BI visual has to be approved by Partner Center. Before requesting certification, we recommend that you publish your Power BI visual in [AppSource](https://appsource.microsoft.com/marketplace/apps?page=1&product=power-bi-visuals). To learn how to publish a Power BI visual to AppSource, see [Publish Power BI visuals to Partner Center](office-store.md).

Before submitting your Power BI visual for certification, verify that:

* The visual isn't an R-visual
* The visual complies with the [guidelines for Power BI visuals](guidelines-powerbi-visuals.md)
* The visual passes all the [required tests](submission-testing.md)
* The compiled package exactly matches the submitted package

### Code repository requirements

Although you don't have to publicly share your code in GitHub, the code repository has to be available for a review by the Power BI team. The best way to do this is by providing the source code (JavaScript or TypeScript) in GitHub.

The repository must contain:

* Code for only one Power BI visual. It can't contain code for multiple Power BI visuals, or unrelated code.
* A branch named **certification** (lowercase required). The source code in this branch has to match the submitted package. This code can only be updated during the next submission process, if you're resubmitting your Power BI visual.

If your Power BI visual uses private npm packages, or git submodules, you must also provide access to the repositories containing this code.

To understand how a Power BI visual repository looks, review the GitHub repository for the [Power BI visuals sample bar chart](https://github.com/microsoft/PowerBI-visuals-sampleBarChart).

### File requirements

Use the latest version of the API to write the Power BI visual.

The repository must include the following files:

* **.gitignore** - Add `node_modules`, `.tmp` and,  `dist` to this file. The code can't include the *node_modules*, *.tmp*, or *dist* folders.
* **capabilities.json** - If you're submitting a newer version of an existing Power BI visual with changes to the properties in this file, verify that they don't break reports for existing users.
* **pbiviz.json**
* **package.json**. The visual must have the following package installed:
  * ["typescript"](https://www.npmjs.com/package/typescript)
  * ["eslint"](https://www.npmjs.com/package/eslint)
  * ["eslint-plugin-powerbi-visuals"](https://www.npmjs.com/package/eslint-plugin-powerbi-visuals)
  * The file must contain a command for running linter -  `"eslint": "npx eslint . --ext .js,.jsx,.ts,.tsx"`
* **package-lock.json**
* **tsconfig.json**

### Command requirements

Make sure that the following commands don't return any errors.

* `npm install`
* `pbiviz package`
* `npm audit` - Must not return any warnings with high or moderate level.
* `ESlint` with the [required configuration](https://www.npmjs.com/package/eslint-plugin-powerbi-visuals). This command must not return any lint errors.

### Compiling requirements

Use the latest version of [powerbi-visuals-tools](https://www.npmjs.com/package/powerbi-visuals-tools) to write the Power BI visual.

Compile your Power BI visual with `pbiviz package`. If you're using your own build scripts, provide a `npm run package` custom build command.

>[!TIP]
> Starting from powerbi-visuals-tools version 6.1.0, you can check your visual for unsafe calls to `fetch`, `XMLHttpRequest`, and `eval` using the following command:
`pbiviz package --certification-audit`.
If any unsafe code is detected during the audit, you can automatically build a package with the necessary fixes by running:
`pbiviz package --certification-fix`.
This flag removes all forbidden calls. You need to thoroughly test your visual to ensure it works as expected. Also, don't forget to update npm run package script in package.json to avoid hash mismatch during certification review.

### Source code requirements

Make sure you follow the [Power BI visuals additional certification](/legal/marketplace/certification-policies#1200-power-bi-visuals-additional-certification) policy list. If your submission doesn't follow these guidelines, you'll get a rejection email from Partner Center with the policy numbers listed in this link.

Follow the code requirements listed here to make sure that your code is in line with the Power BI certification policies.  

#### Required

* Only use public reviewable OSS components such as public JavaScript or TypeScript libraries.
* The code must support the [Rendering Events API](event-service.md).
* Ensure DOM is manipulated safely. Use sanitization for user input or user data, before adding it to DOM.
* Use the [sample report](https://github.com/PowerBi-Projects/PowerBI-visuals/tree/gh-pages/assets) as a test dataset.

#### Not allowed

* Accessing external services or resources. For example, no HTTP/S or WebSocket requests can go out of Power BI to any services. Therefore, [WebAccess privileges](./capabilities.md#allow-web-access) should be empty, or omitted, in the capabilities settings.
* Using `XMLHttpRequest`, or `fetch`.
* Using `innerHTML`, or `D3.html(user data or user input)`.
* JavaScript errors or exceptions in the browser console, for any input data.
* Arbitrary or dynamic code such as `eval()`, unsafe use of `settimeout()`, `requestAnimationFrame()`, `setinterval(user input function)`, and user input or user data.
* Minified JavaScript files or projects.

## Submit a Power BI visual for certification

Now you're ready to submit a request to have your Power BI visual certified by the Power BI team.

>[!TIP]
>The Power BI certification process might take time. If you're creating a new Power BI visual, we recommend that you publish your Power BI visual via the Partner Center before you request Power BI certification. This ensures that the publishing of your visual is not delayed.

To request Power BI certification:

1. Sign in to Partner Center.
2. On the **Overview page**, choose your Power BI visual, and go to the **Product** setup page.
3. Select the **Request Power BI certification** check box.
4. On the **Review and publish** page, in the **Notes for certification** text box, provide a link to the source code and the credentials required to access it.

### Private repository submission process

If you're using a private repository such as GitHub to submit your Power BI visual for certification, follow the instructions in this section.

1. Create a new account for the validation team.
2. Configure [two-factor authentication](https://help.github.com/github/authenticating-to-github/securing-your-account-with-two-factor-authentication-2fa) for your account.
3. [Generate a new set of recovery codes](https://help.github.com/github/authenticating-to-github/configuring-two-factor-authentication-recovery-methods#generating-a-new-set-of-recovery-codes).
4. When submitting your Power BI visual, make sure you provide the following details:
    * A link to the repository
    * Sign in credentials (including a password)
    * Recovery codes
    * Read-only permissions to our account ([pbicvsupport](https://github.com/pbicvsupport))

## Certified Power BI visual badges

Once a Power BI visual is certified, it gets a designated badge indicating that it's a certified Power BI visual.

### Certified Power BI visuals in AppSource

* When someone searches online for [Power BI visuals in AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals), a small yellow badge on the visual's card indicates that it's a certified Power BI visual.

    ![AppSource certified Power BI visual](media/power-bi-custom-visuals-certified/certified-visual-yellow-small.png)

* When the Power BI visual card is clicked in AppSource, a yellow badge titled *PBI Certified* indicates that this Power BI visual is certified.

    ![App page certified Power BI visual](media/power-bi-custom-visuals-certified/certified-visual-yellow-big.png)

### Certified Power BI visuals in the Power BI interface

* When a Power BI visual is imported from within Power BI (Desktop or service), a blue badge indicates that the Power BI visual is certified.

    ![Power BI interface certified Power BI visual](media/power-bi-custom-visuals-certified/certified-visual-blue.png)

* You can display only certified Power BI visuals, by selecting the *Power BI Certified* filter option.

## Publication timeline

The process of deploying to AppSource can take time. Your Power BI visual will be available to download from AppSource when this process is complete.

### When will users be able to download my visual?

* If you submitted a new Power BI visual, it will be available for download from the AppSource link within a few hours. However, it takes an extra 10–14 days to reach production and become available in Power BI Desktop/Service.

* If you submitted an update to an existing Power BI visual, the new version will also appear on AppSource but will take up to two weeks to be deployed to the production environment.

    >[!NOTE]
    > The *version* field in AppSource will be updated with the day your Power BI was approved by AppSource, approximately a week after you submitted your visual. Users will be able to download the updated visual but the updated capabilities won't take effect. Your visual's new capabilities will affect the user's reports after about a two weeks.

### When will my Power BI visual display a certification badge?

The certification badge should be visible within three weeks after your submission is approved.

## Related content

* [Frequently asked questions about certified visuals](power-bi-custom-visuals-faq.yml).
* [Guidelines for publishing Power BI visuals](guidelines-powerbi-visuals.md)

More questions? [Try the Power BI Community.](https://community.powerbi.com/)


================================================
FILE: powerbi-docs/developer/visuals/power-bi-custom-visuals-faq.yml
================================================
### YamlMime:FAQ
metadata:
  title: Frequently asked questions about Power BI visuals
  description: Browse a list of frequently asked questions and answers about Power BI custom visuals.
  author: billmath
  ms.author: billmath
  ms.reviewer: ""
  ms.service: powerbi
  ms.subservice: powerbi-custom-visuals
  ms.topic: faq
  ms.custom: ''
  ms.date: 12/29/2023
    
title: Power BI custom visuals FAQ
summary: | 
  * If you have other questions, [try asking the Power BI Community](https://community.powerbi.com/).
  * Still have an issue? See the [Power BI support page](https://powerbi.microsoft.com/support/).

sections:
  - name: Organizational visuals
    questions:
      - question: |
          How can the admin manage access to organizational Power BI custom visuals?
        answer: |
          In the Admin portal, under the **Organizational visuals** tab, the admin can see and [manage all the organizational Power BI visuals in the enterprise](../../admin/organizational-visuals.md#organizational-visuals). This includes adding, disabling, enabling, and deleting Power BI visuals.
          
          Users in the organization can easily find Power BI visuals, and import them into their reports directly from Power BI Desktop or Service.
          
          Once the admin uploads a new version of an organizational Power BI visual, everyone in the organization gets the same updated version. All reports using updated Power BI visuals are automatically updated.
          
          Users can find the organizational Power BI visuals in the built-in Power BI Desktop and Power BI Service organization store, under the **MY ORGANIZATION** tab. 
          
      - question: |
          If an admin uploads a Power BI visual from the public marketplace to the organization store using "Add visual > from AppSource", is it automatically updated when a vendor updates the visual in the public marketplace?
        answer: |
          Yes, the visual is automatically updated from the public marketplace. If the visual is certified, the certification is retained, including extra features such as export to PDF or PowerPoint.

      - question: |
          Is there a way to disable the organization store?
        answer: |
          No, users always see the **MY ORGANIZATION** tab in Power BI Desktop and Power BI Service. If an admin disables or deletes all the organizational Power BI visuals from the Admin portal, the organizational store will be empty.

      - question: |
          If the admin disables Power BI custom visuals from the Admin portal (tenant settings), do users still have access to the organizational Power BI visuals?
        answer: |
          Yes, if the admin disables the Power BI visuals from the Admin portal, it doesn't affect the organizational store.
          
          Some organizations disable Power BI visuals and enable only hand-picked visuals that were imported and uploaded by the Power BI admin to the organizational store.
          
          Disabling the Power BI visuals from the Admin portal isn't enforced in Power BI Desktop. Desktop users can still add and use Power BI visuals from the public marketplace in their reports. However, those public Power BI visuals stop rendering once published to the Power BI Service and issue an appropriate error. 
          
          When the Power BI visuals setting in the Admin portal, is enforced, users in Power BI Service can't import Power BI visuals from the public marketplace. Only visuals from the organizational store can be imported.
          
      - question: What are the advantages of Power BI visuals in the organizational store?
        answer: |
          * Everyone gets the same visual version, which is controlled by the Power BI admin. Once the admin updates the visual's version in the Admin portal, all the users in the organization get the updated version automatically.
          
          * No need to share visual files by email or shared folders. The organizational store offers are visible to all members who are logged in.
          
          * Security and supportability — new versions of organizational Power BI visuals are updated automatically in all reports.
          
          * Admins can control which Power BI visuals are available throughout the organization.
          
          * Admins can enable/disable visuals for testing from the Admin portal.

          
  - name: Certified Power BI visuals
    questions:
      - question: What are certified Power BI visuals?
        answer: |
          Certified Power BI visuals are Power BI visuals that meet certain [requirements](power-bi-custom-visuals-certified.md), and are certified by Microsoft.
          
          In the [marketplace](https://appsource.microsoft.com/marketplace/apps?page=1&product=power-bi-visuals), certified Power BI visuals have a yellow badge indicating that they're certified.
          
          Microsoft isn't the author of third-party Power BI visuals. We advise customers to contact the author directly to verify the functionality of third-party visuals.
          
      - question: |
          What tests are done during the certification process?
        answer: |
          The certification process tests include, but aren't limited to: 
          * Code reviews
          * Static code analysis
          * Data leakage
          * Data fuzzing
          * Penetration testing
          * Access XSS testing
          * Malicious data injection
          * Input validation
          * Functional testing
           
      - question: |
          Are certified Power BI visuals checked again with every new submission (upgrade)?
        answer: |
          Yes. Every time a new version of a certified visual is submitted to the marketplace, the visual's version update goes under the same certification checks.
          
          The version update certification is automatic. If the update is rejected because of a violation, an email is sent to the developer explaining what needs to be fixed.
          
      - question: |
          Can a certified Power BI visual lose its certification after a new update?
        answer: No. A certified visual can't lose its certification with a new update. Instead, the update is rejected.

      - question: |
          Do I need to share my code in a public repository if I'm certifying my Power BI visual?
        answer: |
          No, you don't need to share your code publicly.
          
          Provide read permissions to check the Power BI visual code. For example, by using a private repository in GitHub.
           
      - question: |
          Does a certified Power BI visual have to be in the marketplace?
        answer: Yes. Private visuals aren't certified.

      - question: |
          How long does it take to certify my visual?
        answer: |
          Getting a new Power BI visual certified (first-time certification) can take up to four weeks. 
          
          Getting an update of a Power BI visual certified can take up to three weeks. 
          
      - question: |
          Does the certification process ensure that there's no data leakage?
        answer: |
          The tests performed are designed to check that third-party visuals don't access external services or resources. 
          
          Microsoft is not the author of third-party Power BI visuals. We advise customers to contact the author directly to verify the functionality of third-party Power BI visuals.
           
      - question: |
          Are uncertified Power BI visuals safe to use?
        answer: |
          Uncertified Power BI visuals don't necessarily mean unsafe visuals.
          
          Some visuals aren't certified because they don't comply with one or more of the [certification requirements](power-bi-custom-visuals-certified.md#certification-requirements). For example, connecting to an external service like map visuals, or visuals using commercial libraries.
          
  - name: Visuals with additional purchases
    questions:
      - question: |
          What is a visual with additional purchases?
        answer: |
          A visual with additional purchases is similar to in-app purchase (IAP) adds-in. These adds-in include an  **Additional purchase may be required** price tag.
          
          IAP Power BI visuals are free, downloadable Power BI visuals. Users pay nothing to download those Power BI visuals from the marketplace.
          
          IAP visuals offer optional in-app purchases for advanced features.
          
      - question: |
          What is changing in the submission process?
        answer: |
          The IAP Power BI visuals submission process to the marketplace is the same process as the one for free Power BI visuals. You can submit a Power BI visual to be certified using [Partner Center](/partner-center/).
               
          When registering your Power BI visual, navigate to the **Product setup** tab and check the **My product requires the purchase of a service** check box.
          
      - question: |
          What should I do before submitting my IAP Power BI custom visual?
        answer: |
          If you're working on an IAP Power BI visual, make sure that it complies with the [guidelines](guidelines-powerbi-visuals.md).
          
          > [!NOTE]
          > Power BI free visuals with an added IAP feature must keep the same free features previously offered. You can add optional advanced paid features on top of the old free features. We recommend submitting the IAP Power BI visual with the advanced features as a new Power BI visual, and not to update the old free one.
          
      - question: |
          Do IAP Power BI visuals need to be certified?
        answer: |
          The [certification](power-bi-custom-visuals-certified.md) process is optional. It's up to the developer to decide whether to certify their IAP Power BI visual or not.
          
      - question: |
          Can I get my IAP Power BI visual certified?
        answer: |
          Yes, after the AppSource team has approved your IAP Power BI visual, you can submit your Power BI visual to be [certified](power-bi-custom-visuals-certified.md).
          
          Certification is an optional process. It's up to you to decide if you want your IAP visual to be certified.
          
  - name: More questions
    questions:
      - question: |
          How to get support?
        answer: |
          Contact the Power BI visuals support team <pbicvsupport@microsoft.com> with any questions, comments, or issues you have. This support channel is for custom visuals developers in the process of developing their own visuals.
  
          For customer experience issues when using custom Power BI visuals, submit a case request via the [Power Platform admin center portal](https://admin.powerplatform.microsoft.com/newsupportticket/powerbipro).

additionalContent: |

  ## Related content
        
  For more information, see [Troubleshooting your Power BI visuals](power-bi-custom-visuals-troubleshoot.md).
          
  More questions? [Try the Power BI Community](https://community.powerbi.com/)  



================================================
FILE: powerbi-docs/developer/visuals/power-bi-custom-visuals-organization.md
================================================
---
title: Organization visuals in Power BI
description: Learn about the considerations and limitations that apply when you develop organizational visuals in Power BI.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 2/27/2024
LocalizationGroup: Visualizations
#customer intent: As a Power BI admin, I want to learn how to deploy and manage organizational visuals so that I can meet the unique needs of my organization.
---

# Power BI organizational visuals

You can develop your own custom Power BI visuals tailored to your own or your organization's specific needs. Usually, organizations develop their own custom visuals when none of the visuals included with Power BI meet their exact needs.

Some organizations might have unique requirements for their Power BI visuals. They might need visuals that can convey specific data or insights unique to their organization. They might have special data requirements, or they might highlight private business methods. These organizations can develop and maintain their own Power BI visuals that they can share throughout their organization.

The Power BI administrator uses the Admin portal to deploy and manage organizational visuals. After the visuals are deployed to the organizational repository, users in the organization can easily discover and import them into their reports directly from Power BI Desktop.

:::image type="content" source="media/power-bi-custom-visuals-organizational/custom-visual-org-01.jpg" alt-text="Diagram that shows the Power BI workflow for visuals.":::

## Administer organizational Power BI visuals

To learn more about how to administer, deploy, and manage organizational Power BI visuals, see [manage Power BI visuals admin settings](../../admin/organizational-visuals.md).

> [!WARNING]
> A Power BI visual installed from a file can contain code with security or privacy risks. Make sure that you trust the author and the source of the Power BI visual file before deploying it to the organization repository.

## Considerations and limitations

Be aware of the following [admin](#admin-considerations) and [user](#user-considerations) considerations when using custom Power BI visuals in your organization.

### Admin considerations

- If a Power BI visual from AppSource or a file is deleted from the repository, any reports that use the deleted visual will stop rendering. Deleting from the repository isn't reversible. To temporarily disable a Power BI visual from AppSource or a file, use the **Disable** feature.
- If you remove a visual from AppSource, the visual will continue to render as it did before, as long as it's not removed from the repository.

### User considerations

- Organizational Power BI visuals can't be [exported to PowerPoint](../../collaborate-share/end-user-powerpoint.md) or displayed in emails received when a user [subscribes to report pages](/power-bi/collaborate-share/end-user-subscribe). Only [certified Power BI visuals](power-bi-custom-visuals-certified.md) imported directly from the marketplace support these features.
- Organizational Power BI visuals aren't supported in Power BI report server.
- Certain visuals won't render if deployed through the organization's repository. Use the **Add from AppSource** option in the Admin portal to manage the following visuals:

  - Visio
  - Mapbox
  - Power Automate
  - Charticulator

## Related content

- [Get a Power BI visual certified](power-bi-custom-visuals-certified.md)
- [Publish Power BI visuals to Partner Center](office-store.md)
- [Frequently asked questions about Power BI visuals](./power-bi-custom-visuals-faq.yml)

More questions? [Try the Power BI Community](https://community.powerbi.com/)


================================================
FILE: powerbi-docs/developer/visuals/power-bi-custom-visuals-troubleshoot.md
================================================
---
title: Troubleshooting Power BI developer environment setup
description: This article discusses some common issues you might come across when developing or creating a custom Power BI visual.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: troubleshooting
ms.date: 12/21/2024
# customer intent: As a Power BI developer, I want to learn how to troubleshoot common issues that might occur when setting up my developer environment for creating custom Power BI visuals so that I can develop my visuals effectively.
---

# Troubleshoot your Power BI developer environment setup for custom visuals

This article explains how to diagnose and fix the following common problems that can occur when setting up your developer environment for creating custom Power BI visuals.

* [Can't start up pbiviz](#cant-start-up-pbiviz)
* [Can't connect to the Power BI service](#cant-connect-to-the-power-bi-service)
* [Can't see the developer icon on the visualization tab](#cant-see-the-developer-icon-on-the-visualizations-tab)
* [Contacting the support team](#contacting-the-support-team)

## Can't start up pbiviz

When your environment isn't set up correctly, you might receive an error such as: *pbiviz command not found*

When you run `pbiviz` in your terminal's command line, you should see the help screen. If you don't, make sure you have [NodeJS](environment-setup.md#install-nodejs) version 4.0 or higher installed.
For help with installing [pbiviz](environment-setup.md#install-pbiviz) or [NodeJS](environment-setup.md#install-nodejs) see [Set up your environment for developing a Power BI visual](environment-setup.md).

## Can't connect to the Power BI service

Run the visual server with the command `pbiviz start` in your terminal's command line *from the root of your visual project*.

:::image type="content" source="media/power-bi-custom-visuals-troubleshoot/powerbi-start-visual.png" alt-text="Screenshot of powershell running the p b i viz start command showing the server starting.":::

If the server's not running, your SSL certificates were probably not installed correctly. To install your SSL certificates, see [Create an SSL certificate](create-ssl-certificate.md).

## Can't see the developer icon on the Visualizations tab

The developer icon looks like a prompt icon within the **Visualizations** tab.

![Visual selection](media/power-bi-custom-visuals-troubleshoot/powerbi-developer-visual-selection.png)

If you don't see it, make sure you have [enabled developer mode in the Power BI settings](environment-setup.md#enable-developer-mode).

> [!NOTE]
> The developer visual is currently only available in the **Power BI service** and not in Power BI Desktop or the mobile app. The packaged visual will work everywhere.

## Contacting the support team

Feel free to contact the Power BI visuals support team <pbicvsupport@microsoft.com> with any questions, comments, or issues you have.  
This support channel is for custom visuals developers in the process of developing their own visuals.

For customer experience issues when using custom Power BI visuals, submit a case request via the [Power Platform admin center portal](https://admin.powerplatform.microsoft.com/newsupportticket/powerbipro).

## Related content

* [Setting up your Power BI environment](environment-setup.md)
* [Frequently asked questions about Power BI visuals](power-bi-custom-visuals-faq.yml)

More questions? [Try the Power BI Community](https://community.powerbi.com/)  



================================================
FILE: powerbi-docs/developer/visuals/power-bi-custom-visuals.md
================================================
---
title: Main sources for acquiring Power BI custom visuals
description: This article describes the main ways of acquiring Power BI custom visuals that you can use in your Power BI reports.
author: billmath
ms.author: billmath
ms.reviewer:
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: overview
ms.date: 11/2/2024
LocalizationGroup: Visualizations
ms.custom: intro-overview, engagement-fy23
#customer intent: As a Power BI user, I want to learn about the different sources for acquiring custom visuals so that I can enhance my Power BI reports.
---

# What are custom visuals in Power BI and where can I get them?

[Power BI visuals](../../visuals/power-bi-report-visualizations.md) come from three main sources:

* [Core](#core-power-bi-visuals) visuals are readily available on the visualization pane.
* You can [download or import](#appsource-power-bi-visuals) visuals from Microsoft [AppSource](https://appsource.microsoft.com/marketplace/apps?page=1&product=power-bi-visuals) or Power BI.
* You can create your own [custom visuals](#custom-visual-files).

## Core Power BI visuals

Power BI comes with many out-of-the box visuals. These Power BI visuals are available in the visualization pane of both [Power BI Desktop](https://powerbi.microsoft.com/desktop/) and [Power BI service](https://app.powerbi.com), and can be used for creating and editing Power BI content.

:::image type="content" source="media/power-bi-custom-visuals/power-bi-visualizations.png" alt-text="Screenshot of default the Power B I visualization pane as it appears in Power BI Desktop and Power B I service.":::

To remove a Power BI visual from the visualization pane, right-click it and select **unpin**.

To restore the default Power BI visuals in the visualization pane, select the ellipsis and then select **Restore default visuals**.

:::image type="content" source="media/power-bi-custom-visuals/restore-default.png" alt-text="Screenshot of the Power B I visualization pane restore default option.":::

## AppSource Power BI visuals

You can find many more Power BI visuals in [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals). AppSource is the place to find apps, add-ins, and extensions for your Microsoft software. It connects millions of people who use products such as Microsoft 365, Azure, Dynamics 365, Cortana, and Power BI, to solutions that help them work more efficiently and with more insight than before.

Microsoft and community members develop Power BI visuals for public benefit, and publish them to the AppSource. Microsoft tests and approves these Power BI visuals for functionality and quality. You can download these visuals and add them to your Power BI reports.

>[!NOTE]
>
> * By using Power BI visuals created with our SDK, you may be importing data from, or sending data to, a third party or other service outside of your Power BI tenant’s geographic area, compliance boundary, or national/regional cloud instance.
> * Once Power BI visuals from AppSource are imported, they may be updated automatically without any additional notice.

### Download from AppSource

Downloading visuals from AppSource is free, but each publisher defines their own business and licensing model for their visual. There are three basic types of payment and licensing plans:

* Free visuals that you can download and use without additional costs. These visuals are labeled as *Free*.

* Licensed visuals managed from the  [Microsoft 365 admin center](/microsoft-365/admin/admin-overview/admin-center-overview). These visuals are available in a limited capacity for free with the option to purchase more features. Transactability happens in [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals) by clicking on the *Buy now* button.

* Visuals that you can download with basic functionality for free, but have additional features available for pay. These visuals have the *additional purchase may be required* label. You can often get a free trial period to test out the full functionality of the visual before paying for it. Transactability and license management for these visuals happen outside of Microsoft platforms.

Once you select the visual, select the **Plans + Pricing** tab to see the plan for that visual. Pricing information is also shown on the left pane.

:::image type="content" source="media/power-bi-custom-visuals/app-purchase-plans.png" alt-text="Screenshot showing a custom visual available for download with pricing information.":::

Select **Add** to download the visual. If a free trial period is offered, it will start when you download the visual.

After you *purchase* the licenses for the visual in AppSource with a credit card, you need to *assign* them to yourself or others in the [Microsoft 365 admin center](/microsoft-365/admin/admin-overview/admin-center-overview).

For more information on how to assign licenses see [Licensing and transactability enforcement](licensing-api.md).

To see how licenses are enforced, see [custom visual licenses](./custom-visual-licenses.md)

[More questions about assigning and managing licenses?](./licensing-faq.yml)

### Certified Power BI visuals

Certified Power BI visuals are visuals in [AppSource](https://appsource.microsoft.com/marketplace/apps?page=1&product=power-bi-visuals) that meet certain specified code requirements that the Microsoft Power BI team has tested and approved. The tests are designed to check that the visual doesn't access external services or resources.

To view the list of certified Power BI visuals, go to [AppSource](https://appsource.microsoft.com/marketplace/apps?page=1&product=power-bi-visuals).
To submit your own visual for certification, see [Certified Power BI visuals](power-bi-custom-visuals-certified.md).

### Sample reports for Power BI visuals

Each Power BI visual on AppSource has a sample report you can download that illustrates how the visual works. To download the sample report, in the [AppSource](https://appsource.microsoft.com/marketplace/apps?page=1&product=power-bi-visuals) select a Power BI visual and select the **Download Sample** link.

## Organizational store

Power BI admins can approve and deploy Power BI custom visuals for their organization. Report authors can easily discover, update, and use these Power BI visuals. Admins can easily manage these visuals with actions such as updating versions, disabling and enabling Power BI visuals.

:::image type="content" source="media/power-bi-custom-visuals/download-sample-report.png" alt-text="Screenshot of the AppSource download sample report button.":::

To access the organizational store, in the *Visualization* pane select the ellipsis, then select **Get more visuals**.

:::image type="content" source="media/power-bi-custom-visuals/get-more.png" alt-text="Screenshot of the Power B I visualization pane get more visuals option.":::

When the *Power BI visuals* window appears, select the **My organization** tab.

[Read more about organizational visuals](power-bi-custom-visuals-organization.md).

## Custom visual files

You can also develop your own custom Power BI visual, to be used by you, your organization, or the entire Power BI community.

Power BI visuals come in **.pbiviz** file packages that include code for rendering the data served to them. Anyone can create a custom visual and package it as a **.pbiviz** file that can then be imported into a Power BI report.

To import a Power BI visual from a file, see [Import a visual file from your local computer into Power BI](import-visual.md#import-a-visual-file-from-your-local-computer-into-power-bi).

If you're a web developer and want to create your own visual and add it to AppSource, you can learn how to [develop a Power BI visual](develop-circle-card.md) and [publish a custom visual to AppSource](office-store.md).

> [!WARNING]
> A Power BI custom visual could contain code with security or privacy risks. Make sure you trust the author and source before importing it to your report.

For some examples of Power BI custom visuals available for downloading on github, see [Examples of Power BI visuals](./samples.md).

## Considerations and limitations

Licensed visuals aren't supported in the following environments. Therefore, if licensed visuals are used in these environments, Power BI can't tell the ISV if the user is licensed, nor will it block the visual.

* RS (report server) - no Microsoft Entra ID
* Sovereign or government clouds
* PaaS Power BI embedded App owns data
* Publish to web (P2W)

## Related content

* [Develop a Power BI circle card visual](develop-circle-card.md)
* [Power BI visuals project structure](visual-project-structure.md)
* [Guidelines for Power BI visuals](guidelines-powerbi-visuals.md)
* [Examples of Power BI visuals](./samples.md)

More questions? try the [Power BI Community](https://community.powerbi.com/)



================================================
FILE: powerbi-docs/developer/visuals/power-bi-visuals-concept.md
================================================
---
title: Power BI visual system integration
description: Learn about the Visual API, and how Power BI handles the interactions between you, the visual, and the host.
author: billmath
ms.author: billmath
manager:
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 01/04/2024
#customer intent: As a Power BI visual developer, I want to learn how to integrate my visual with Power BI so that I can create a seamless experience for users.
---

# Power BI visuals system integration

The article describes the [Visual API](./visual-api.md), and how Power BI handles the interactions between you, the visual, and the host.

Actions and subsequent updates in Power BI can be initiated manually or automatically. Update types:

* [Interact with a visual through Power BI](#interact-with-a-visual-through-power-bi).
* [Interact with the visual directly](#interact-with-the-visual-directly).
* [Visual interact with Power BI](#visual-interacts-with-power-bi).

The following figure shows how common visual-based actions, like selecting a bookmark, process in Power BI.

![Diagram of the Power BI visual process.](media/power-bi-visuals-concept/visual-concept.png)

## Interact with a visual through Power BI

You can update a visual with Power BI as follows:

* Open the visual's properties panel.

    When you open the visual's properties panel, Power BI fetches supported objects and properties from the visual's *capabilities.json* file. To receive actual values of properties, Power BI calls the `getFormattingModel` method of the visual (APIs earlier than version 5.0 call `enumerateObjectInstances` instead). The API returns modern format pane model components, properties, and their actual values.

    For more information, see [Capabilities and properties of Power BI visuals](capabilities.md).

* [Customize visualization titles, backgrounds, labels, and legends](../../visuals/power-bi-visualization-customize-title-background-and-legend.md).

    When you change the value of a property in the Format panel, Power BI calls the `update` method. Power BI passes in the new `options` object to the `update` method, and the objects contain the new values.

    For more information, see [Objects and properties of Power BI visuals](objects-properties.md).

* Resize the visual.

    When you change the size of a visual, Power BI calls the `update` method and passes in the new `options` object. The `options` objects have nested `viewport` objects that contain the new width and height of the visual.

* Apply a filter at the report, page, or visual level.

    Power BI filters data based on filter conditions. Power BI calls the `update` method of the visual to update the visual with new data.

    The visual gets a new update of the `options` objects when there's new data in one of the nested objects. How the update occurs depends on the data view mapping configuration of the visual.

    For more information, see [Understand data view mapping in Power BI visuals](dataview-mappings.md).

* Select a data point in another visual in the report.

    When you select a data point in another visual in the report, Power BI filters or highlights the selected data points and calls the visual's `update` method. The visual gets new filtered data, or it gets the same data with an array of highlights.

    For more information, see [Highlight data points in Power BI Visuals](highlight.md).

* Select a bookmark in the **Bookmarks** panel of the report.

  When you select a bookmark in the **Bookmarks** panel, either:

  * Power BI calls a function that's passed and registered by the `registerOnSelectionCallback` method. The callback function gets arrays of selections for the corresponding bookmark.
  * Power BI calls the `update` method with a corresponding `filter` object inside the `options` object.

    In both cases, the visual changes its state according to the received selections or `filter` object.

    For more information about bookmarks and filters, see [Visual Filters API in Power BI visuals](filter-api.md).

## Interact with the visual directly

You can also interact directly with the visual to update it:

* Hover over a data element.

    A visual can display more information about a data point through the Power BI Tooltips API. When you hover over a visual element, the visual can handle the event and display data about the associated tooltip element. The visual can display either a standard tooltip or a report page tooltip.

    For more information, see [Add tooltips to your Power BI visuals](add-tooltips.md).

* Change visual properties (For example, by expanding a tree) and the visual saves the new state in the visual properties.

    A visual can save properties values through the Power BI API. For example, when you interact with the visual and the visual needs to save or update properties values, the visual can call the `persistProperties` method.

* Select a URL.

    By default, a visual can't open a URL directly. To open a URL in a new tab, the visual can call the `launchUrl` method and pass the URL as a parameter.

    For more information, see [Create a launch URL](launch-url.md).

* Apply a filter through the visual.

    A visual can call the `applyJsonFilter` method and pass conditions to filter for data in other visuals. Several types of filters are available, including Basic, Advanced, and Tuple filters.

    For more information, see [Visual Filters API in Power BI visuals](filter-api.md).

* Select elements in the visual.

    For more information about selections in a Power BI visual, see [Add interactivity into visual by Power BI visual selections](selection-api.md).

## Visual interacts with Power BI

Sometimes the visual initiates communication with the Power BI host without any input from you:

* A visual requests more data from Power BI.

    A visual processes data part by part. The `fetchMoreData` API method requests the next fragment of data in the semantic model.

    For more information, see [Fetch more data from Power BI](fetch-more-data.md).

* The event service triggers.

    Power BI can export a report to PDF or send a report by e-mail (applies only to certified visuals). To notify Power BI that rendering is finished and that the visual is ready to be captured as PDF or e-mail, the visual should call the Rendering Events API.

    For more information, see [Export reports from Power BI to PDF](../../collaborate-share/end-user-pdf.md).

    To learn about the event service, see ["Rendering" events in Power BI visuals](event-service.md).

## Related content

Interested in creating visualizations and adding them to Microsoft AppSource? See these articles:

* [Visual API](./visual-api.md)
* [Develop a Power BI circle card visual](./develop-circle-card.md)
* [Publish Power BI visuals to Microsoft commercial marketplace](office-store.md)


================================================
FILE: powerbi-docs/developer/visuals/samples.md
================================================
---
title: Examples of Power BI visuals
description: This article gives examples of Power BI visuals that can be found in GitHub, including slicers, more than 20 types of charts, WebGL, and R visuals and scripts.
author: billmath
ms.author: billmath
ms.reviewer: 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 10/13/2024
#customer intent: As a developer, I want to learn about various Power BI visuals available on GitHub so that I can use them in my projects.
---

# Examples of Power BI visuals

This article describes some of the Power BI visuals you can download, use, and modify from GitHub. These sample visuals illustrate how to handle common situations when developing with Power BI.

## Slicers

A slicer narrows the portion of data shown in other visualizations in a report. Slicers are one of several ways to filter data in Power BI.

| <img src="media/samples/chiclet-slicer.png" alt="Screenshot shows Chiclet Slicer." width="200">  | <img src="media/samples/timeline-slicer.png" alt="Screenshot shows Timeline slicer." width="200"> |
| ------------- | ------------- |
| [Chiclet Slicer](https://github.com/Microsoft/powerbi-visuals-chicletslicer/)  </br>Display image or text buttons that act as an in-canvas filter on other visuals | [Timeline slicer](https://github.com/Microsoft/powerbi-visuals-timeline/) </br>Graphical date range selector that filters by date |
|<img src="media/samples/sample-slicer.png" alt="Screenshot shows Slicer sample." width="200">|
|[Slicer sample](https://github.com/Microsoft/powerbi-visuals-sampleslicer/) </br>Demonstrates the use of the Advanced Filtering API|

## Charts

Get inspired with our gallery of Power BI visuals, including bar charts, pie charts, Word Cloud, and others.

| <img src="media/samples/aster-plot.png" alt="Screenshot shows Aster Plot." width="200">  | <img src="media/samples/bullet-chart.png" alt="Screenshot shows Bullet chart." width="200"> | 
| ------------- | ------------- |
| [Aster Plot](https://github.com/Microsoft/powerbi-visuals-asterplot/)  </br>A twist on a standard donut chart that uses a second value to drive sweep angle | [Bullet chart ](https://github.com/Microsoft/powerbi-visuals-bulletchart/) </br>A bar chart with extra visual elements that provide context useful for tracking metrics | 
|<img src="media/samples/Chord.png" alt="Screenshot shows Chord." width="200">| <img src="media/samples/dot-plot.png" alt="Screenshot shows Dot plot." width="200">|
|[Chord](https://github.com/Microsoft/powerbi-visuals-chord/) </br>A graphical method that displays the relationships between data in a matrix | [Dot plot](https://github.com/Microsoft/powerbi-visuals-dotplot/) </br>Shows the distribution of frequencies in a great looking way| 
| <img src="media/samples/dual-kpi.png" alt="Screenshot shows Dual K P I." width="200">| <img src="media/samples/enhanced-scatter.png" alt="Screenshot shows Enhanced Scatter." width="200"> |
| [Dual KPI](https://github.com/Microsoft/powerbi-visuals-dualkpi/) </br>Efficiently visualizes two measures over time, showing their trend on a joint timeline | [Enhanced Scatter](https://github.com/Microsoft/powerbi-visuals-enhancedscatter/) </br>Improvements on the existing scatter chart|
| <img src="media/samples/forcegraph.png" alt="Screenshot shows Force Graph." width="200">| <img src="media/samples/gantt.png" alt="Screenshot shows Gantt." width="200">|
| [Force Graph](https://github.com/Microsoft/powerbi-visuals-forcegraph/) </br>Force layout diagram with curved path, which is useful to show connections between entities | [Gantt](https://github.com/Microsoft/powerbi-visuals-gantt/) </br>A bar chart that illustrates a project timeline or schedule with resources |
|<img src="media/samples/table-heatmap.png" alt="Screenshot shows Table Heatmap." width="200">| <img src="media/samples/histogram-chart.png" alt="Screenshot shows Histogram chart." width="200"> |
| [Table Heatmap](https://github.com/Microsoft/powerbi-visuals-heatmap/) </br>Compare data easily and intuitively using colors in a table | [Histogram chart](https://github.com/Microsoft/powerbi-visuals-histogram/) </br>Visualizes the distribution of data over a continuous interval or certain time period |
| <img src="media/samples/linedot-chart.png" alt="Screenshot shows LineDot chart." width="200"> | <img src="media/samples/mekko-chart.png" alt="Screenshot shows Mekko chart." width="200">|
| [LineDot chart](https://github.com/Microsoft/powerbi-visuals-linedotchart/) </br>An animated line chart with animated dots that engage an audience with data | [Mekko chart](https://github.com/Microsoft/powerbi-visuals-mekkochart/) </br>A mix of 100% stacked column chart and 100% stacked bar chart combined into one view|
| <img src="media/samples/multikpi.png" alt="Screenshot shows Multi K P I." width="200"> | <img src="media/samples/powerkpi.png" alt="Screenshot shows Power K P I." width="200"> |
| [Multi KPI](https://github.com/microsoft/PowerBI-visuals-MultiKPI/) </br> A powerful Multi KPI visualization with a key KPI along with multiple sparklines of supporting data | [Power KPI](https://github.com/microsoft/PowerBI-visuals-PowerKPI/) </br>A powerful KPI Indicator with multi-line chart and labels for current date, value, and variances |
| <img src="media/samples/powerkpi-matrix.png" alt="Screenshot shows Power K P I Matrix." width="200"> | <img src="media/samples/pulse-chart.png" alt="Screenshot shows Pulse chart." width="200">|
| [Power KPI Matrix](https://github.com/microsoft/PowerBI-visuals-PowerKPIMatrix/) </br>Monitor balanced scorecards and unlimited number of metrics and KPIs in a compact, easy to read list| [Pulse chart](https://github.com/Microsoft/powerbi-visuals-pulsechart/) </br>This line chart annotated with key events is perfect for telling stories with data|
| <img src="media/samples/radar-chart.png" alt="Screenshot shows Radar chart." width="200"> | <img src="media/samples/sankey-chart.png" alt="Screenshot shows Sankey chart." width="200"> |
 [Radar chart](https://github.com/Microsoft/powerbi-visuals-radarchart/) </br>Presents multiple measures plotted over a categorical axis, which is useful to compare attributes | [Sankey chart](https://github.com/Microsoft/powerbi-visuals-sankey/) </br>Flow diagram where the width of the series is proportional to the quantity of the flow |
| <img src="media/samples/stream-graph.png" alt="Screenshot shows Stream graph." width="200"> | <img src="media/samples/sunburst.png" alt="Screenshot shows Sunburst chart." width="200">
| [Stream graph](https://github.com/Microsoft/powerbi-visuals-streamgraph/) </br>A stacked area chart with smooth interpolation, which is often used to display values over time | [Sunburst chart](https://github.com/Microsoft/powerbi-visuals-sunburst/) </br>Multilevel donut chart for visualizing hierarchical data|
| <img src="media/samples/tornado.png" alt="Screenshot shows Tornado chart." width="200">| <img src="media/samples/word-cloud.png" alt="Screenshot shows Word Cloud." width="200">
| [Tornado chart](https://github.com/Microsoft/powerbi-visuals-tornado/) </br>Compare the relative importance of variables between two groups | [Word Cloud](https://github.com/Microsoft/powerbi-visuals-wordcloud/) </br>Create a fun visual from frequent text in your data|

## WebGL

WebGL lets web content use an API based on OpenGL ES 2.0 to do 2D and 3D rendering in an HTML canvas.

| <img src="media/samples/globe-map.png" alt="Screenshot shows Globe Map." width="250">|
| ------------- |
| [Globe Map](https://github.com/Microsoft/powerbi-visuals-globemap/) </br>Plot locations on an interactive 3D map

## R visuals

These examples demonstrate how to harness the analytic and visual power of R visuals and R scripts.

| <img src="media/samples/association-rules.png" alt="Screenshot shows Association rules." width="200">| <img src="media/samples/clustering.png" alt="Screenshot shows Clustering." width="200">|
|------------- |------------- | 
| [Association rules](https://github.com/Microsoft/powerbi-visuals-assorules/) </br>Uncover relationships between seemingly unrelated data using if-then statements | [Clustering](https://github.com/Microsoft/powerbi-visuals-clustering-kmeans/) </br>Find similarity groups in your data using k-means algorithm |
|<img src="media/samples/clustering-with-outliers.png" alt="Screenshot shows Clustering with outliers." width="200"> | <img src="media/samples/correlation-plot.png" alt="Screenshot shows Correlation plot." width="200"> |
| [Clustering with outliers](https://github.com/microsoft/PowerBI-visuals-dbscan/) </br>Find similarity groups and outliers in your data| [Correlation plot](https://github.com/Microsoft/powerbi-visuals-corrplot/) </br>Highlight the most correlated variables in a data table|
| <img src="media/samples/decision-tree-chart.png" alt="Screenshot shows Decision tree chart." width="200"> | <img src="media/samples/forecasting-tbats.png" alt="Screenshot shows Forecasting T B A T S." width="200"> |
| [Decision tree chart](https://github.com/Microsoft/powerbi-visuals-decision-tree/) </br>Schematic tree-shaped diagram for determining statistical probability using recursive partitioning | [Forecasting TBATS](https://github.com/Microsoft/powerbi-visuals-forcasting-tbats/) </br>Time-series forecasting for series that have multiple seasonalities using the TBATS model |
| <img src="media/samples/forecasting-with-ARIMA.png" alt="Screenshot shows Forecasting with ARIMA." width="200"> | <img src="media/samples/funnel-plot.png" alt="Screenshot shows Funnel plot." width="200"> |
| [Forecasting with ARIMA](https://github.com/Microsoft/powerbi-visuals-forcastingarima/) </br>Predict future values based on historical data using Autoregressive Integrated Moving Avg (ARIMA) | [Funnel plot](https://github.com/Microsoft/powerbi-visuals-funnel/) </br>Find outliers in your data using a funnel plot |
| <img src="media/samples/outliers-detection.png" alt="Screenshot shows Outliers detection." width="200"> | <img src="media/samples/spline-chart.png" alt="Screenshot shows Spline chart." width="200"> |
| [Outliers detection](https://github.com/Microsoft/powerbi-visuals-outliers-det/) </br>Find outliers in your data using the most appropriate method and plot | [Spline chart](https://github.com/Microsoft/powerbi-visuals-spline/) </br>Visualize and understand noisy data |
| <img src="media/samples/time-series-decomposition-chart.png" alt="Screenshot shows Time Series decomposition chart." width="200"> | <img src="media/samples/time-series-forecasting-chart.png" alt="Screenshot shows Time series forecasting chart." width="200">|
|[Time series decomposition chart](https://github.com/Microsoft/powerbi-visuals-timeseriesdecomposition/) </br>Understand the time series components using "Seasonal and Trend decomposition using Loess" | [Time series forecasting chart](https://github.com/Microsoft/powerbi-visuals-forcasting-exp/) </br>Using exponential smoothing model to predict future values based on previously observed values |

## Related content

* [Import a Power BI visual](./import-visual.md)
* [Develop your own Power BI custom visual](./develop-circle-card.md)



================================================
FILE: powerbi-docs/developer/visuals/selection-api.md
================================================
---
title: Power BI visual data point selections
description: Learn how to use the selection manager to add data point selections to Power BI visuals and make them interactive.
author: billmath
ms.author: billmath
ms.reviewer: rkarlin
manager: rkarlin
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/29/2023
#customer intent: As a Power BI visual developer, I want to learn how to add data point selections to my visual so that I can make it interactive.
---

# Add interactivity into visual by Power BI visuals selections

Power BI provides two ways to interact with visuals - selecting and filtering. The following example demonstrates how to select an item from one visual and notify the other visuals in the report about the new selection state.

The interface corresponds to a `Selection` object:

```typescript
export interface ISelectionId {
    equals(other: ISelectionId): boolean;
    includes(other: ISelectionId, ignoreHighlight?: boolean): boolean;
    getKey(): string;
    getSelector(): Selector;
    getSelectorsByColumn(): SelectorsByColumn;
    hasIdentity(): boolean;
}
```

## Use the selection manager to select data points

The visual host object provides a method for [creating an instance of the selection manager](#create-an-instance-of-the-selection-manager).
The selection manager has a corresponding method for each of the following actions:

- Select
- Clear the selection
- Show the context menu
- Store the current selections
- Check the selection state

### Create an instance of the selection manager

To use the selection manager, create the instance of a selection manager. Usually, visuals create a selection manager instance in the `constructor` section of the visual object.

```typescript
export class Visual implements IVisual {
    private target: HTMLElement;
    private host: IVisualHost;
    private selectionManager: ISelectionManager;
    // ...
    constructor(options: VisualConstructorOptions) {
        this.host = options.host;
        // ...
        this.selectionManager = this.host.createSelectionManager();
    }
    // ...
}
```

### Create an instance of the selection builder

When the selection manager instance is created, you need to create `selections` for each data point of the visual. The visual host object's `createSelectionIdBuilder` method generates a selection for each data point. This method returns an instance of the object with interface `powerbi.visuals.ISelectionIdBuilder`:

```typescript
export interface ISelectionIdBuilder {
    withCategory(categoryColumn: DataViewCategoryColumn, index: number): this;
    withSeries(seriesColumn: DataViewValueColumns, valueColumn: DataViewValueColumn | DataViewValueColumnGroup): this;
    withMeasure(measureId: string): this;
    withMatrixNode(matrixNode: DataViewMatrixNode, levels: DataViewHierarchyLevel[]): this;
    withTable(table: DataViewTable, rowIndex: number): this;
    createSelectionId(): ISelectionId;
}
```

This object has corresponding methods to create `selections` for different types of data view mappings.

> [!NOTE]
> The methods `withTable` and `withMatrixNode` were introduced on API 2.5.0 of the Power BI visuals.
> If you need to use selections for table or matrix data view mappings, update to API version 2.5.0 or higher.

### Create selections for categorical data view mapping

Let's review how selections represent categorical data view mapping for a sample semantic model:

| Manufacturer | Type | Value |
| - | - | - |
| Chrysler | Domestic Car | 28883 |
| Chrysler | Domestic Truck | 117131 |
| Chrysler | Import Car | 0 |
| Chrysler | Import Truck | 6362 |
| Ford | Domestic Car | 50032 |
| Ford | Domestic Truck | 122446 |
| Ford | Import Car | 0 |
| Ford | Import Truck | 0 |
| GM | Domestic Car | 65426 |
| GM | Domestic Truck | 138122 |
| GM | Import Car | 197 |
| GM | Import Truck | 0 |
| Honda | Domestic Car | 51450 |
| Honda | Domestic Truck | 46115 |
| Honda | Import Car | 2932 |
| Honda | Import Truck | 0 |
| Nissan | Domestic Car | 51476 |
| Nissan | Domestic Truck | 47343 |
| Nissan | Import Car | 5485 |
| Nissan | Import Truck | 1430 |
| Toyota | Domestic Car | 55643 |
| Toyota | Domestic Truck | 61227 |
| Toyota | Import Car | 20799 |
| Toyota | Import Truck | 23614 |

The visual uses the following data view mapping:

```json
{
    "dataRoles": [
        {
            "displayName": "Columns",
            "name": "columns",
            "kind": "Grouping"
        },
        {
            "displayName": "Rows",
            "name": "rows",
            "kind": "Grouping"
        },
        {
            "displayName": "Values",
            "name": "values",
            "kind": "Measure"
        }
    ],
    "dataViewMappings": [
        {
            "categorical": {
                "categories": {
                    "for": {
                        "in": "columns"
                    }
                },
                "values": {
                    "group": {
                        "by": "rows",
                        "select": [
                            {
                                "for": {
                                    "in": "values"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ]
}
```

In the preceding example, `Manufacturer` is `columns` and `Type` is `rows`. A series is created by grouping values by `rows` (`Type`).

The visual should be able to slice data by `Manufacturer` or `Type`.

For example, if a user selects `Chrysler` by `Manufacturer`, other visuals should show the following data:

| Manufacturer | Type | Value |
| - | - | - |
| **Chrysler** | Domestic Car | 28883 |
| **Chrysler** | Domestic Truck | 117131 |
| **Chrysler** | Import Car | 0 |
| **Chrysler** | Import Truck | 6362 |

When the user selects `Import Car` by  `Type` (selects data by series), the other visuals should show the following data:

| Manufacturer | Type | Value |
| - | - | - |
| Chrysler | **Import Car** | 0 |
| Ford | **Import Car** | 0 |
| GM | **Import Car** | 197 |
| Honda | **Import Car** | 2932 |
| Nissan | **Import Car** | 5485 |
| Toyota | **Import Car** | 20799 |

:::image type="content" source="media/selection-api/visual-selections-sample.png" alt-text="Screenshot that shows the visual with selections.":::

To display sliced data, fill the visual's data baskets as follows:

:::image type="content" source="media/selection-api/visual-selections-databuckets.png" alt-text="Screenshot that shows visual's data baskets.":::

In the preceding example, `Manufacturer` is category (columns), `Type` is series (rows), and `Sales` is `Values` for series.

> [!NOTE]
> `Values` are required for displaying a series because, according to the data view mapping, `Values` are grouped by `Rows` data.

#### Create selections for categories

```typescript
// categories
const categories = dataView.categorical.categories;

// create label for 'Manufacturer' column
const p = document.createElement("p") as HTMLParagraphElement;
p.innerText = categories[0].source.displayName.toString();
this.target.appendChild(p);

// get count of category elements
const categoriesCount = categories[0].values.length;

// iterate all categories to generate selection and create button elements to use selections
for (let categoryIndex = 0; categoryIndex < categoriesCount; categoryIndex++) {
    const categoryValue: powerbi.PrimitiveValue = categories[0].values[categoryIndex];

    const categorySelectionId = this.host.createSelectionIdBuilder()
        .withCategory(categories[0], categoryIndex) // we have only one category (only one `Manufacturer` column)
        .createSelectionId();
    this.dataPoints.push({
        value: categoryValue,
        selection: categorySelectionId
    });
    console.log(categorySelectionId);

    // create button element to apply selection on click
    const button = document.createElement("button") as HTMLButtonElement;
    button.value = categoryValue.toString();
    button.innerText = categoryValue.toString();
    button.addEventListener("click", () => {
        // handle click event to apply correspond selection
        this.selectionManager.select(categorySelectionId);
    });
    this.target.appendChild(button);
}
```

In the preceding sample code, we iterate through all categories. In each iteration, we call `createSelectionIdBuilder` to create the next selection for each category by calling the `withCategory` method of the selection builder. The `createSelectionId` method is used as a final method to return the generated `selection` object.

In the `withCategory` method, we pass the column of `category`, in the sample, its `Manufacturer`, and the index of category element.

#### Create selections for series

```typescript
// get groupped values for series
const series: powerbi.DataViewValueColumnGroup[] = dataView.categorical.values.grouped();

// create label for 'Type' column
const p2 = document.createElement("p") as HTMLParagraphElement;
p2.innerText = dataView.categorical.values.source.displayName;
this.target.appendChild(p2);

// iterate all series to generate selection and create button elements to use selections
series.forEach( (ser: powerbi.DataViewValueColumnGroup) => {
    // create selection id for series
    const seriesSelectionId = this.host.createSelectionIdBuilder()
        .withSeries(dataView.categorical.values, ser)
        .createSelectionId();

    this.dataPoints.push({
        value: ser.name,
        selection: seriesSelectionId
    });

    // create button element to apply selection on click
    const button = document.createElement("button") as HTMLButtonElement;
    button.value =ser.name.toString();
    button.innerText = ser.name.toString();
    button.addEventListener("click", () => {
        // handle click event to apply correspond selection
        this.selectionManager.select(seriesSelectionId);
    });
    this.target.appendChild(button);
});
```

### Create selections for table data view mapping

The following example shows table data view mapping:

```json
{
    "dataRoles": [
        {
            "displayName": "Values",
            "name": "values",
            "kind": "GroupingOrMeasure"
        }
    ],
    "dataViewMappings": [
        {
            "table": {
                "rows": {
                    "for": {
                        "in": "values"
                    }
                }
            }
        }
    ]
}
```

To create a selection for each row of table data view mapping, call the `withTable` method of selection builder.

```typescript
public update(options: VisualUpdateOptions) {
    const dataView = options.dataViews[0];
    dataView.table.rows.forEach((row: DataViewTableRow, rowIndex: number) => {
        this.target.appendChild(rowDiv);
        const selection: ISelectionId = this.host.createSelectionIdBuilder()
            .withTable(dataView.table, rowIndex)
            .createSelectionId();
    }
}
```

The visual code iterates the rows of the table and each row calls the `withTable` table method. Parameters of the `withTable` method are the `table` object and the index of the table row.

### Create selections for matrix data view mapping

```typescript
public update(options: VisualUpdateOptions) {
    const host = this.host;
    const rowLevels: powerbi.DataViewHierarchyLevel[] = dataView.matrix.rows.levels;
    const columnLevels: powerbi.DataViewHierarchyLevel[] = dataView.matrix.rows.levels;

    // iterate rows hierarchy
    nodeWalker(dataView.matrix.rows.root, rowLevels);
    // iterate columns hierarchy
    nodeWalker(dataView.matrix.columns.root, columnLevels);

    function nodeWalker(node: powerbi.DataViewMatrixNode, levels: powerbi.DataViewHierarchyLevel[]) {
        const nodeSelection = host.createSelectionIdBuilder().withMatrixNode(node, levels);

        if (node.children && node.children.length) {
            node.children.forEach(child => {
                nodeWalker(child, levels);
            });
        }
    }
}
```

In the sample, `nodeWalker` recursively calls each node and child node.

`nodeWalker` creates a `nodeSelection` object on each call. Each `nodeSelection` represents a `selection` of corresponding nodes.

## Select data points to slice other visuals

In this example, we created a click handler for button elements. The handler calls the `select` method of the selection manager and passes the selection object.

```typescript
button.addEventListener("click", () => {
    // handle click event to apply correspond selection
    this.selectionManager.select(categorySelectionId);
});
```

The interface of the `select` method:

```typescript
interface ISelectionManager {
    // ...
    select(selectionId: ISelectionId | ISelectionId[], multiSelect?: boolean): IPromise<ISelectionId[]>;
    // ...
}
```

The `select` method can accept an array of selections. This allows your visual to have several data points selected at once. The second parameter, `multiSelect`, is responsible for multi-selections. If `multiSelect` is true, Power BI doesn't clear the previous selection state when it applies the current selection. If the value is false, the previous selection is overwritten.

A typical example of using `multiSelect` is handling the <kbd>Ctrl</kbd> button state on a click event. When the <kbd>Ctrl</kbd> button is held down, you can select more than one object.

```typescript
button.addEventListener("click", (mouseEvent) => {
    const multiSelect = (mouseEvent as MouseEvent).ctrlKey;
    this.selectionManager.select(seriesSelectionId, multiSelect);
});
```

## Related content

> [!div class="nextstepaction"]
> [Handle selections on bookmarks switching](bookmarks-support.md#visuals-with-selection)

> [!div class="nextstepaction"]
> [Add a context menu for visuals data points](context-menu.md)




================================================
FILE: powerbi-docs/developer/visuals/sort-options.md
================================================
---
title: Sorting options for Power BI visuals
description: This article discusses sorting behavior options for Power BI visuals. Default, implicit and custom sort.
author: billmath
ms.author: billmath
ms.reviewer:
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 10/12/2024
#customer intent: As a Power BI visual developer, I want to learn how to enable sorting options for my visual so that users can sort data in the visual.
---

# Sorting options for Power BI visuals

This article describes the different options available for to specifying the way a visual sorts items in Power BI.

By default, a visual doesn't support modifying its sorting order, unless stated otherwise in the *capabilities.json* file.

The *sorting* capability requires at least one of the following parameters:

* [default](#default-sorting)
* [implicit](#implicit-sorting)
* [custom](#custom-sorting)

## Default sorting

The `default` option is the simplest form. It allows the user to sort according to any one field and direction (ascending or descending). The user selects the direction and field from the **more options** menu.

:::image type="content" source="media/sort-options/default-sorting.png" alt-text="Screenshot of table of US states with default sorting options the context menu.":::

To enable default sorting, add the following code to your capabilities.json file:

```json
    "sorting": {
        "default": {   }
    }
```

## Implicit sorting

Implicit sorting allows you to pre-define a sorting array using parameter `clauses`, that describes sorting for each data role. The user can't change the sorting order, so Power BI doesn't display sorting options in the visual's menu. However, Power BI does sort data according to specified settings.

To enable implicit sorting, add the implicit `clauses` to your *capabilities.json* file
`clauses` parameters can contain several objects with two parameters each:

* `role`: Determines `DataMapping` for sorting
* `direction`: Determines sort direction (1 = Ascending, 2 = Descending)

```json
    "sorting": {
        "implicit": {
            "clauses": [
                {
                    "role": "category",
                    "direction": 1
                },
                {
                    "role": "measure",
                    "direction": 2
                }
            ]
        }
    }
```

## Custom sorting

Custom sorting gives the developer more flexibility when sorting. The developer can:

* Allow the user to sort by multiple fields at a time.
* Set a default sorting order for the data
* Allow custom sorting operations during runtime

### Enable custom sorting

To enable custom sorting, add the following code to your *capabilities.json* file:

```typescript
    "sorting": {
        "custom": {} 
    }
```

### Example: Custom sort API

```typescript
let queryName1 = this.dataView.matrix.columns.levels[0].sources[0].queryName;
let queryName2 = this.dataView.matrix.columns.levels[1].sources[0].queryName;
let args: CustomVisualApplyCustomSortArgs = {
    sortDescriptors: [
        {
            queryName: queryName1,
            sortDirection: powerbi.SortDirection.Ascending
        },
        {
            queryName: queryName2,
            sortDirection: powerbi.SortDirection.Descending
        },
    ]
};
this.host.applyCustomSort(args);
```

## Related content

* [Understand data view mapping in Power BI visuals](dataview-mappings.md)
* [Understanding capabilities](capabilities.md)



================================================
FILE: powerbi-docs/developer/visuals/submission-testing.md
================================================
---
title: Testing submissions of Power BI custom visuals
description: Learn how to perform test cases that your Power BI custom visual must pass before publishing it on AppSource.
author: billmath
ms.author: billmath
ms.reviewer: 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 06/09/2024
#customer intent: As a Power BI visual developer, I want to learn how to test my custom visual before submitting it for publication so that it meets the required test cases.
---

# Test a Power BI custom visual before submitting it for publication

Before you publish your visual to [AppSource](https://appsource.microsoft.com/marketplace/apps?product=power-bi-visuals), it must pass the tests listed in this article. It's important to test your visual before you submit it. If your visual doesn't pass the required test cases, it will be rejected.

For more information about the publishing process, see [Publish Power BI visuals to Partner Center](./office-store.md).

## Testing a new version of a published visual

By default, Power BI loads the latest published version of the visual from AppSource, even if you import the visual from a local file.
Version numbers consist of four digits in the following format: `X.X.X.X`.

When testing or updating a visual that's already published, make sure you're using the correct version of the visual **without changing the GUID**. To override the AppSource version with a local file version, enable Developer mode in either Power BI Desktop or Power BI service.

>[!IMPORTANT]
>When testing or debugging a new version of a visual that's available in AppSource, **do not change the GUID of the visual**. Use Developer mode instead.

### Enable Developer mode in Power BI Desktop

In Power BI Desktop, Developer mode is valid for only one session. If you open a new Power BI Desktop instance for testing, you need to enable Developer mode again.

To enable Developer mode, follow these steps:

1. Open Power BI Desktop.
2. Select **File** > **Options and settings**.
3. Select **Options**.
4. In the Options window, from the CURRENT FILE list, select **Report settings**.
5. In Developer Mode, select the **Turn on developer mode for this session** option.

:::image type="content" source="media/submission-testing/developer-mode-desktop.png" alt-text="Screenshot of Developer mode in Power BI Desktop.":::

### Enable Developer mode in Power BI service

In Power BI service, Developer mode is kept per user account. Whenever a user loads the package from the local file, Power BI will ignore the AppSource version of the visual.

To enable Developer mode in Power BI service, follow the instructions in [Set up Power BI service for developing a visual](environment-setup.md#enable-developer-mode).

## General test cases

Verify that your visual passes the general test cases.

| Test case | Expected results
| --------- | ----------------
| Create a **Stacked column chart** with **Category** and **Value**. Convert it to your visual and then back to column chart. | No error appears after these conversions. |
| Create a **Gauge** with three measures. Convert it to your visual and then back to **Gauge**. | No error appears after these conversions. |
| Make selections in your visual. | Other visuals reflect the selections. |
| Select elements in other visuals. | Your visual shows filtered data according to selection in other visuals. |
| Check min/max **dataViewMapping** conditions. | Field buckets can accept multiple fields, a single field, or are determined by other buckets. The min/max **dataViewMapping** conditions must be correctly set up in the capabilities of your visual. |
| Remove all fields in different orders. | Visual cleans up properly as fields are removed in arbitrary order. There are no errors in the console or the browser. |
| Open the **Format** pane with each possible bucket configuration. | This test doesn't trigger null reference exceptions. |
| Filter data using the **Filter** pane at the visual, page, and report level. | Tooltips are correct after applying filters. Tooltips show the filtered value. |
| Filter data using a **Slicer**. | Tooltips are correct after applying filters. Tooltips show the filtered value. |
| Filter data using a published visual. For instance, select a pie slice or a column. | Tooltips are correct after applying filters. Tooltips show the filtered value. |
| If cross-filtering is supported, verify that filters work correctly. | Applied selection filters other visuals on this page of the report. |
| Select with <kbd>Ctrl</kbd>, <kbd>Alt</kbd>, and <kbd>Shift</kbd> keys. | No unexpected behaviors appear. |
| Change the **View Mode** to **Actual size**, **Fit to page**, and **Fit to width**. | Mouse coordinates are accurate. |
| Resize your visual. | Visual reacts correctly to resizing. |
| Set the report size to the minimum. | There's no display errors. |
| Ensure scroll bars work correctly. | Scroll bars should exist, if necessary. Check scroll bar sizes. Scroll bars shouldn't be too wide or tall. Position and size of scroll bars must be in accord with other elements of your visual. Verify that scroll bars are needed for different sizes of the visual. |
| Pin your visual to a **Dashboard**. | The visual displays properly. |
| Add multiple versions of your visual to a single report page. | All versions of the visual display and operate properly. |
| Add multiple versions of your visual to multiple report pages. | All versions of the visual display and operate properly. |
| Switch between report pages. | The visual displays properly. |
| Test Reading view and Edit view for your visual. | All functions work correctly. |
| If your visual uses animations, add, change, and delete elements of your visual. | Animation of visual elements works correctly. |
| Open the **Property** pane. Turn properties on and off, enter custom text, stress the options available, and input bad data. | The visual responds correctly. |
| Save the report and reopen it. | All properties settings persist. |
| Switch pages in the report and then switch back. | All properties settings persist. |
| Test all functionality of your visual, including different options that the visual provides. | All displays and features work correctly. |
| Test all numeric, date, and character data types, as in the following tests. | All data is formatted properly. |
| Review formatting of tooltip values, axis labels, data labels, and other visual elements with formatting. | All elements are formatted correctly. |
| Verify that data labels use the format string. | All data labels are formatted correctly. |
| Switch automatic formatting on and off for numeric values in tooltips. | Tooltips display values correctly. |
| Test data entries with different types of data, including numeric, text, date-time, and different format strings from the model. Test different data volumes, such as thousands of rows, one row, and two rows. | All displays and features work correctly. |
| Provide bad data to your visual, such as null, infinity, negative values, and wrong value types. | All displays and features work correctly. |

## Optional browser testing

The AppSource team validates a visual on the most current Windows versions of Google Chrome, Microsoft Edge, and Mozilla Firefox browsers.
Optionally, test your visual in the following browsers.

| Test case | Expected results
| --------- | ----------------
| **Windows** |
| Google Chrome (previous version) | All displays and features work correctly. |
| Mozilla Firefox (previous version) | All displays and features work correctly. |
| Microsoft Edge (previous version) | All displays and features work correctly. |
| Microsoft Internet Explorer 11 (optional) | All displays and features work correctly. |
| **macOS** |
| Chrome (previous version) | All displays and features work correctly. |
| Firefox (previous version) | All displays and features work correctly. |
| Safari (previous version) | All displays and features work correctly. |
| **Linux** |
| Firefox (latest and previous versions) | All displays and features work correctly. |
| **Mobile iOS** |
| Apple Safari iPad (previous Safari version) | All displays and features work correctly. |
| Chrome iPad (latest Safari version) | All displays and features work correctly. |
| **Mobile Android** |
| Chrome (latest and previous versions) | All displays and features work correctly. |

## Desktop testing

Test your visual in the current version of [Power BI Desktop](https://powerbi.microsoft.com/desktop/).

| Test case | Expected results
| --------- | ----------------
| Test all features of your visual. | All displays and features work correctly. |
| Import, save, open a file, and publish to the Power BI web service by using the **Publish** button in Power BI Desktop. | All displays and features work correctly. |
| Change the numeric format string to have zero decimal places or three decimal places by increasing or decreasing the precision. | The visual displays correctly. |

## Performance testing

Your visual should perform at an acceptable level. Use developer tools to validate its performance. Don't rely on visual cues and the console time logs.

| Test case | Expected results
| --------- | ----------------
| Create a visual with many visual elements. | The visual should perform well and not freeze the application. There should be no performance issues with elements such as animation speed, resizing, filtering, and selecting. Check out these [tips for optimal performance](performance-tips.md).

## Related content

* [Publish Power BI visuals to Partner Center](./office-store.md)
* [Get a Power BI visual certified](power-bi-custom-visuals-certified.md)
* [Performance tips for creating quality Power BI custom visuals](performance-tips.md)

**More questions?** [Ask the Power BI Community](https://community.powerbi.com/).



================================================
FILE: powerbi-docs/developer/visuals/subselection-api.md
================================================
---
title: Subselection API in Power BI Visuals
description: The article describes how to use Power BI Visuals subselectionAPI to allow users to format visuals easily.
author: billmath
ms.author: billmath
ms.reviewer: tebercov , shafeeq
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 02/19/2024
---

# Subselection API (preview)

[On-object formatting](../../create-reports/power-bi-on-object-interaction.md) allows users to quickly and easily modify the format of visuals by directly selecting the elements they want to modify. When an element is selected, the format pane automatically navigates and expands the specific formatting setting for the selected element. As part of [on-object formatting](./on-object-formatting-api.md), the subselection service is used to send subselections and outlines to Power BI.

## How to use the Subselection API

The SubSelection Service provides two methods:

* [subSelect](#subselect)
* [updateRegionOutlines](#updateregionoutlines)

### subSelect

Sends the subselection for Power BI to use when a user selects an element that allows subselections.

```typescript
subSelect(args: visuals.CustomVisualSubSelection | undefined): void

CustomVisualSubSelection
interface CustomVisualSubSelection {
            customVisualObjects: CustomVisualObject[];
            displayName: string;
            subSelectionType: SubSelectionStylesType;
            selectionOrigin: SubSelectionOrigin;
            /** Whether to show the UI for this sub-selection, like formatting context menus and toolbar */
            showUI: boolean;
            /** If immediate direct edit should be triggered, the ID of the sub-selection outline to edit */
            immediateDirectEdit?: string;
            metadata?: unknown;
        }


interface CustomVisualObject {
            objectName: string;
            selectionId: powerbi.visuals.ISelectionId | undefined;
        }
```

This method has the following parameters:

* customVisualObjects: an array that contains `customVisualObjects`, the objectName of the object should be the same as the one declared in the *capabilities.json*, and the selectionId for the selected data point, if it exists.
* displayName:  the display name should be localized if the visual supports localization.
* subSelectionType: the type of the subselection (shape, text, or Numeric text).
* selectionOrigin: the coordinates of the subselected element.
* showUI: Whether to show the UI for this subselection, like formatting context menus and toolbar.
* immediateDirectEdit:  If immediate direct edit should be triggered, the ID of the subselection outline to edit.

If you don't use the [`HTMLSubSelectionHelper`](./utils-on-object.md), you need to manage the subselections.

#### Subselection example

In this example, we add an event listener to the host element, for the right-click, context menu events.

```typescript
constructor(options: VisualConstructorOptions) {
        this.hostElement = options.element;
        this.subSelectionService = options.host.subSelectionService;
        ….
}

public update(options: VisualUpdateOptions) {
 if (options.formatMode) {
             // remove event listeners which are irrelevant for format mode.
   …
             this.hostElement.addEventListener('click', this.handleFormatModeClick);
             this.hostElement.addEventListener('contextmenu',  this.handleFormatModeContextMenu);
         } else {
             this.hostElement.removeEventListener('click', this.handleFormatModeClick);
             this.hostElement.removeEventListener('contextmenu', this.handleFormatModeContextMenu);
   …
             // add event listeners which are irrelevant for format mode
         }
 }
 
private handleFormatModeClick(event: MouseEvent): void {
        this.subSelectFromEvent(event, true /**showUI */);
    }

 private handleFormatModeContextMenu(event: MouseEvent): void {
        this.subSelectFromEvent(event, false);
    }

private subSelectFromEvent(event: MouseEvent, showUI: boolean): void {
        //find the element which was selected and fill the needed fields
        const cVObject: powerbi.visuals.CustomVisualObject = {
            objectName: 'myObject',//the object name that is relevant to the clicked element
            selectionId: undefined
        };
        const subSelection: CustomVisualSubSelection = {
            customVisualObjects: [cVObject],
            displayName: 'myObject',
            selectionOrigin: {
                x: event.clientX,
                y: event.clientY
            },
            subSelectionType: SubSelectionStylesType.Shape,// choose the relevant type
            showUI
        };
        this.subSelectionService.subSelect(subSelection);
    }
```

### updateRegionOutlines

This method sends outlines to Power BI to render. Use it in the `update` method of the visual since that's where Power BI sends the subselection that the visual sent previously. You can also use it when you want to render an outline for a hovered element.

```tyepscript
updateRegionOutlines(outlines: visuals.SubSelectionRegionOutline[]): void

SubSelectionRegionOutline
interface SubSelectionRegionOutline {
            id: string;
            visibility: SubSelectionOutlineVisibility; // controls visibility for outlines
            outline: SubSelectionOutline;
        }
```

If you don't use the [`HTMLSubSelectionHelper`](./utils-on-object.md), you have to manually manage the outlines and their state (if they're active, hovered or not visible).

#### Update region outlines example

In this example we assume that we have an object called `myObject`, and we want to render a rectangle outline when the relevant element is hovered. We use the code in the previous example for subSelect.

In the update, we also need to add an event listener for the `pointerover` event.  

We want to manage our outlines using a Record.

```typescript
private subSelectionRegionOutlines: Record<string, SubSelectionRegionOutline > = {};


public update(options: VisualUpdateOptions) {
 if (options.formatMode) {
             // remove event listeners which are irrelevant for format mode.
   …
             this.hostElement.addEventListener('click', this.handleFormatModeClick);
             this.hostElement.addEventListener('contextmenu',  this.handleFormatModeContextMenu);
   this.hostElement.addEventListener('pointerover', this.handleFormatModePointerOver);
         } else {
             this.hostElement.removeEventListener('click', this.handleFormatModeClick);
             this.hostElement.removeEventListener('contextmenu', this.handleFormatModeContextMenu);
   this.hostElement.removeEventListener('pointerover', this.handleFormatModePointerOver);
   …
             // add event listeners which are irrelevant for format mode
         }
 }
 
 private handleFormatModePointerOver(event: MouseEvent): void {
         // use the event to extract the element that was hovered.
         // in this example we assume that we found the element and it is related to object called myObject.
         // we need to clear previously hovered outlines before rendering
         const regionOutlines = getValues(this.subSelectionRegionOutlines);
         const hoveredOutline = regionOutlines.find(outline => outline.visibility === SubSelectionOutlineVisibility.Hover);
         if (hoveredOutline) {
             this.subSelectionRegionOutlines[hoveredOutline.id] = {
                 ...this.subSelectionRegionOutlines[hoveredOutline.id],
                 visibility: powerbi.visuals.SubSelectionOutlineVisibility.None
             };
         }
         // now we will build the outline for myObject relevant element.
         let element: HTMLElement;// assume we found the relevant element.
         const domRect = element.getBoundingClientRect();
         const { x, y, width, height } = domRect;
         const outline: powerbi.visuals.RectangleSubSelectionOutline = {
             height,
             width,
             x,
             y,
             type: powerbi.visuals.SubSelectionOutlineType.Rectangle,
         };
     
         const regionOutline: powerbi.visuals.SubSelectionRegionOutline = {
             id: 'myObject',
             visibility: powerbi.visuals.SubSelectionOutlineVisibility.Hover,
             outline
         };
         this.subSelectionRegionOutlines[regionOutline.id] = regionOutline;
         this.renderOutlines();
         // you need to remove the hovered outline when the element is not hovered anymore
     }
     private renderOutlines(): void {
         const regionOutlines = getValues(this.subSelectionRegionOutlines);
         this.subSelectionService.updateRegionOutlines(regionOutlines);
     }
```

## Related content

* [On object utils](./utils-on-object.md)
* [On-object formatting API](./on-object-formatting-api.md)



================================================
FILE: powerbi-docs/developer/visuals/supportskeyboardfocus-feature.md
================================================
---
title: Keyboard navigation feature in Power BI
description: Learn how to enable the accessibility feature that uses the keyboard to navigate through visuals in Power BI.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 01/20/2024
#customer intent: As a Power BI visual developer, I want to learn how to enable keyboard navigation in my visual so that users can navigate through the visual using the keyboard.
---

# Support keyboard navigation in a custom visual

This article explains how to support navigation through a Power BI visual using the keyboard. Keyboard navigation makes Power BI more accessible to people with disabilities and provides more options for interacting with reports.

The `supportsKeyboardFocus` feature makes it possible to navigate the data points of the visual by using only the keyboard.

## Basic keyboard accessibility features

All visuals come with the following basic keyboard accessibility:

* Press <kbd>Esc</kbd> to move the focus from inside the visual to the visual container.
* Press <kbd>Tab</kbd> from inside a custom visual to navigate through tabbable elements in the visual. Pressing <kbd>Tab</kbd> after the last tababble element moves the focus back outside of the visual.

## Enhanced keyboard accessibility

To make your custom visual even more accessible, add the `supportsKeyboardFocus` capability to your visual by adding the following line to the "capabilities.json" file:

```json
    {   
        ...
        "supportsKeyboardFocus": true
        ...
    }
```

This capability adds the following features to your custom visual:

* Press <kbd>Enter</kbd> when the focus is on the visual container to move the focus to inside the custom visual.
* Press <kbd>Tab</kbd> from inside the custom visual to navigate through tabbable elements. The focus stays inside the visual until you press <kbd>Esc</kbd>.

> [!NOTE]
> Not all HTML elements are tabbable by default (for example, div and span). Consider adding the correct attribute (e.g tabindex) to these elements to make them tabbable.

## Considerations and limitations

* This feature requires API v2.1.0 or higher.

* This feature can't be applied to image visuals.

* Pressing <kbd>Enter</kbd> on the visual container won't always land on the first focusable element of the visual. To be sure to start at the first element, focus it programmatically after the focus goes into the visual.

* After pressing <kbd>Enter</kbd> on the visual container and after pressing <kbd>Tab</kbd> on the last focusable element, the user might have to press <kbd>Tab</kbd> more than once to get to the first element.

## Related content

* [Design Power BI reports for accessibility](../../create-reports/desktop-accessibility-creating-reports.md)
* [Developing a Power BI circle card visual](develop-circle-card.md)



================================================
FILE: powerbi-docs/developer/visuals/supportsmultivisualselection-feature.md
================================================
---
title: Apply selection to multiple visuals feature in Power BI
description: This article describes how to apply a selection to multiple visuals by using the support multiple visual selection feature in Power BI.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 12/19/2023
#customer intent: As a Power BI visual developer, I want to learn how to enable the support multiple visual selection feature in my visual so that users can apply a selection to multiple visuals in a report.
---

# Apply a selection to multiple visuals in a report

The `supportsMultiVisualSelection` feature enables you to select values from one visual in a Power BI report and apply the selected values to all the visuals in that report.

For example, in the **Overview** page of the [Retail Analysis sample](../../create-reports/sample-retail-analysis.md):

1. Select the **Total Sales Variance %, Sales Per Sq Ft and This Year Sales by District and District** visual. In the **Filters** pane that appears, under **Chain**, select **Fashions Direct**.

:::image type="content" source="media/supportsMultiVisualSelection-feature/selections.png" alt-text="Screenshot of the Power BI service. A bubble chart visual is selected. In the Filters pane, Fashions Direct is selected.":::

2. Select the **Total Sales Variance by FiscalMonth and District Manager** visual. In the **Filters** pane that appears, under **FiscalMonth**, select **Jan**.

:::image type="content" source="media/supportsMultiVisualSelection-feature/selections-2.png" alt-text="Screenshot of the Power BI service. A bar chart visual is selected. In the Fiscal Month pane, Jan is selected.":::

In the report, these selections apply to all visuals that support this feature. The scope of the visuals is now limited to **Fashions Direct** and **January**.

## Enable the support multiple visual selection feature

To use the support multiple visual selection feature, add the following code to the *capabilities.json* file of your visual:

```json
    {   
            ...
        "supportsMultiVisualSelection": true
            ...
    }
```

## Considerations and limitations

* This feature requires API v3.2.0 or later.
* This feature doesn't apply to image visuals.
* This feature doesn't apply to certain advanced visuals, such as key driver, decomposition tree, Q&A, textbox, and gauge chart visuals.

## Related content

* [Visuals in Power BI](power-bi-visuals-concept.md).
* [Developing a Power BI circle card](develop-circle-card.md).



================================================
FILE: powerbi-docs/developer/visuals/TOC.yml
================================================
- name: "Power BI visuals documentation"
  href: index.yml
  expanded: true
  items:
  - name: Overview
    expanded: true
    items: 
    - name: "What are Power BI custom visuals"
      href: power-bi-custom-visuals.md
    - name: "Develop a BI custom visual"
      href: develop-power-bi-visuals.md
  - name: Tutorials
    items:
    - name: "Tutorial: Develop a Power BI circle card visual"
      href: develop-circle-card.md  
    - name: "Tutorial: Add formatting options"
      href: custom-visual-develop-tutorial-format-options.md
    - name: "Tutorial: Build a bar chart visual"
      href: create-bar-chart.md
    - name: "Tutorial: Use React to create a Power BI visual"
      href: create-react-visual.md
    - name: "Tutorial: Create an R-powered visual"
      href: create-r-based-power-bi-desktop.md
    - name: "Build a funnel plot from R script to R visual"
      href: funnel-plot-from-r.md
  - name: About Power BI custom visuals
    items: 
    - name: "Import a Power BI visual"
      href: import-visual.md
    - name: "Visuals FAQ"
      href: power-bi-custom-visuals-faq.yml
    - name: "Examples of Power BI visuals"
      href: samples.md
    - name: "The About dialog"
      href: about-dialog.md
  - name: Develop your own custom visual
    items:
    - name: "Set up your environment for developing a Power BI visual"
      href: environment-setup.md
    - name: "Power BI visuals project structure"
      href: visual-project-structure.md
    - name: "Power BI visuals system integration"
      href: power-bi-visuals-concept.md
    - name: "Define capabilities"
      href: capabilities.md
    - name: "Data view mappings"
      href: dataview-mappings.md
    - name: "Sort data"
      href: sort-options.md
    - name: "Objects and properties"
      href: objects-properties.md
    - name: "Performance tips"
      href: performance-tips.md
    - name: "Create mobile friendly visuals"
      href: mobile-development.md
    - name: "Debug visuals"
      href: visuals-how-to-debug.md
    - name: "Troubleshoot environment setup"
      href: power-bi-custom-visuals-troubleshoot.md
  - name: Add features to your custom visual
    expanded: false
    items:
    - name: "Create a dialog box"
      href: create-display-dialog-box.md         
    - name: "Add a display warning icon to your visual"
      href: visual-display-warning-icon.md      
    - name: "Visual interactions"
      href: visuals-interactions.md
    - name: "Add selections"
      href: selection-api.md
    - name: "Visuals tooltips"
      href: add-tooltips.md
    - name: "Analytics pane" 
      href: analytics-pane.md
    - name: "Add format pane"
      expanded: false
      items:
        - name: "Format pane"
          href: format-pane-general.md
        - name: "Format pane example"
          href: format-pane-example.md
        - name: "Formatting components"
          expanded: false
          items:
            - name: "Formatting card"
              href: formatting-model-card.md
            - name: "Formatting group"
              href: formatting-model-group.md
            - name: "Formatting container"
              href: formatting-model-container.md
        - name: "Formatting slices"
          expanded: false
          items:
            - name: "Toggle switch"
              href: "formatting-model-toggleswitch.md"
            - name: "Num up down"
              href: "formatting-model-numupdown.md"
            - name: "Slider"
              href: "formatting-model-slider.md"
            - name: "Color picker"
              href: "formatting-model-colorpicker.md"
            - name: "Dropdowns"
              href: "formatting-model-dropdown.md"
            - name: "Flag selections"
              href: "formatting-model-flagselection.md"
            - name: "Text input"
              href: "formatting-model-textinput.md"
            - name: "Text area"
              href: "formatting-model-textarea.md"
            - name: "Font picker"
              href: "formatting-model-fontpicker.md"
            - name: "Alignment group"
              href: "formatting-model-alignmentgroup.md"
            - name: "Font control"
              href: "formatting-model-fontcontrol.md"
            - name: "Margin padding"
              href: "formatting-model-marginpadding.md"
    - name: "Fetch more data" 
      href: fetch-more-data.md
    - name: "Add bookmarks support"
      href: bookmarks-support.md
    - name: "Add context menu support"
      href: context-menu.md
    - name: "Add dynamic format strings support"
      href: dynamic-format.md
    - name: "Add drill-down support"
      href: drill-down-support.md
    - name: "Add colors to your visual" 
      href: add-colors-power-bi-visual.md
    - name: "Add conditional formatting" 
      href: conditional-format.md
    - name: "Highlight data in visuals"
      href: highlight.md
    - name: "Enable selection across multiple visuals"
      href: supportsmultivisualselection-feature.md
    - name: "Enable keyboard navigation"
      href: supportskeyboardfocus-feature.md
    - name: "Add high-contrast mode support"
      href: high-contrast-support.md
    - name: "Enable sync slicers"
      href: enable-sync-slicers.md
    - name: "Display subtotal data"
      href: total-subtotal-api.md     
    - name: "Render a visual without requiring data binding"
      href: no-dataroles-support.md
    - name: "Add localization"
      href: localization.md
    - name: "Add unit tests for visual project"
      href: unit-tests-introduction.md
    - name: "Advanced edit mode"
      href: advanced-edit-mode.md
  - name: Publish your Power BI custom visual
    items:
    - name: "Package a Power BI visual"
      href: package-visual.md
    - name: "Test your Power BI custom visual"  
      href: submission-testing.md
    - name: "Publish your Power BI custom visuals to AppSource"
      href: office-store.md
    - name: "Get a Power BI custom visual certified"
      href: power-bi-custom-visuals-certified.md
    - name: "Guidelines for publishing Power BI visuals" 
      href: guidelines-powerbi-visuals.md
    - name: "Visuals for an organization in Power BI"
      href: power-bi-custom-visuals-organization.md
  - name: Licenses
    items:
    - name: Licensing models for AppSource visuals
      href: custom-visual-licenses.md
    - name: "License enforcement API"
      href: licensing-api.md
    - name: Transactability and licensing FAQ
      href: licensing-faq.yml
  - name: Reference
    items: 
    - name: "Changelog"
      href: changelog.md
    - name: "Landing page" 
      href: landing-page.md
    - name: "Launch URL" 
      href: launch-url.md
    - name: "Visual API"
      href: visual-api.md
    - name: "Local storage API" 
      href: local-storage.md
    - name: "Authentication"
      expanded: false
      items:
      - name: "Authentication API"
        href: authentication-api.md
      - name: "Microsoft Entra ID application setup"
        href: entra-id-authentication.md
    - name: "On object formatting API" 
      href: on-object-formatting-api.md
    - name: "Subselection API" 
      href: subselection-api.md
    - name: "Filter visuals API" 
      href: filter-api.md
    - name: "Identity filter API" 
      href: identity-filter-api.md
    - name: "Hierarchy identity filter API"
      href: hierarchy-filter-api.md
    - name: "Detect filter API"
      href: detect-filter-api.md
    - name: "'Rendering' events API" 
      href: event-service.md
    - name: "Drilldown API"
      href: drilldown-api.md
    - name: "Dynamic drill support API"
      href: dynamic-drill-down.md
    - name: "File download API"
      href: file-download-api.md
    - name: "Permissions API"
      href: permissions-api.md
    - name: "Power BI Visual utilities"
      items:    
      - name: "Adding external libraries"
        href: adding-external-libraries.md
      - name: "Interactivity utils"
        href: utils-interactivity-selections.md
      - name: "Formatting utils"
        href: utils-formatting.md
      - name: "Formatting model utils"
        href: utils-formatting-model.md
      - name: "On object utils"
        href: utils-on-object.md
      - name: "Data view utils"
        href: utils-dataview.md
      - name: "Chart utils"
        href: utils-chart.md
      - name: "Color utils"
        href: utils-color.md
      - name: "SVG utils"
        href: utils-svg.md
      - name: "Type utils"
        href: utils-type.md
      - name: "Test utils"
        href: utils-test.md
      - name: "Tooltip utils"
        href: utils-tooltip.md
  - name: Resources
    items:
    - name: "Dev Center"
      href: https://powerbi.microsoft.com/developers/
    - name: "Custom Visuals Git Repo"
      href: https://github.com/MicrosoftDocs/powerbi-docs/blob/live/powerbi-docs/developer/visuals/samples.md
    - name: "Creating SSL certificate"
      href: create-ssl-certificate.md



================================================
FILE: powerbi-docs/developer/visuals/total-subtotal-api.md
================================================
---
title: Introduction to the total and subtotal API in Power BI visual
description: Learn how to use the Total and Subtotal API for Power BI visuals to request aggregated subtotal data from the Power BI host.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 11/22/2024
#customer intent: As a Power BI visual developer, I want to learn how to use the Total and Subtotal API to request aggregated subtotal data from the Power BI host.
---

# Request aggregated subtotal data

The *Total and Subtotal API* allows custom visuals with a matrix data-view to request aggregated subtotal data from the Power BI host. The subtotals are calculated for the entire matrix semantic model or specified for individual levels of the matrix data hierarchy. See the [sample report](https://github.com/microsoft/Powerbi-Visuals-SampleMatrix/tree/master/doc) for an example of the Total and Subtotal API in a Power BI visual.

>[!NOTE]
>Requesting subtotal data is supported in version 2.6.0 and later. The `rowSubtotalType` property is available in version 5.1.0 and later. To find out which version you're using, check the `apiVersion` in the *pbiviz.json* file.

Every time a visual refreshes its data, the visual issues a [data fetch request](fetch-more-data.md) to the Power BI backend. These data requests are usually for values of the fields that the user dragged into the field wells of the visual. Sometimes the visual needs other aggregations or subtotals (for example, sum or count) applied to the field wells. The Total and Subtotal API lets you customize the outgoing data query to request more aggregation or subtotal data.

:::image type="content" source="media/total-subtotal-api/subtotal-visual-results.png" alt-text="Screenshot of visual with subtotals row and columns highlighted.":::

## The subtotals API

The API offers the following customization for each data-view type (currently, only matrix data-views).

* `rowSubtotals`: (boolean) Indicates if the subtotal data should be requested for all fields in the rows field well.
* `rowSubtotalsPerLevel`: (boolean) Indicates if the subtotal data can be toggled for individual fields in the row's field well.
* `columnSubtotals`: (boolean) Indicates if the *subtotal* data should be requested for all fields in the columns field well.
* `columnSubtotalsPerLevel`: (boolean) Indicates if the *subtotal* data can be toggled for individual fields in the columns field well.
* `levelSubtotalEnabled`: (boolean) Indicates if the subtotals are requested for the row or column. Unlike all the other properties, this property is applied to individual rows or columns.
* `rowSubtotalsType`: ("Top" or "Bottom") Indicates if the row with the *total* data should be retrieved before (`top`) or after (`bottom`) the rest of the data. If this property is set to `bottom`, the total can only be displayed after all the data is fetched. The default is `bottom`.

Each of these switches is assigned a value based on the related properties in the property pane and the defaults.

## How to use the subtotal API

The visual's *capabilities.json* file has to:

* specify the property that each [switch](#the-subtotals-api) maps to.
* provide the default value to be used if the property is undefined.

The switches use a format like the following example:

```json
    "rowSubtotals": { 
                "propertyIdentifier": { 
                    "objectName": "subTotals", 
                    "propertyName": "rowSubtotals" 
                }, 
                "defaultValue": true 
            },
```

The preceding code indicates that the row subtotals are enabled by the property `rowSubtotals` in the `subTotals` object. The property has a default value of `true`.

The API is automatically enabled for a visual whenever the subtotals structure and all switch mappings are defined in the *capabilities.json* file.

The following code is an example of the complete API configuration in the *capabilities.json* file (copied from the API sample visual):

```json
"subtotals": { 
        "matrix": { 
            "rowSubtotals": { 
                "propertyIdentifier": { 
                    "objectName": "subTotals", 
                    "propertyName": "rowSubtotals" 
                }, 
                "defaultValue": true 
            }, 
            "rowSubtotalsPerLevel": { 
                "propertyIdentifier": { 
                    "objectName": "subTotals", 
                    "propertyName": "perRowLevel" 
                }, 
                "defaultValue": false 
            }, 
            "columnSubtotals": { 
                "propertyIdentifier": { 
                    "objectName": "subTotals", 
                    "propertyName": "columnSubtotals" 
                }, 
                "defaultValue": true 
            }, 
            "columnSubtotalsPerLevel": { 
                "propertyIdentifier": { 
                    "objectName": "subTotals", 
                    "propertyName": "perColumnLevel" 
                }, 
                "defaultValue": false 
            }, 
            "levelSubtotalEnabled": { 
                "propertyIdentifier": { 
                    "objectName": "subTotals", 
                    "propertyName": "levelSubtotalEnabled" 
                }, 
                "defaultValue": true 
            },
            "rowSubtotalsType": {
                "propertyIdentifier": {
                    "objectName": "subtotals",
                    "propertyName": "rowSubtotalsType"
                },
                "defaultValue": "Bottom"
            }
        } 
    }
```

It's important that the `enumerateProperties()` function of the visual aligns with the defaults specified in the *capabilities.json* file. The customization logic operates according to the specified defaults. If the `enumerateProperties()` function and the defaults aren't aligned, the actual subtotal customizations might differ from user expectations.

```typescript
enum RowSubtotalType {
        Top = "Top",
        Bottom = "Bottom",
   }
```

To review the available customizations, expand the **Subtotals** drop-down menu in the **Format** property pane. Modify the subtotals settings and track the changes to the subtotals presentation (named *Totals*) in the Visualizations pane.

:::image type="content" source="../../visuals/media/desktop-matrix-visual/power-bi-subtotal.png" alt-text="Screenshot of the Power BI Visualizations pane, which shows the Column and Row subtotals field wells.":::

## Considerations and limitations

* The `rowSubtotalsType` property is only available for rows. You can't set column subtotals to the beginning of a column.

* The [expand and collapse](./dataview-mappings.md#expand-and-collapse-row-headers) feature overrides `rowSubtotals`. Subtotals display when the rows are expanded, even if `rowSubtotals` is set to *false*.

## Related content

[Add interactivity to visual using Power BI visuals selections](selection-api.md)



================================================
FILE: powerbi-docs/developer/visuals/unit-tests-introduction.md
================================================
---
title: Introduction to unit tests for Power BI visual projects
description: Learn how to write unit tests for Power BI custom visuals by using the Karma JavaScript testing framework.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: tutorial
ms.date: 12/1/2024
#customer intent: As a Power BI visual developer, I want to learn how to write unit tests for my visual so that I can ensure the visual works as expected.
---

# Tutorial: Add unit tests for Power BI visual projects

This article describes the basics of writing unit tests for your Power BI visuals, including how to:

* Set up the Karma JavaScript test runner testing framework, Jasmine.
* Use the powerbi-visuals-utils-testutils package.
* Use mocks and fakes to help simplify unit testing of Power BI visuals.

## Prerequisites

* An installed Power BI visuals project
* A configured Node.js environment

The examples in this article use the [bar chart](create-bar-chart.md) visual for testing.

## Install and configure the Karma JavaScript test runner and Jasmine

Add the required libraries to the *package.json* file in the `devDependencies` section:

```json
"@types/jasmine": "^5.1.5",
"@types/karma": "^6.3.9",
"coverage-istanbul-loader": "^3.0.5",
"jasmine": "^5.5.0",
"karma": "^6.4.4",
"karma-chrome-launcher": "^3.2.0",
"karma-coverage": "^2.2.1",
"karma-coverage-istanbul-reporter": "^3.0.3",
"karma-jasmine": "^5.1.0",
"karma-junit-reporter": "^2.0.1",
"karma-sourcemap-loader": "^0.4.0",
"karma-typescript": "^5.5.4",
"karma-typescript-preprocessor": "^0.4.0",
"karma-webpack": "^5.0.1",
"playwright-chromium": "^1.49.0",
"powerbi-visuals-api": "~5.11.0",
"powerbi-visuals-tools": "^5.6.0",
"powerbi-visuals-utils-testutils": "6.1.1",
"powerbi-visuals-utils-typeutils": "6.0.3",
"style-loader": "^4.0.0",
"ts-loader": "~9.5.1"
```

To learn more about *package.json*, see the description at [npm-package.json](https://docs.npmjs.com/files/package.json).

Save the *package.json* file and run the following command at the location of the *package.json* file:

```cmd
npm install
```

The package manager installs all new packages that are added to *package.json*.

To run unit tests, configure the test runner and the `webpack` config.

The following code is a sample of the *test.webpack.config.js* file:

```typescript
const path = require('path');
const webpack = require("webpack");

module.exports = {
    devtool: 'source-map',
    mode: 'development',
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                use: 'ts-loader',
                exclude: /node_modules/
            },
            {
                test: /\.json$/,
                loader: 'json-loader'
            },
            {
                test: /\.tsx?$/i,
                enforce: 'post',
                include: path.resolve(__dirname, 'src'),
                exclude: /(node_modules|resources\/js\/vendor)/,
                loader: 'coverage-istanbul-loader',
                options: { esModules: true }
            },
            {
                test: /\.less$/,
                use: [
                    {
                        loader: 'style-loader'
                    },
                    {
                        loader: 'css-loader'
                    },
                    {
                        loader: 'less-loader',
                        options: {
                            lessOptions: {
                                paths: [path.resolve(__dirname, 'node_modules')]
                            }
                        }
                    }
                ]
            }
        ]
    },
    externals: {
        "powerbi-visuals-api": '{}'
    },
    resolve: {
        extensions: ['.tsx', '.ts', '.js', '.css']
    },
    output: {
        path: path.resolve(__dirname, ".tmp/test")
    },
    plugins: [
        new webpack.ProvidePlugin({
            'powerbi-visuals-api': null
        })
    ]
};
```

The following code is a sample of the *test.tsconfig.json* file:

```json
{
  "compilerOptions": {
    "allowJs": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es2022",
    "sourceMap": true,
    "outDir": "./.tmp/build/",
    "sourceRoot": "../../src/",
    "moduleResolution": "node",
    "declaration": true,
    "lib": [
      "es2022",
      "dom"
  ]
  },
  "files": [
    "./test/visualTest.ts"
  ],
  "include": [
      "src/*.ts"
  ]
}
```

The following code is a sample of the *karma.conf.ts* file:

```typescript
"use strict";

const webpackConfig = require("./test.webpack.config.js");
const tsconfig = require("./test.tsconfig.json");
const path = require("path");

const testRecursivePath = "test/visualTest.ts";
const srcOriginalRecursivePath = "src/**/*.ts";
const coverageFolder = "coverage";

process.env.CHROME_BIN = require("playwright-chromium").chromium.executablePath();

module.exports = (config) => {
    config.set({
        mode: "development",
        browserNoActivityTimeout: 100000,
        browsers: ["ChromeHeadless"], // or specify Chrome to use the locally installed Chrome browser
        colors: true,
        frameworks: ["jasmine", "webpack"],
        reporters: [
            "progress",
            "junit",
            "coverage",
            "coverage-istanbul"
        ],
        junitReporter: {
            outputDir: path.join(__dirname, coverageFolder),
            outputFile: "TESTS-report.xml",
            useBrowserName: false
        },
        singleRun: true,
        plugins: [
            "karma-coverage",
            "karma-typescript",
            "karma-webpack",
            "karma-jasmine",
            "karma-sourcemap-loader",
            "karma-chrome-launcher",
            "karma-junit-reporter",
            "karma-coverage-istanbul-reporter"
        ],
        files: [
            testRecursivePath,
            {
                pattern: srcOriginalRecursivePath,
                included: false,
                served: true
            },
            {
                pattern: './capabilities.json',
                watched: false,
                served: true,
                included: false
            }
        ],
        preprocessors: {
            [testRecursivePath]: ["webpack"]
        },
        typescriptPreprocessor: {
            options: tsconfig.compilerOptions
        },
        coverageIstanbulReporter: {
            reports: ["html", "lcovonly", "text-summary", "cobertura"],
            dir: path.join(__dirname, coverageFolder),
            'report-config': {
                html: {
                    subdir: 'html-report'
                }
            },
            combineBrowserReports: true,
            fixWebpackSourcePaths: true,
            verbose: false
        },
        coverageReporter: {
            type: "html",
            dir: path.join(__dirname, coverageFolder),
            reporters: [
                // reporters not supporting the `file` property
                { type: 'html', subdir: 'html-report' },
                { type: 'lcov', subdir: 'lcov' },
                // reporters supporting the `file` property, use `subdir` to directly
                // output them in the `dir` directory
                { type: 'cobertura', subdir: '.', file: 'cobertura-coverage.xml' },
                { type: 'lcovonly', subdir: '.', file: 'report-lcovonly.txt' },
                { type: 'text-summary', subdir: '.', file: 'text-summary.txt' },
            ]
        },
        mime: {
            "text/x-typescript": ["ts", "tsx"]
        },
        webpack: webpackConfig,
        webpackMiddleware: {
            stats: "errors-only"
        }
    });
};
```

If necessary, you can modify this configuration.

The code in *karma.conf.js* contains the following variables:

* `testRecursivePath`: Locates the test code.

* `srcOriginalRecursivePath`: Locates the source code of your visual.

* `coverageFolder`: Determines where the coverage report is to be created.

The configuration file includes the following properties:

* `singleRun: true`: Tests are run on a continuous integration (CI) system, or they can be run one time. You can change the setting to `false` for debugging your tests. The Karma framework keeps the browser running so that you can use the console for debugging.

* `files: [...]`: In this array, you can specify the files to load to the browser. The files you load are typically source files, test cases, and libraries (such as Jasmine or test utilities). You can add more files as necessary.

* `preprocessors`: In this section, you configure actions that run before the unit tests run. The actions can precompile TypeScript to JavaScript, prepare source map files, and generate a code coverage report. You can disable `coverage` when you debug your tests. `coverage` generates more code for code coverage testing, which complicates debugging tests.

For descriptions of all Karma configurations, go to the [Karma Configuration File](https://karma-runner.github.io/6.4/config/configuration-file.html) page.

For your convenience, you can add a test command into `scripts` in *package.json*:

```json
{
    "scripts": {
        "pbiviz": "pbiviz",
        "start": "pbiviz start",
        "package": "pbiviz package",
        "pretest": "pbiviz package --resources --no-minify --no-pbiviz",
        "test": "karma start",
        "debug": "karma start --single-run=false --browsers=Chrome"
    }
    ...
}
```

You're now ready to begin writing your unit tests.

## Check the DOM element of the visual

To test the visual, first create an instance of the visual.

### Create a visual instance builder

Add a *visualBuilder.ts* file to the *test* folder by using the following code:

```typescript
import { VisualBuilderBase } from "powerbi-visuals-utils-testutils";

import { BarChart as VisualClass } from "../src/barChart";

import powerbi from "powerbi-visuals-api";
import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;

export class BarChartBuilder extends VisualBuilderBase<VisualClass> {
  constructor(width: number, height: number) {
    super(width, height);
  }

  protected build(options: VisualConstructorOptions) {
    return new VisualClass(options);
  }

  public get mainElement(): SVGElement | null {
    return this.element.querySelector("svg.barChart");
  }
}
```

The `build` method creates an instance of your visual. `mainElement` is a get method, which returns an instance of a root document object model (DOM) element in your visual. The getter is optional, but it makes writing the unit test easier.

You now have a build of an instance of your visual. Let's write the test case. The example test case checks the SVG elements that are created when your visual is displayed.

### Create a TypeScript file to write test cases

Add a *visualTest.ts* file for the test cases by using the following code:

```typescript
import powerbi from "powerbi-visuals-api";

import { BarChartBuilder } from "./visualBuilder";
import { SampleBarChartDataBuilder } from "./visualData";

import DataView = powerbi.DataView;

describe("BarChart", () => {
  let visualBuilder: BarChartBuilder;
  let dataView: DataView;
  let defaultDataViewBuilder: SampleBarChartDataBuilder;

  beforeEach(() => {
    visualBuilder = new BarChartBuilder(500, 500);
    defaultDataViewBuilder = new SampleBarChartDataBuilder();
    dataView = defaultDataViewBuilder.getDataView();
  });

  it("root DOM element is created", () => {
    visualBuilder.updateRenderTimeout(dataView, () => {
       expect(document.body.contains(visualBuilder.mainElement)).toBeTruthy();
    });
  });
});
```

Several Jasmine methods are called:

* [`describe`](https://jasmine.github.io/api/5.5/global.html#describe): Describes a test case. In the context of the Jasmine framework, `describe` often describes a suite or group of specs.

* `beforeEach`: Is called before each call of the `it` method, which is defined in the [`describe`](https://jasmine.github.io/api/5.5/global.html#beforeEach) method.

* [`it`](https://jasmine.github.io/api/5.5/global.html#it): Defines a single spec. The `it` method should contain one or more `expectations`.

* [`expect`](https://jasmine.github.io/api/5.5/global.html#expect): Creates an expectation for a spec. A spec succeeds if all expectations pass without any failures.

* `toBeInDOM`: Is one of the *matchers* methods. For more information about matchers, see [Jasmine Namespace: matchers](https://jasmine.github.io/api/5.5/matchers.html).

For more information about Jasmine, see the [Jasmine framework documentation](https://jasmine.github.io/) page.

### How to add static data for unit tests

Create the *visualData.ts* file in the *test* folder by using the following code:

```typescript
import powerbi from "powerbi-visuals-api";
import DataView = powerbi.DataView;

import { testDataViewBuilder } from "powerbi-visuals-utils-testutils";

import TestDataViewBuilder = testDataViewBuilder.TestDataViewBuilder;

export class SampleBarChartDataBuilder extends TestDataViewBuilder {
  public static CategoryColumn: string = "category";
  public static MeasureColumn: string = "measure";

  public getDataView(columnNames?: string[]): DataView {
    let dataView: any = this.createCategoricalDataViewBuilder(
      [
          ...
      ],
      [
          ...
      ],
      columnNames
    ).build();

    // there's client side computed maxValue
    let maxLocal = 0;
    this.valuesMeasure.forEach((item) => {
      if (item > maxLocal) {
        maxLocal = item;
      }
    });
    (<any>dataView).categorical.values[0].maxLocal = maxLocal;

    return dataView;
  }
}
```

The `SampleBarChartDataBuilder` class extends `TestDataViewBuilder` and implements the abstract method `getDataView`.

When you put data into data-field buckets, Power BI produces a categorical `dataview` object based on your data.

:::image type="content" source="media/unit-tests-introduction/fields-buckets.png" alt-text="Screenshot of Power BI, which shows the data fields buckets are empty.":::

In unit tests, you don't have access to Power BI core functions that you normally use to reproduce the data. But you need to map your static data to the categorical `dataview`. Use the `TestDataViewBuilder` class to map your static data.

For more information about Data View mapping, see [DataViewMappings](dataview-mappings.md).

In the `getDataView` method, you call the `createCategoricalDataViewBuilder` method with your data.

In the `sampleBarChart` visual [capabilities.json](https://github.com/Microsoft/PowerBI-visuals-sampleBarChart/blob/main/capabilities.json#L2) file, we have `dataRoles` and `dataViewMapping` objects:

```json
"dataRoles": [
    {
        "displayName": "Category Data",
        "name": "category",
        "kind": "Grouping"
    },
    {
        "displayName": "Measure Data",
        "name": "measure",
        "kind": "Measure"
    },
    {
      "displayName": "Tooltips",
      "name": "Tooltips",
      "kind": "Measure"
    }
],
"dataViewMappings": [
    {
        "conditions": [
            {
                "category": {
                    "max": 1
                },
                "measure": {
                    "max": 1
                }
            }
        ],
        "categorical": {
            "categories": {
                "for": {
                    "in": "category"
                }
            },
            "values": {
                "select": [
                    {
                        "bind": {
                            "to": "measure"
                        }
                    }
                ]
            }
        }
    }
],
```

To generate the same mapping, you must set the following parameters to the `createCategoricalDataViewBuilder` method:

```typescript
([
    {
        source: {
            displayName: "Category",
            queryName: SampleBarChartDataBuilder.CategoryColumn,
            type: ValueType.fromDescriptor({ text: true }),
            roles: {
                Category: true
            },
        },
        values: this.valuesCategory
    }
],
[
    {
        source: {
            displayName: "Measure",
            isMeasure: true,
            queryName: SampleBarChartDataBuilder.MeasureColumn,
            type: ValueType.fromDescriptor({ numeric: true }),
            roles: {
                Measure: true
            },
        },
        values: this.valuesMeasure
    },
], columnNames)
```

Where `this.valuesCategory` is an array of categories:

```ts
public valuesCategory: string[] = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
```

And `this.valuesMeasure` is an array of measures for each category:

```ts
public valuesMeasure: number[] = [742731.43, 162066.43, 283085.78, 300263.49, 376074.57, 814724.34, 570921.34];
```

The final version of *visualData.ts* contains the following code:

```ts
import powerbi from "powerbi-visuals-api";
import DataView = powerbi.DataView;

import { testDataViewBuilder } from "powerbi-visuals-utils-testutils";
import { valueType } from "powerbi-visuals-utils-typeutils";
import ValueType = valueType.ValueType;

import TestDataViewBuilder = testDataViewBuilder.TestDataViewBuilder;

export class SampleBarChartDataBuilder extends TestDataViewBuilder {
  public static CategoryColumn: string = "category";
  public static MeasureColumn: string = "measure";
  public valuesCategory: string[] = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
  ];
  public valuesMeasure: number[] = [
    742731.43, 162066.43, 283085.78, 300263.49, 376074.57, 814724.34, 570921.34,
  ];

  public getDataView(columnNames?: string[]): DataView {
    let dataView: any = this.createCategoricalDataViewBuilder(
      [
        {
          source: {
            displayName: "Category",
            queryName: SampleBarChartDataBuilder.CategoryColumn,
            type: ValueType.fromDescriptor({ text: true }),
            roles: {
              category: true,
            },
          },
          values: this.valuesCategory,
        },
      ],
      [
        {
          source: {
            displayName: "Measure",
            isMeasure: true,
            queryName: SampleBarChartDataBuilder.MeasureColumn,
            type: ValueType.fromDescriptor({ numeric: true }),
            roles: {
              measure: true,
            },
          },
          values: this.valuesMeasure,
        },
      ],
      columnNames
    ).build();

    // there's client side computed maxValue
    let maxLocal = 0;
    this.valuesMeasure.forEach((item) => {
      if (item > maxLocal) {
        maxLocal = item;
      }
    });
    (<any>dataView).categorical.values[0].maxLocal = maxLocal;

    return dataView;
  }
}
```

The `ValueType` class is defined in the powerbi-visuals-utils-typeutils package.

Now, you can run the unit test.

### Launch unit tests

This test checks that the root SVG element for your visual exists when the visual runs. To run the unit test, enter the following command in the command-line tool:

```cmd
npm run test
```

`karma.js` runs the test case in the Chrome browser.

:::image type="content" source="media/unit-tests-introduction/karmajs-chrome.png" alt-text="Screenshot of the Chrome browser, which shows that karma dot js is running the test case.":::

> [!NOTE]
> You must install Google Chrome locally.

In the command-line window, you get following output:

```cmd
> karma start

Webpack bundling...
assets by status 8.31 KiB [compared for emit]
  assets by path ../build/test/*.ts 1020 bytes
    asset ../build/test/visualData.d.ts 512 bytes [compared for emit]
    asset ../build/test/visualBuilder.d.ts 499 bytes [compared for emit]
    asset ../build/test/visualTest.d.ts 11 bytes [compared for emit]
  assets by path ../build/src/*.ts 6.67 KiB
    asset ../build/src/barChart.d.ts 4.49 KiB [compared for emit]
    asset ../build/src/barChartSettingsModel.d.ts 2.18 KiB [compared for emit]
  asset visualTest.3941401795.js 662 bytes [compared for emit] (name: visualTest.3941401795) 1 related asset
assets by status 2.48 MiB [emitted]
  asset commons.js 2.48 MiB [emitted] (name: commons) (id hint: commons) 1 related asset
  asset runtime.js 6.48 KiB [emitted] (name: runtime) 1 related asset
Entrypoint visualTest.3941401795 2.48 MiB (2.34 MiB) = runtime.js 6.48 KiB commons.js 2.48 MiB visualTest.3941401795.js 662 bytes 3 auxiliary assets        
webpack 5.97.0 compiled successfully in 3847 ms
04 12 2024 11:01:19.255:INFO [karma-server]: Karma v6.4.4 server started at http://localhost:9876/
04 12 2024 11:01:19.257:INFO [launcher]: Launching browsers ChromeHeadless with concurrency unlimited
04 12 2024 11:01:19.277:INFO [launcher]: Starting browser ChromeHeadless
04 12 2024 11:01:20.634:INFO [Chrome Headless 131.0.0.0 (Windows 10)]: Connected on socket QYSj9NyHQ14QjFBoAAAB with id 9616879
Chrome Headless 131.0.0.0 (Windows 10): Executed 1 of 1 SUCCESS (0.016 secs / 0.025 secs)
TOTAL: 1 SUCCESS
TOTAL: 1 SUCCESS

=============================== Coverage summary ===============================
Statements   : 66.07% ( 187/283 )
Branches     : 34.88% ( 45/129 )
Functions    : 52.85% ( 37/70 )
Lines        : 65.83% ( 185/281 )
================================================================================
```

To learn more about current code coverage, open the `coverage/html-report/index.html` file.

:::image type="content" source="media/unit-tests-introduction/code-coverage-src-folder.png" alt-text="Screenshot of the browser window, which shows the code coverage report for the visual dot ts file.":::

In the file scope, you can view the source code. The `coverage` utilities highlight the row in red if certain lines of code don't run during the unit tests.

:::image type="content" source="media/unit-tests-introduction/code-coverage-visual-src.png" alt-text="Screenshot of the visual source code, which shows that the lines of code that didn't run in unit tests are highlighted in red.":::

> [!IMPORTANT]
> Code coverage doesn't mean that you have good functionality coverage of the visual. One simple unit test provides over 96 percent coverage in `src/barChart.ts`.

### Debugging

To debug your tests via browser console, change the `singleRun` value in *karma.conf.ts* to `false`. This setting will keep your browser running when the browser launches after the tests run.

Your visual opens in the Chrome browser.

:::image type="content" source="media/unit-tests-introduction/karmajs-chrome-ut-runned.png" alt-text="Screenshot of the Chrome browser window, which shows the custom Power BI visual.":::

## Related content

When your visual is ready, you can submit it for publication. For more information, see [Publish Power BI visuals to AppSource](office-store.md).



================================================
FILE: powerbi-docs/developer/visuals/utils-chart.md
================================================
---
title: Introduction to use chart utils in Power BI visual
description: Learn about the chart utils interfaces and methods to draw axes, data labels, and legends in Power BI visuals.
author: billmath
ms.author: billmath
manager: kfollis
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 01/11/2024
#customer intent: As a Power BI visual developer, I want to learn how to use the chart utils interfaces and methods to draw axes, data labels, and legends in Power BI visuals.
---

# Chart utils

ChartUtils is a set of interfaces and methods for creating axis, data labels, and legends in Power BI Visuals.

## Installation

To install the package, you should run the following command in the directory with your current visual:

```bash
npm install powerbi-visuals-utils-chartutils --save
```

## Axis Helper

The axis helper (`axis` object in utils) provides functions to simplify manipulations that have an axis.

The module provides the following functions:

### getRecommendedNumberOfTicksForXAxis

This function returns the recommended number of ticks according to the width of chart.

```typescript
function getRecommendedNumberOfTicksForXAxis(availableWidth: number): number;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...
axis.getRecommendedNumberOfTicksForXAxis(1024);

// returns: 8
```

### getRecommendedNumberOfTicksForYAxis

This function returns the recommended number of ticks according to the height of chart.

```typescript
function getRecommendedNumberOfTicksForYAxis(availableWidth: number);
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...
axis.getRecommendedNumberOfTicksForYAxis(100);

// returns: 3
```

### getBestNumberOfTicks

Gets the optimal number of ticks based on minimum value, maximum value, measure metadata, and max tick count.

```typescript
function getBestNumberOfTicks(
  min: number,
  max: number,
  valuesMetadata: DataViewMetadataColumn[],
  maxTickCount: number,
  isDateTime?: boolean
): number;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...
var dataViewMetadataColumnWithIntegersOnly: powerbi.DataViewMetadataColumn[] = [
  {
    displayName: "col1",
    isMeasure: true,
    type: ValueType.fromDescriptor({ integer: true })
  },
  {
    displayName: "col2",
    isMeasure: true,
    type: ValueType.fromDescriptor({ integer: true })
  }
];
var actual = axis.getBestNumberOfTicks(
  0,
  3,
  dataViewMetadataColumnWithIntegersOnly,
  6
);

// returns: 4
```

### getTickLabelMargins

This function returns the margins for tick labels.

```typescript
function getTickLabelMargins(
  viewport: IViewport,
  yMarginLimit: number,
  textWidthMeasurer: ITextAsSVGMeasurer,
  textHeightMeasurer: ITextAsSVGMeasurer,
  axes: CartesianAxisProperties,
  bottomMarginLimit: number,
  properties: TextProperties,
  scrollbarVisible?: boolean,
  showOnRight?: boolean,
  renderXAxis?: boolean,
  renderY1Axis?: boolean,
  renderY2Axis?: boolean
): TickLabelMargins;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

axis.getTickLabelMargins(
  plotArea,
  marginLimits.left,
  TextMeasurementService.measureSvgTextWidth,
  TextMeasurementService.estimateSvgTextHeight,
  axes,
  marginLimits.bottom,
  textProperties,
  /*scrolling*/ false,
  showY1OnRight,
  renderXAxis,
  renderY1Axis,
  renderY2Axis
);

// returns:  xMax, yLeft, yRight, stackHeigh;
```

### isOrdinal

Checks if a string is null, undefined or empty.

```typescript
function isOrdinal(type: ValueTypeDescriptor): boolean;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...
let type = ValueType.fromDescriptor({ misc: { barcode: true } });
axis.isOrdinal(type);

// returns: true
```

### isDateTime

Checks if a value is of the DateTime type.

```typescript
function isDateTime(type: ValueTypeDescriptor): boolean;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

axis.isDateTime(ValueType.fromDescriptor({ dateTime: true }));

// returns: true
```

### getCategoryThickness

Uses the D3 scale to get the actual category thickness.

```typescript
function getCategoryThickness(scale: any): number;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

let range = [0, 100];
let domain = [0, 10];
let scale = d3.scale
  .linear()
  .domain(domain)
  .range(range);
let actualThickness = axis.getCategoryThickness(scale);
```

### invertOrdinalScale

This function inverts the ordinal scale. If x < scale.range()[0], then scale.domain()[0] is returned.
Otherwise, it returns the greatest item in scale.domain() that's <= x.

```typescript
function invertOrdinalScale(scale: d3.scale.Ordinal<any, any>, x: number);
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

let domain: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
  pixelSpan: number = 100,
  ordinalScale: d3.scale.ordinal = axis.createOrdinalScale(
    pixelSpan,
    domain,
    0.4
  );

axis.invertOrdinalScale(ordinalScale, 49);

// returns: 4
```

### findClosestXAxisIndex

This function finds and returns the closest x-axis index.

```typescript
function findClosestXAxisIndex(
  categoryValue: number,
  categoryAxisValues: AxisHelperCategoryDataPoint[]
): number;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

/**
 * Finds the index of the category of the given x coordinate given.
 * pointX is in non-scaled screen-space, and offsetX is in render-space.
 * offsetX does not need any scaling adjustment.
 * @param {number} pointX The mouse coordinate in screen-space, without scaling applied
 * @param {number} offsetX Any left offset in d3.scale render-space
 * @return {number}
 */
private findIndex(pointX: number, offsetX?: number): number {
    // we are using mouse coordinates that do not know about any potential CSS transform scale
    let xScale = this.scaleDetector.getScale().x;
    if (!Double.equalWithPrecision(xScale, 1.0, 0.00001)) {
        pointX = pointX / xScale;
    }
    if (offsetX) {
        pointX += offsetX;
    }

    let index = axis.invertScale(this.xAxisProperties.scale, pointX);
    if (this.data.isScalar) {
        // When we have scalar data the inverted scale produces a category value, so we need to search for the closest index.
        index = axis.findClosestXAxisIndex(index, this.data.categoryData);
    }

    return index;
}
```

### diffScaled

This function computes and returns a diff of values in the scale.

```typescript
function diffScaled(
  scale: d3.scale.Linear<any, any>,
  value1: any,
  value2: any
): number;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

var scale: d3.scale.Linear<number, number>,
    range = [0, 999],
    domain = [0, 1, 2, 3, 4, 5, 6, 7, 8, 999];

scale = d3.scale.linear()
    .range(range)
    .domain(domain);

return axis.diffScaled(scale, 0, 0));

// returns: 0
```

### createDomain

This function creates a domain of values for an axis.

```typescript
function createDomain(
  data: any[],
  axisType: ValueTypeDescriptor,
  isScalar: boolean,
  forcedScalarDomain: any[],
  ensureDomain?: NumberRange
): number[];
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

var cartesianSeries = [
  {
    data: [
      { categoryValue: 7, value: 11, categoryIndex: 0, seriesIndex: 0 },
      {
        categoryValue: 9,
        value: 9,
        categoryIndex: 1,
        seriesIndex: 0
      },
      {
        categoryValue: 15,
        value: 6,
        categoryIndex: 2,
        seriesIndex: 0
      },
      { categoryValue: 22, value: 7, categoryIndex: 3, seriesIndex: 0 }
    ]
  }
];

var domain = axis.createDomain(
  cartesianSeries,
  ValueType.fromDescriptor({ text: true }),
  false,
  []
);

// returns: [0, 1, 2, 3]
```

### getCategoryValueType

This function gets the `ValueType` of a category column. Default is `Text` if the type isn't present.

```typescript
function getCategoryValueType(
  data: any[],
  axisType: ValueTypeDescriptor,
  isScalar: boolean,
  forcedScalarDomain: any[],
  ensureDomain?: NumberRange
): number[];
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

var cartesianSeries = [
  {
    data: [
      { categoryValue: 7, value: 11, categoryIndex: 0, seriesIndex: 0 },
      {
        categoryValue: 9,
        value: 9,
        categoryIndex: 1,
        seriesIndex: 0
      },
      {
        categoryValue: 15,
        value: 6,
        categoryIndex: 2,
        seriesIndex: 0
      },
      { categoryValue: 22, value: 7, categoryIndex: 3, seriesIndex: 0 }
    ]
  }
];

axis.getCategoryValueType(
  cartesianSeries,
  ValueType.fromDescriptor({ text: true }),
  false,
  []
);

// returns: [0, 1, 2, 3]
```

### createAxis

This function creates a D3 axis including scale. Can be vertical or horizontal, and either datetime, numeric, or text.

```typescript
function createAxis(options: CreateAxisOptions): IAxisProperties;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";
// ...

var dataPercent = [0.0, 0.33, 0.49];

var formatStringProp: powerbi.DataViewObjectPropertyIdentifier = {
  objectName: "general",
  propertyName: "formatString"
};
let metaDataColumnPercent: powerbi.DataViewMetadataColumn = {
  displayName: "Column",
  type: ValueType.fromDescriptor({ numeric: true }),
  objects: {
    general: {
      formatString: "0 %"
    }
  }
};

var os = axis.createAxis({
  pixelSpan: 100,
  dataDomain: [dataPercent[0], dataPercent[2]],
  metaDataColumn: metaDataColumnPercent,
  formatString: valueFormatter.getFormatString(
    metaDataColumnPercent,
    formatStringProp
  ),
  outerPadding: 0.5,
  isScalar: true,
  isVertical: true
});
```

### applyCustomizedDomain

This function sets a customized domain, but it doesn't change when nothing is set.

```typescript
function applyCustomizedDomain(customizedDomain: any[], forcedDomain: any[]): any[];
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

let customizedDomain = [undefined, 20],
  existingDomain = [0, 10];

axis.applyCustomizedDomain(customizedDomain, existingDomain);

// returns: {0:0, 1:20}
```

### combineDomain

This function combines the forced domain with the actual domain if one of the values was set.
The forcedDomain is in first priority. Extends the domain if any reference point requires it.

```typescript
function combineDomain(
  forcedDomain: any[],
  domain: any[],
  ensureDomain?: NumberRange
): any[];
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

let forcedYDomain = this.valueAxisProperties
  ? [this.valueAxisProperties["secStart"], this.valueAxisProperties["secEnd"]]
  : null;

let xDomain = [minX, maxX];

axis.combineDomain(forcedYDomain, xDomain, ensureXDomain);
```

### powerOfTen

This function indicates whether the number is power of 10.

```typescript
function powerOfTen(d: any): boolean;
```

Example:

```typescript
import { axis } from "powerbi-visuals-utils-chartutils";
// ...

axis.powerOfTen(10);

// returns: true
```

## DataLabelManager

The `DataLabelManager` helps to create and maintain labels. It arranges label elements using the anchor point or rectangle. Collisions can be automatically detected to reposition or hide elements.

The `DataLabelManager` class provides the following methods:

## hideCollidedLabels

This method arranges the labels position and visibility on the canvas according to label sizes and overlapping.

```typescript
function hideCollidedLabels(
  viewport: IViewport,
  data: any[],
  layout: any,
  addTransform: boolean = false
  hideCollidedLabels?: boolean
): LabelEnabledDataPoint[];
```

Example:

```typescript
let dataLabelManager = new DataLabelManager();
let filteredData = dataLabelManager.hideCollidedLabels(
  this.viewport,
  values,
  labelLayout,
  true,
  true
);
```

## IsValid

This static method checks if the provided rectangle is valid, that is, it has positive width and height.

```typescript
function isValid(rect: IRect): boolean;
```

Example:

```typescript
let rectangle = {
  left: 150,
  top: 130,
  width: 120,
  height: 110
};

DataLabelManager.isValid(rectangle);

// returns: true
```

## DataLabelUtils

The `DataLabelUtils` provides utils to manipulate data labels.

The method provides the following functions, interfaces, and classes:

### getLabelPrecision

This function calculates precision from a provided format.

```typescript
function getLabelPrecision(precision: number, format: string): number;
```

### getLabelFormattedText

This function returns format precision from the provided format.

```typescript
function getLabelFormattedText(options: LabelFormattedTextOptions): string;
```

Example:

```typescript
import { dataLabelUtils } from "powerbi-visuals-utils-chartutils";
// ...

let options: LabelFormattedTextOptions = {
  text: "some text",
  fontFamily: "sans",
  fontSize: "15",
  fontWeight: "normal"
};

dataLabelUtils.getLabelFormattedText(options);
```

### enumerateDataLabels

This function returns VisualObjectInstance for data labels.

```typescript
function enumerateDataLabels(
  options: VisualDataLabelsSettingsOptions
): VisualObjectInstance;
```

### enumerateCategoryLabels

This function adds VisualObjectInstance for Category data labels to an enumeration object.

```typescript
function enumerateCategoryLabels(
  enumeration: VisualObjectInstanceEnumerationObject,
  dataLabelsSettings: VisualDataLabelsSettings,
  withFill: boolean,
  isShowCategory: boolean = false,
  fontSize?: number
): void;
```

### createColumnFormatterCacheManager

This function returns the Cache Manager that provides quick access to formatted labels.

```typescript
function createColumnFormatterCacheManager(): IColumnFormatterCacheManager;
```

Example:

```typescript
import { dataLabelUtils } from "powerbi-visuals-utils-chartutils";
// ...

let value: number = 200000;

labelSettings.displayUnits = 1000000;
labelSettings.precision = 1;

let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();
let formatter = formattersCache.getOrCreate(null, labelSettings);
let formattedValue = formatter.format(value);

// formattedValue == "0.2M"
```

## Legend service

The `Legend` service provides helper interfaces for creating and managing Power BI legends for Power BI visuals.

The module provides the following functions and interfaces:

### createLegend

This helper function simplifies Power BI Custom Visual legend creation.

```typescript
function createLegend(
  legendParentElement: HTMLElement, // top visual element, container in which legend will be created
  isScrollable: boolean = false, // indicates that legend could be scrollable or not
  legendPosition: LegendPosition = LegendPosition.Top // Position of the legend inside of legendParentElement container
): ILegend;
```

Example:

```typescript
public constructor(options: VisualConstructorOptions) {
    this.visualInitOptions = options;
    this.layers = [];

    var element = this.element = options.element;
    var viewport = this.currentViewport = options.viewport;
    var hostServices = options.host;

    //... some other init calls

    this.legend = createLegend(
        element,
        true);
}
```

### ILegend

This Interface implements all methods necessary for legend creation.

```typescript
export interface ILegend {
  getMargins(): IViewport;
  isVisible(): boolean;
  changeOrientation(orientation: LegendPosition): void; // processing legend orientation
  getOrientation(): LegendPosition; // get information about current legend orientation
  drawLegend(data: LegendData, viewport: IViewport); // all legend rendering code is placing here
  /**
   * Reset the legend by clearing it
   */
  reset(): void;
}
```

### drawLegend

This function measures the height of the text with the given SVG text properties.

```typescript
function drawLegend(data: LegendData, viewport: IViewport): void;
```

Example:

```typescript
private renderLegend(): void {
    if (!this.isInteractive) {
        let legendObjectProperties = this.data.legendObjectProperties;
        if (legendObjectProperties) {
            let legendData = this.data.legendData;
            LegendData.update(legendData, legendObjectProperties);
            let position = <string>legendObjectProperties[legendProps.position];
            if (position)
                this.legend.changeOrientation(LegendPosition[position]);

            this.legend.drawLegend(legendData, this.parentViewport);
        } else {
            this.legend.changeOrientation(LegendPosition.Top);
            this.legend.drawLegend({ dataPoints: [] }, this.parentViewport);
        }
    }
}
```

## Related content

- [Add interactivity into visual by Power BI visuals selections](selection-api.md)



================================================
FILE: powerbi-docs/developer/visuals/utils-color.md
================================================
---
title:  Introduction to use color utils in Power BI visual
description: Learn how to install, import, and use color utils to apply themes and palettes on Power BI visual's data points.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 01/13/2024
#customer intent: As a Power BI visual developer, I want to learn how to use color utils to apply themes and palettes on Power BI visual's data points.
---

# Color utils

This article will help you to install, import, and use color utils. Learn how to use color utils to apply themes and palettes on a Power BI visual's data points.

## Prerequisites

To use the package, install:

* [node.js](https://nodejs.org) (we recommend the latest LTS version)
* [npm](https://www.npmjs.com/) (the minimal supported version is 3.0.0)
* The custom visual created by [PowerBI-visuals-tools](https://www.npmjs.com/package/powerbi-visuals-tools)

## Installation

To install the package, you should run the following command in the directory with your current visual:

```bash
npm install powerbi-visuals-utils-colorutils --save
```

This command installs the package and adds a package as a dependency to your `package.json` file.

## Usage

To use interactivity utils, you have to import the required component in the source code of the visual.

```typescript
import { ColorHelper } from "powerbi-visuals-utils-colorutils";
```

Learn how to install and use the colorUtils in your Power BI visuals:

* [Usage Guide]
The Usage Guide describes a public API of the package. It provides a description and examples for each public interface.

This package contains the following classes and modules:

* [ColorHelper](#colorhelper) - helps to generate different colors for your chart values
* [colorUtils](#colorutils) - helps to convert color formats

## ColorHelper

The `ColorHelper` class provides the following functions and methods:

### getColorForSeriesValue

This method gets the color for a specific series value. If no explicit color or default color has been set, then the color is allocated from the color scale for this series.

```typescript
getColorForSeriesValue(objects: IDataViewObjects, value: PrimitiveValue, themeColorName?: ThemeColorName): string;
```

#### getColorForSeriesValue example

```typescript
import powerbi from "powerbi-visuals-api";
import { ColorHelper } from "powerbi-visuals-utils-colorutils";

import DataViewObjects = powerbi.DataViewObjects;

import DataViewValueColumns = powerbi.DataViewValueColumns;
import DataViewValueColumnGroup = powerbi.DataViewValueColumnGroup;
import DataViewObjectPropertyIdentifier = powerbi.DataViewObjectPropertyIdentifier;

import IVisual = powerbi.extensibility.visual.IVisual;
import IColorPalette = powerbi.extensibility.IColorPalette;
import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;

export class YourVisual implements IVisual {
    // Implementation of IVisual

    private colorPalette: IColorPalette;

    constructor(options: VisualConstructorOptions) {
        this.colorPalette = options.host.colorPalette;
    }

    public update(visualUpdateOptions: VisualUpdateOptions): void {
        const valueColumns: DataViewValueColumns = visualUpdateOptions.dataViews[0].categorical.values,
            grouped: DataViewValueColumnGroup[] = valueColumns.grouped(),
            defaultDataPointColor: string = "green",
            fillProp: DataViewObjectPropertyIdentifier = {
                objectName: "objectName",
                propertyName: "propertyName"
            };

        let colorHelper: ColorHelper = new ColorHelper(
            this.colorPalette,
            fillProp,
            defaultDataPointColor);

        for (let i = 0; i < grouped.length; i++) {
            let grouping: DataViewValueColumnGroup = grouped[i];

            let color = colorHelper.getColorForSeriesValue(grouping.objects, grouping.name); // returns a color of the series
        }
    }
}
```

### getColorForMeasure

This method gets the color for a specific measure.

```typescript
 getColorForMeasure(objects: IDataViewObjects, measureKey: any, themeColorName?: ThemeColorName): string;
```

#### Get color for measure example

```typescript
import powerbi from "powerbi-visuals-api";
import { ColorHelper } from "powerbi-visuals-utils-colorutils";

import DataViewObjects = powerbi.DataViewObjects;
import IVisual = powerbi.extensibility.visual.IVisual;
import IColorPalette = powerbi.extensibility.IColorPalette;
import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
import DataViewObjectPropertyIdentifier = powerbi.DataViewObjectPropertyIdentifier;
import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;

export class YourVisual implements IVisual {
    // Implementation of IVisual

    private colorPalette: IColorPalette;

    constructor(options: VisualConstructorOptions) {
        this.colorPalette = options.host.colorPalette;
    }

    public update(visualUpdateOptions: VisualUpdateOptions): void {
        const objects: DataViewObjects = visualUpdateOptions.dataViews[0].categorical.categories[0].objects[0],
            defaultDataPointColor: string = "green",
            fillProp: DataViewObjectPropertyIdentifier = {
                objectName: "objectName",
                propertyName: "propertyName"
            };

        let colorHelper: ColorHelper = new ColorHelper(
            this.colorPalette,
            fillProp,
            defaultDataPointColor);

        let color = colorHelper.getColorForMeasure(objects, ""); // returns a color
    }
}
```

### static `normalizeSelector`

This method returns the normalized selector.

```typescript
static normalizeSelector(selector: Selector, isSingleSeries?: boolean): Selector;
```

#### static normalizeSelector example

```typescript
import ISelectionId = powerbi.visuals.ISelectionId;
import { ColorHelper } from "powerbi-visuals-utils-colorutils";

let selectionId: ISelectionId = ...;
let selector = ColorHelper.normalizeSelector(selectionId.getSelector(), false);
```

Methods `getThemeColor` and `getHighContrastColor` are both related to color theme colors. `ColorHelper` has the `isHighContrast` property.

### `getThemeColor`

This method returns the theme color.
```typescript
 getThemeColor(themeColorName?: ThemeColorName): string;
```

### `getHighContrastColor`

 This method returns the color for high-contrast mode.
```typescript
getHighContrastColor(themeColorName?: ThemeColorName, defaultColor?: string): string;
```

#### High-contrast mode example

```typescript

import { ColorHelper } from "powerbi-visuals-utils-colorutils";

export class MyVisual implements IVisual {
        private colorHelper: ColorHelper;

        private init(options: VisualConstructorOptions): void {
            this.colors = options.host.colorPalette;
            this.colorHelper = new ColorHelper(this.colors);
        } 

            private createViewport(element: HTMLElement): void {
                const fontColor: string = "#131aea";
                const axisBackgroundColor: string = this.colorHelper.getThemeColor();
                
                // some d3 code before
                d3ElementName.attr("fill", colorHelper.getHighContrastColor("foreground", fontColor);
            }
                
            public static parseSettings(dataView: DataView, colorHelper: ColorHelper): VisualSettings {
                // some code that should be applied on formatting settings
                if (colorHelper.isHighContrast) {
                        this.settings.fontColor = colorHelper.getHighContrastColor("foreground", this.settings.fontColor);
                    }
            }
}
```

## `ColorUtils`

 The module provides the following functions:

* [hexToRGBString](#hextorgbstring)
* [rotate](#rotate)
* [parseColorString](#parsecolorstring)
* [calculateHighlightColor](#calculatehighlightcolor)
* [createLinearColorScale](#createlinearcolorscale)
* [shadeColor](#shadecolor)
* [rgbBlend](#rgbblend)
* [channelBlend](#channelblend)
* [hexBlend](#hexblend)

### hexToRGBString

Converts a hex color to an RGB string.

```typescript
function hexToRGBString(hex: string, transparency?: number): string
```

#### hexToRGBString example

```typescript
import  { hexToRGBString } from "powerbi-visuals-utils-colorutils";

hexToRGBString('#112233');

// returns: "rgb(17,34,51)"
```

### rotate

Rotates RGB color.

```typescript
function rotate(rgbString: string, rotateFactor: number): string
```

#### rotate example

```typescript
import { rotate } from "powerbi-visuals-utils-colorutils";

rotate("#CC0000", 0.25); // returns: #66CC00
```

### parseColorString

Parses any color string to RGB format.

```typescript
function parseColorString(color: string): RgbColor
```

#### parseColorString example

```typescript
import { parseColorString } from "powerbi-visuals-utils-colorutils";

parseColorString('#09f');
// returns: {R: 0, G: 153, B: 255 }

parseColorString('rgba(1, 2, 3, 1.0)');
// returns: {R: 1, G: 2, B: 3, A: 1.0 }
```

### calculateHighlightColor

Calculates the highlight color from the rgbColor based on the lumianceThreshold and delta.

```typescript
function calculateHighlightColor(rgbColor: RgbColor, lumianceThreshold: number, delta: number): string
```

#### calculateHighlightColor example

```typescript
import { calculateHighlightColor } from "powerbi-visuals-utils-colorutils";

let yellow = "#FFFF00",
    yellowRGB = parseColorString(yellow);

calculateHighlightColor(yellowRGB, 0.8, 0.2);

// returns: '#CCCC00'
```

### createLinearColorScale

Returns a linear color scale for a specific domain of numbers.

```typescript
function createLinearColorScale(domain: number[], range: string[], clamp: boolean): LinearColorScale
```

#### createLinearColorScale example

```typescript
import { createLinearColorScale } from "powerbi-visuals-utils-colorutils";

let scale = ColorUtility.createLinearColorScale(
    [0, 1, 2, 3, 4],
    ["red", "green", "blue", "black", "yellow"],
    true);

scale(1); // returns: green
scale(10); // returns: yellow
```

### shadeColor

Converts a string hex expression to a number, and calculates the percentage and R, G, B channels.
Applies the percentage for each channel and returns the hex value as a string with a pound sign.

```typescript
function shadeColor(color: string, percent: number): string
```

#### shadeColor example

```typescript
import { shadeColor } from "powerbi-visuals-utils-colorutils";

shadeColor('#000000', 0.1); // returns '#1a1a1a'
shadeColor('#FFFFFF', -0.5); // returns '#808080'
shadeColor('#00B8AA', -0.25); // returns '#008a80'
shadeColor('#00B8AA', 0); // returns '#00b8aa'
```

### rgbBlend

Overlays a color with opacity over a background color. Any alpha-channel is ignored.

```typescript
function rgbBlend(foreColor: RgbColor, opacity: number, backColor: RgbColor): RgbColor
```

#### rgbBlend example

```typescript
import { rgbBlend} from "powerbi-visuals-utils-colorutils";

rgbBlend({R: 100, G: 100, B: 100}, 0.5, {R: 200, G: 200, B: 200});

// returns: {R: 150, G: 150, B: 150}
```

### channelBlend

Blends a single channel for two colors.

```typescript
function channelBlend(foreChannel: number, opacity: number, backChannel: number): number
```

#### channelBlend example

```typescript
import { channelBlend} from "powerbi-visuals-utils-colorutils";

channelBlend(0, 1, 255); // returns: 0
channelBlend(128, 1, 255); // returns: 128
channelBlend(255, 0, 0); // returns: 0
channelBlend(88, 0, 88); // returns: 88
```

### hexBlend

Overlays a color with opacity over a background color.

```typescript
function hexBlend(foreColor: string, opacity: number, backColor: string): string
```

#### hexBlend example

```typescript
import { hexBlend} from "powerbi-visuals-utils-colorutils";

let yellow = "#FFFF00",
    black = "#000000",
    white = "#FFFFFF";

hexBlend(yellow, 0.5, white); // returns: "#FFFF80"
hexBlend(white, 0.5, yellow); // returns: "#FFFF80"

hexBlend(yellow, 0.5, black); // returns: "#808000"
hexBlend(black, 0.5, yellow); // returns: "#808000"
```



================================================
FILE: powerbi-docs/developer/visuals/utils-dataview.md
================================================
---
title: Introduction to use Data view utils in Power BI visual
description: Learn how to install and use SVG utils to simplify parsing of the DataView object for Power BI visuals.
author: billmath
ms.author: billmath
manager:
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 01/13/2024
#customer intent: As a Power BI visual developer, I want to learn how to use DataViewUtils to simplify parsing of the DataView object for Power BI visuals.
---

# DataViewUtils

The `DataViewUtils` is a set of functions and classes to simplify parsing of the DataView object for Power BI visuals.

## Installation

To install the package, run the following command in the directory with your current custom visual:

`npm install powerbi-visuals-utils-dataviewutils --save`

This command installs the package and adds a package as a dependency to your `package.json` file.

## DataViewWildcard

`DataViewWildcard` provides the `createDataViewWildcardSelector` function to support a property's [conditional formatting](conditional-format.md#define-how-conditional-formatting-behaves).

`createDataViewWildcardSelector` returns a selector that's required for defining how the conditional formatting entry in the format pane will be applied, based on `dataviewWildcardMatchingOption (InstancesAndTotals (default), InstancesOnly, TotalsOnly)`.

Example:

```typescript
import { dataViewWildcard } from "powerbi-visuals-utils-dataviewutils";

let selector = dataViewWildcard.createDataViewWildcardSelector(dataViewWildcard.DataViewWildcardMatchingOption.InstancesAndTotals);
// returns {data: [{dataViewWildcard:{matchingOption: 0}}]};

```

## DataRoleHelper

The `DataRoleHelper` provides functions to check roles of the dataView object.

The module provides the following functions:

### getMeasureIndexOfRole

This function finds the measure by the role name and returns its index.

```typescript
function getMeasureIndexOfRole(grouped: DataViewValueColumnGroup[], roleName: string): number;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewValueColumnGroup = powerbi.DataViewValueColumnGroup;
import { dataRoleHelper } from "powerbi-visuals-utils-dataviewutils";
// ...

// This object is actually a part of the dataView object.
let columnGroup: DataViewValueColumnGroup[] = [{
    values: [
        {
            source: {
                displayName: "Microsoft",
                roles: {
                    "company": true
                }
            },
            values: []
        },
        {
            source: {
                displayName: "Power BI",
                roles: {
                    "product": true
                }
            },
            values: []
        }
    ]
}];

dataRoleHelper.getMeasureIndexOfRole(columnGroup, "product");

// returns: 1
```

### getCategoryIndexOfRole

This function finds the category by the role name and returns its index.

```typescript
function getCategoryIndexOfRole(categories: DataViewCategoryColumn[], roleName: string): number;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewCategoryColumn = powerbi.DataViewCategoryColumn;
import { dataRoleHelper } from "powerbi-visuals-utils-dataviewutils";
// ...

// This object is actually a part of the dataView object.
let categoryGroup: DataViewCategoryColumn[] = [
    {
        source: {
            displayName: "Microsoft",
            roles: {
                "company": true
            }
        },
        values: []
    },
    {
        source: {
            displayName: "Power BI",
            roles: {
                "product": true
            }
        },
        values: []
    }
];

dataRoleHelper.getCategoryIndexOfRole(categoryGroup, "product");

// returns: 1
```

### hasRole

This function checks if the provided role is defined in the metadata.

```typescript
function hasRole(column: DataViewMetadataColumn, name: string): boolean;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewMetadataColumn = powerbi.DataViewMetadataColumn;
import { dataRoleHelper } from "powerbi-visuals-utils-dataviewutils";

// This object is actually a part of the dataView object.
let metadata: DataViewMetadataColumn = {
    displayName: "Microsoft",
    roles: {
        "company": true
    }
};

DataRoleHelper.hasRole(metadata, "company");

// returns: true
```

### hasRoleInDataView

This function checks if the provided role is defined in the dataView.

```typescript
function hasRoleInDataView(dataView: DataView, name: string): boolean;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataView = powerbi.DataView;
import { dataRoleHelper } from "powerbi-visuals-utils-dataviewutils";

// This object is actually a part of the dataView object.
let dataView: DataView = {
    metadata: {
        columns: [
            {
                displayName: "Microsoft",
                roles: {
                    "company": true
                }
            },
            {
                displayName: "Power BI",
                roles: {
                    "product": true
                }
            }
        ]
    }
};

DataRoleHelper.hasRoleInDataView(dataView, "product");

// returns: true
```

### hasRoleInValueColumn

This function checks if the provided role is defined in the value column.

```typescript
function hasRoleInValueColumn(valueColumn: DataViewValueColumn, name: string): boolean;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewValueColumn = powerbi.DataViewValueColumn;
import { dataRoleHelper } from "powerbi-visuals-utils-dataviewutils";

// This object is actually a part of the dataView object.
let valueColumn: DataViewValueColumn = {
    source: {
        displayName: "Microsoft",
        roles: {
            "company": true
        }
    },
    values: []
};

dataRoleHelper.hasRoleInValueColumn(valueColumn, "company");

// returns: true
```

## DataViewObjects

The `DataViewObjects` provides functions to extract the values of the objects.

The module provides the following functions:

### getValue

This function returns the value of the specific object.

```typescript
function getValue<T>(objects: DataViewObjects, propertyId: DataViewObjectPropertyIdentifier, defaultValue?: T): T;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewObjectPropertyIdentifier = powerbi.DataViewObjectPropertyIdentifier;
import { dataViewObjects } from "powerbi-visuals-utils-dataviewutils";

let property: DataViewObjectPropertyIdentifier = {
    objectName: "microsoft",
    propertyName: "bi"
};

// This object is actually a part of the dataView object.
let objects: powerbi.DataViewObjects = {
    "microsoft": {
        "windows": 5,
        "bi": "Power"
    }
};

dataViewObjects.getValue(objects, property);

// returns: Power
```

### getObject

This function returns an object from specified objects.

```typescript
function getObject(objects: DataViewObjects, objectName: string, defaultValue?: IDataViewObject): IDataViewObject;
```

Example:

```typescript
import { dataViewObjects } from "powerbi-visuals-utils-dataviewutils";

// This object is actually a part of the dataView object.
let objects: powerbi.DataViewObjects = {
    "microsoft": {
        "windows": 5,
        "bi": "Power"
    }
};

dataViewObjects.getObject(objects, "microsoft");

/* returns: {
    "bi": "Power",
    "windows": 5

}*/
```

### getFillColor

This function returns a solid color of the objects.

```typescript
function getFillColor(objects: DataViewObjects, propertyId: DataViewObjectPropertyIdentifier, defaultColor?: string): string;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewObjectPropertyIdentifier = powerbi.DataViewObjectPropertyIdentifier;
import { dataViewObjects } from "powerbi-visuals-utils-dataviewutils";

let property: DataViewObjectPropertyIdentifier = {
    objectName: "power",
    propertyName: "fillColor"
};

// This object is actually part of the dataView object.
let objects: powerbi.DataViewObjects = {
    "power": {
        "fillColor": {
            "solid": {
                "color": "yellow"
            }
        },
        "bi": "Power"
    }
};

dataViewObjects.getFillColor(objects, property);

// returns: yellow
```

### getCommonValue

This universal function retrieves the color or value of a specific object.

```typescript
function getCommonValue(objects: DataViewObjects, propertyId: DataViewObjectPropertyIdentifier, defaultValue?: any): any;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewObjectPropertyIdentifier = powerbi.DataViewObjectPropertyIdentifier;
import { dataViewObjects } from "powerbi-visuals-utils-dataviewutils";

let colorProperty: DataViewObjectPropertyIdentifier = {
    objectName: "power",
    propertyName: "fillColor"
};

let biProperty: DataViewObjectPropertyIdentifier = {
    objectName: "power",
    propertyName: "bi"
};

// This object is actually part of the dataView object.
let objects: powerbi.DataViewObjects = {
    "power": {
        "fillColor": {
            "solid": {
                "color": "yellow"
            }
        },
        "bi": "Power"
    }
};

dataViewObjects.getCommonValue(objects, colorProperty); // returns: yellow
dataViewObjects.getCommonValue(objects, biProperty); // returns: Power
```

## DataViewObject

The `DataViewObject` provides functions to extract the value of the object.

The module provides the following functions:

### getValue

This function returns a value of the object by the property name.

```typescript
function getValue<T>(object: IDataViewObject, propertyName: string, defaultValue?: T): T;
```

Example:

```typescript
import { dataViewObject } from "powerbi-visuals-utils-dataviewutils";

// This object is actually a part of the dataView object.
let object: powerbi.DataViewObject = {
    "windows": 5,
    "microsoft": "Power BI"
};

dataViewObject.getValue(object, "microsoft");

// returns: Power BI
```

### getFillColorByPropertyName

This function returns a solid color of the object by the property name.

```typescript
function getFillColorByPropertyName(object: IDataViewObject, propertyName: string, defaultColor?: string): string;
```

Example:

```typescript
import { dataViewObject } from "powerbi-visuals-utils-dataviewutils";

// This object is actually a part of the dataView object.
let object: powerbi.DataViewObject = {
    "windows": 5,
    "fillColor": {
        "solid": {
            "color": "green"
        }
    }
};

dataViewObject.getFillColorByPropertyName(object, "fillColor");

// returns: green
```

### converterHelper

The `converterHelper` provides functions to check properties of the dataView.

The module provides the following functions:

### categoryIsAlsoSeriesRole

This function checks if the category is also a series.

```typescript
function categoryIsAlsoSeriesRole(dataView: DataViewCategorical, seriesRoleName: string, categoryRoleName: string): boolean;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewCategorical = powerbi.DataViewCategorical;
import { converterHelper } from "powerbi-visuals-utils-dataviewutils";
// ...


// This object is actually part of the dataView object.
let categorical: DataViewCategorical = {
    categories: [{
        source: {
            displayName: "Microsoft",
            roles: {
                "power": true,
                "bi": true
            }
        },
        values: []
    }]
};

converterHelper.categoryIsAlsoSeriesRole(categorical, "power", "bi");

// returns: true
```

### getSeriesName

This function returns a name of the series.

```typescript
function getSeriesName(source: DataViewMetadataColumn): PrimitiveValue;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewMetadataColumn = powerbi.DataViewMetadataColumn;
import { converterHelper } from "powerbi-visuals-utils-dataviewutils";

// This object is actually a part of the dataView object.
let metadata: DataViewMetadataColumn = {
    displayName: "Microsoft",
    roles: {
        "power": true,
        "bi": true
    },
    groupName: "Power BI"
};

converterHelper.getSeriesName(metadata);

// returns: Power BI
```

### isImageUrlColumn

This function checks if the column contains an image URL.

```typescript
function isImageUrlColumn(column: DataViewMetadataColumn): boolean;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewMetadataColumn = powerbi.DataViewMetadataColumn;
import { converterHelper } from "powerbi-visuals-utils-dataviewutils";

// This object is actually a part of the dataView object.
let metadata: DataViewMetadataColumn = {
    displayName: "Microsoft",
    type: {
        misc: {
            imageUrl: true
        }
    }
};

converterHelper.isImageUrlColumn(metadata);

// returns: true
```

### isWebUrlColumn

This function checks if the column contains a web URL.

```typescript
function isWebUrlColumn(column: DataViewMetadataColumn): boolean;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import DataViewMetadataColumn = powerbi.DataViewMetadataColumn;
import { converterHelper } from "powerbi-visuals-utils-dataviewutils";

// This object is actually a part of the dataView object.
let metadata: DataViewMetadataColumn = {
    displayName: "Microsoft",
    type: {
        misc: {
            webUrl: true
        }
    }
};

converterHelper.isWebUrlColumn(metadata);

// returns: true
```

### hasImageUrlColumn

This function checks if the dataView has a column with an image URL.

```typescript
function hasImageUrlColumn(dataView: DataView): boolean;
```

Example:

```typescript
import DataView = powerbi.DataView;
import converterHelper = powerbi.extensibility.utils.dataview.converterHelper;

// This object is actually part of the dataView object.
let dataView: DataView = {
    metadata: {
        columns: [
            {
                displayName: "Microsoft"
            },
            {
                displayName: "Power BI",
                type: {
                    misc: {
                        imageUrl: true
                    }
                }
            }
        ]
    }
};

converterHelper.hasImageUrlColumn(dataView);

// returns: true
```

## DataViewObjectsParser

The `DataViewObjectsParser` provides the simplest way to parse the properties of the formatting panel.

The class provides the following methods:

### getDefault

This static method returns an instance of DataViewObjectsParser.

```typescript
static getDefault(): DataViewObjectsParser;
```

Example:

```typescript
import { dataViewObjectsParser } from "powerbi-visuals-utils-dataviewutils";
// ...

dataViewObjectsParser.getDefault();

// returns: an instance of the DataViewObjectsParser
```

### parse

This method parses the properties of the formatting panel and returns an instance of `DataViewObjectsParser`.

```typescript
static parse<T extends DataViewObjectsParser>(dataView: DataView): T;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import IVisual = powerbi.extensibility.IVisual;
import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
import { dataViewObjectsParser } from "powerbi-visuals-utils-dataviewutils";

/**
 * This class describes formatting panel properties.
 * Name of the property should match its name described in the capabilities.
 */
class DataPointProperties {
    public fillColor: string = "red"; // This value is a default value of the property.
}

class PropertiesParser extends dataViewObjectsParser.DataViewObjectsParser {
    /**
     * This property describes a group of properties.
     */
    public dataPoint: DataPointProperties = new DataPointProperties();
}

export class YourVisual extends IVisual {
    // implementation of the IVisual.

    private propertiesParser: PropertiesParser;

    public update(options: VisualUpdateOptions): void {
        // Parses properties.
        this.propertiesParser = PropertiesParser.parse<PropertiesParser>(options.dataViews[0]);

        // You can use the properties after parsing
        console.log(this.propertiesParser.dataPoint.fillColor); // returns "red" as default value, it will be updated automatically after any change of the formatting panel.
    }
}
```

## enumerateObjectInstances

> [!IMPORTANT]
> `enumerateObjectInstances` was deprecated in API version 5.1. It was replaced by [getFormattingModel](format-pane-general.md).
> Also, see [FormattingModel utils](./utils-formatting-model.md).

This static method enumerates properties and returns an instance of `VisualObjectInstanceEnumeration`.

Execute it in the `enumerateObjectInstances` method of the visual.

```typescript
static enumerateObjectInstances(dataViewObjectParser: dataViewObjectsParser.DataViewObjectsParser, options: EnumerateVisualObjectInstancesOptions): VisualObjectInstanceEnumeration;
```

Example:

```typescript
import powerbi from "powerbi-visuals-api";
import IVisual = powerbi.extensibility.IVisual;
import EnumerateVisualObjectInstancesOptions = powerbi.EnumerateVisualObjectInstancesOptions;
import VisualObjectInstanceEnumeration = powerbi.VisualObjectInstanceEnumeration;
import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
import { dataViewObjectsParser } from "powerbi-visuals-utils-dataviewutils";

/**
 * This class describes formatting panel properties.
 * Name of the property should match its name described in the capabilities.
 */
class DataPointProperties {
    public fillColor: string = "red";
}

class PropertiesParser extends dataViewObjectsParser.DataViewObjectsParser {
    /**
     * This property describes a group of properties.
     */
    public dataPoint: DataPointProperties = new DataPointProperties();
}

export class YourVisual extends IVisual {
    // implementation of the IVisual.

    private propertiesParser: PropertiesParser;

    public update(options: VisualUpdateOptions): void {
        // Parses properties.
        this.propertiesParser = PropertiesParser.parse<PropertiesParser>(options.dataViews[0]);
    }

    /**
     * This method will be executed only if the formatting panel is open.
     */
    public enumerateObjectInstances(options: EnumerateVisualObjectInstancesOptions): VisualObjectInstanceEnumeration {
        return PropertiesParser.enumerateObjectInstances(this.propertiesParser, options);
    }
}
```



================================================
FILE: powerbi-docs/developer/visuals/utils-formatting-model.md
================================================
---
title: Formatting Models in Power BI Visuals
description: This article describes how to use SVG utils to create formatting models for the format pane of a custom Power BI visual.
author: billmath
ms.author: billmath
manager: 
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 10/23/2024
ms.custom: engagement-fy23
---

# FormattingModel utils

*Formatting model utils* contains the classes, interfaces, and methods needed to build a formatting settings model to populate the property panes (format and analytics panes) of your Power BI custom visual.

## Formatting settings service

The *formatting settings service* receives a formatting settings model, and turns it into a formatting model that populates the formatting pane. The formatting model service also supports string localizations.

Initializing formatting settings service:

```typescript
import { FormattingSettingsService } from "powerbi-visuals-utils-formattingmodel";

export class MyVisual implements IVisual {
    // declaring formatting settings service 
    private formattingSettingsService: FormattingSettingsService;

    constructor(options: VisualConstructorOptions) {
        
        this.formattingSettingsService = new FormattingSettingsService();
        
        // ...
    }
}
```

Formatting settings service interface **IFormattingSettingsService** has two main methods:

```typescript
    /**
     * Build visual formatting settings model from metadata dataView
     * 
     * @param dataViews metadata dataView object
     * @returns visual formatting settings model 
     */
    populateFormattingSettingsModel<T extends Model>(typeClass: new () => T, dataViews: powerbi.DataView[]): T;

    /**
     * Build formatting model by parsing formatting settings model object 
     * 
     * @returns powerbi visual formatting model
     */
    buildFormattingModel(formattingSettingsModel: Model): visuals.FormattingModel;
```

## Formatting settings model

The *settings model* contains and wraps all formatting cards for the formatting pane and analytics pane.

```typescript
export class Model {
    cards: Array<Cards>;
}
```

This example declares a new formatting settings model:

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

import FormattingSettingsCompositeCard = formattingSettings.CompositeCard;
import FormattingSettingsCards = formattingSettings.Cards;
import FormattingSettingsModel = formattingSettings.Model;

export class VisualSettingsModel extends FormattingSettingsModel {
    // Building my visual formatting settings card
    myVisualCard: FormattingSettingsCompositeCard = new myVisualCardSettings();

    // Add formatting settings card to cards list in model
    cards: FormattingSettingsCards[] = [this.myVisualCard];
}
```

## Formatting settings card

A *formatting settings card* specifies a formatting card in the formatting or analytics pane. A formatting settings card can contain multiple formatting slices, containers, groups, and properties.

Adding slices to a formatting settings card puts all of these slices into one formatting card.

Cards, Slices, and Groups can be hidden dynamically by setting the `visible` parameter to *false* (*true* by default).

The card can populate either the formatting pane or analytics pane by setting the `analyticsPane` parameter to *true* or *false*.

Example declaring formatting settings card, including one formatting settings group and slice:

* Card name should match the object name in *capabilities.json*
* Slice name should match the property name in *capabilities.json*

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

import FormattingSettingsCompositeCard = formattingSettings.CompositeCard;
import FormattingSettingsGroup = formattingSettings.Group;
import FormattingSettingsSlice = formattingSettings.Slice;

// Formatting settings group
class myVisualGroupSettings extends FormattingSettingsGroup {
    // Formatting settings slice
    myAnotherNumericSlice = new formattingSettings.NumUpDown({
        name: "myAnotherNumericSlice",
        displayName: "My Formatting Numeric Slice in group",
        value: 15,
        visible: true,
    });

    name: string = "myVisualCard";
    displayName: string = "My Formatting Card";
    analyticsPane: boolean = false;
    visible: boolean = true;
    slices: Array<FormattingSettingsSlice> = [this.myNumericSlice];
}

// Formatting settings card
class myVisualCardSettings extends FormattingSettingsCompositeCard {
    // Formatting settings slice
    myNumericSlice = new formattingSettings.NumUpDown({
        name: "myNumericSlice",
        displayName: "My Formatting Numeric Slice",
        value: 50,
        visible: true,
        options: {
            minValue: {
                type: powerbi.visuals.ValidatorType.Min,
                value: 0,
            },
            maxValue: {
                type: powerbi.visuals.ValidatorType.Max,
                value: 100,
            },
        }
    });

    name: string = "myVisualCard";
    displayName: string = "My Formatting Card";
    analyticsPane: boolean = false;
    visible: boolean = true;

    groupSetting = new myVisualGroupSettings(Object())
    groups: Array<FormattingSettingsGroup> = [this.groupSetting]
    slices: Array<FormattingSettingsSlice> = [this.myNumericSlice];
}
```

The *capabilities.json* property declaration should be:

```json
"objects": {
    "myVisualCard": {
        "properties": {
            "myNumericSlice": {
                "type": {
                    "numeric": true 
                }
            },
            "myAnotherNumericSlice": {
                "type": {
                    "numeric": true 
                }
            },
        }
    }
}
```

## Formatting settings group

Some formatting settings cards can have groups inside. Groups consist of slices and can be expanded/collapsed.

Example declaring formatting settings group with one slice:

```typescript
import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

import FormattingSettingsGroup = formattingSettings.Group;
import FormattingSettingsSlice = formattingSettings.Slice;

class myVisualGroupSettings extends FormattingSettingsGroup {
    myAnotherNumericSlice = new formattingSettings.NumUpDown({
        name: "myAnotherNumericSlice",
        displayName: "My Formatting Numeric Slice in group",
        value: 15,
        visible: true
    });

    name: string = "myVisualCard";
    displayName: string = "My Formatting Card";
    analyticsPane: boolean = false;
    visible: boolean = true;
    slices: Array<FormattingSettingsSlice> = [this.myNumericSlice];
}
```

## Formatting settings slice

The formatting settings slice type consists of two types of slices - [simple and composite](./format-pane-general.md#formatting-model-components).

Each slice contains formatting properties. There's a long list of available [formatting properties types](./format-pane-general.md#visualization-pane-formatting-properties).

Example declaring formatting settings slice of type `NumUpDown` with limitations:

The slice name should match property name from *capabilities.json*.

```typescript
    import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

    myNumericSlice = new formattingSettings.NumUpDown({
        name: "myNumericSlice",
        displayName: "My Formatting Numeric Slice",
        value: 50,
        visible: true,
        options: {
            minValue: {
                type: powerbi.visuals.ValidatorType.Min,
                value: 0,
            },
            maxValue: {
                type: powerbi.visuals.ValidatorType.Max,
                value: 100,
            },
        }
    });
```

## Build formatting pane model using FormattingModel Utils

1. Open your `settings.ts` file.
2. Build your own formatting settings model with all its components (cards, groups, slices, properties ...), and name it `VisualFormattingSettings`.
  Replace your settings code with the following:

 ```typescript
 import { formattingSettings } from "powerbi-visuals-utils-formattingmodel";

 import FormattingSettingsCompositeCard = formattingSettings.CompositeCard;
 import FormattingSettingsSlice = formattingSettings.Slice;
 import FormattingSettingsModel = formattingSettings.Model;

 export class VisualSettingsModel extends FormattingSettingsModel {
     // Building my visual formatting settings card
     myVisualCard: FormattingSettingsCard = new myVisualCardSettings();

     // Add formatting settings card to cards list in model
     cards: Array<FormattingSettingsCompositeCard> = [this.myVisualCard];
 }

 class myVisualCardSettings extends FormattingSettingsCompositeCard {
     myNumericSlice = new formattingSettings.NumUpDown({
         name: "myNumericSlice",
         displayName: "My Formatting Numeric Slice",
         value: 100,
     });

     name: string = "myVisualCard";
     displayName: string = "My Formatting Card";
     analyticsPane: boolean = false;
     slices: Array<FormattingSettingsSlice> = [this.myNumericSlice];
 }
 ```

3. In your capabilities file, add your formatting objects and properties

 ```json
 "objects": {
     "myVisualCard": {
         "properties": {
             "myNumericSlice": {
                 "type": {
                     "numeric": true 
                 }
             }
         }
     }
 }
 ```

4. In your visual class, import the following:

 ```typescript
 import { FormattingSettingsService } from "powerbi-visuals-utils-formattingmodel";
 import { VisualFormattingSettingsModel } from "./settings";
 ```

5. Declare formatting settings and formatting settings service

 ```typescript
    private formattingSettings: VisualFormattingSettingsModel;
    private formattingSettingsService: FormattingSettingsService;
 ```

6. Initialize the formatting settings service in constructor

 ```typescript
 constructor(options: VisualConstructorOptions) {
     this.formattingSettingsService = new FormattingSettingsService();

     // ...
 }
 ```

7. Build formatting settings in update API using formatting settings service `populateFormattingSettingsModel`

 ```typescript
 public update(options: VisualUpdateOptions) {
     this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);
     // ...
 }
 ```

8. Build formatting model and return it in `getFormattingModel` API

 ```typescript
 public getFormattingModel(): powerbi.visuals.FormattingModel {
     return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);
 }
 ```

## Formatting property selector

The optional selector in the formatting properties descriptor determines where each property is bound in the dataView. There are [four distinct options](./objects-properties.md#objects-selectors-types).

You can add selector to formatting property in its descriptor object.
This example is taken from the [SampleBarChart](https://github.com/microsoft/PowerBI-visuals-sampleBarChart) for color custom visual data points using property selectors:

```typescript
new formattingSettings.ColorPicker({
    name: "fill",
    displayName: dataPoint.category,
    value: { value: dataPoint.color },
    selector: dataViewWildcard.createDataViewWildcardSelector(dataViewWildcard.DataViewWildcardMatchingOption.InstancesAndTotals),
    altConstantSelector: dataPoint.selectionId.getSelector(),
    instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule
}
```

## Reset settings to default

Formatting model utils enable you to [reset settings to default](./format-pane-example.md#reset-settings-to-default) by automatically adding all the formatting properties descriptors to the formatting card list of features to revet to default descriptors `revertToDefaultDescriptors`.

You can enable resetting formatting settings from:

* The formatting card *reset to default* button

  :::image type="content" source="./media/utils-formatting-model/formatCard-reset-to-default.png" alt-text="Screenshot of format card reset to default button.":::

* The formatting pane top bar *reset all settings to default* button

  :::image type="content" source="./media/utils-formatting-model/format-pane-reset-all-settings-to-default.png" alt-text="Screenshot of format pane reset all settings to default button.":::

## Localization

For more about the localization feature and to set up localization environment, see [Add the local language to your Power BI visual](localization.md).

Init formatting settings service with localization manager in case localization is required in your custom visual:

```typescript
constructor(options: VisualConstructorOptions) {

    const localizationManager = options.host.createLocalizationManager();
    this.formattingSettingsService = new FormattingSettingsService(localizationManager);
    
    // ...
}
```

Add `displayNameKey` or `descriptionKey`  instead of `displayName` and `description` in the appropriate formatting component whenever you want a string to be localized.
Example for building a formatting slice with localized display name and description

```typescript
 myFormattingSlice = new formattingSettings.NumUpDown({
        name: "myFormattingSlice",
        displayNameKey: "myFormattingSlice_Key",
        descriptionKey: "myFormattingSlice_DescriptionKey",
        value: 100
    });
```

`displayNameKey` and `descriptionKey` values should be added to `resources.json` files.



================================================
FILE: powerbi-docs/developer/visuals/utils-formatting.md
================================================
---
title: Introduction to use formatting utils in Power BI visual
description: Learn how to use formatting utils to format values and apply localization to values in Power BI visuals.
author: billmath
ms.author: billmath
ms.reviewer: 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 10/10/2024
#customer intent: As a developer, I want to learn how to use formatting utils to format values and apply localization to values in Power BI visuals.
---

# Formatting utils

Formatting utils contain classes, interfaces, and methods to format values. It also contains extender methods to process strings and measure text size in an SVG/HTML document.

## Text measurement service

The module provides the following functions and interfaces:

### TextProperties interface

This interface describes common properties of the text.

```typescript
interface TextProperties {
    text?: string;
    fontFamily: string;
    fontSize: string;
    fontWeight?: string;
    fontStyle?: string;
    fontVariant?: string;
    whiteSpace?: string;
}
```

### measureSvgTextWidth

This function measures the width of the text with specific SVG text properties.

```typescript
function measureSvgTextWidth(textProperties: TextProperties, text?: string): number;
```

Example of using `measureSvgTextWidth`:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
import TextProperties = textMeasurementService.TextProperties;
// ...

let textProperties: TextProperties = {
    text: "Microsoft PowerBI",
    fontFamily: "sans-serif",
    fontSize: "24px"
};

textMeasurementService.measureSvgTextWidth(textProperties);

// returns: 194.71875
```

### measureSvgTextRect

This function returns a rect with the given SVG text properties.

```typescript
function measureSvgTextRect(textProperties: TextProperties, text?: string): SVGRect;
```

Example of using `measureSvgTextRect`:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
import TextProperties = textMeasurementService.TextProperties;
// ...

let textProperties: TextProperties = {
    text: "Microsoft PowerBI",
    fontFamily: "sans-serif",
    fontSize: "24px"
};

textMeasurementService.measureSvgTextRect(textProperties);

// returns: { x: 0, y: -22, width: 194.71875, height: 27 }
```

### measureSvgTextHeight

This function measures the height of the text with specific SVG text properties.

```typescript
function measureSvgTextHeight(textProperties: TextProperties, text?: string): number;
```

Example of using `measureSvgTextHeight`:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
import TextProperties = textMeasurementService.TextProperties;
// ...


let textProperties: TextProperties = {
    text: "Microsoft PowerBI",
    fontFamily: "sans-serif",
    fontSize: "24px"
};

textMeasurementService.measureSvgTextHeight(textProperties);

// returns: 27
```

### estimateSvgTextBaselineDelta

This function returns a baseline of specific SVG text properties.

```typescript
function estimateSvgTextBaselineDelta(textProperties: TextProperties): number;
```

Example:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
import TextProperties = textMeasurementService.TextProperties;
// ...

let textProperties: TextProperties = {
    text: "Microsoft PowerBI",
    fontFamily: "sans-serif",
    fontSize: "24px"
};

textMeasurementService.estimateSvgTextBaselineDelta(textProperties);

// returns: 5
```

### estimateSvgTextHeight

This function estimates the height of the text with specific SVG text properties.

```typescript
function estimateSvgTextHeight(textProperties: TextProperties, tightFightForNumeric?: boolean): number;
```

Example of using `estimateSvgTextHeight`:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
import TextProperties = textMeasurementService.TextProperties;
// ...

let textProperties: TextProperties = {
    text: "Microsoft PowerBI",
    fontFamily: "sans-serif",
    fontSize: "24px"
};

textMeasurementService.estimateSvgTextHeight(textProperties);

// returns: 27
```

For an example, see [custom visual code](https://github.com/Microsoft/powerbi-visuals-sankey/blob/4d544ea145b4e15006083a3610dfead3da5f61a4/src/visual.ts#L372).

### measureSvgTextElementWidth

This function measures the width of the svgElement.

```typescript
function measureSvgTextElementWidth(svgElement: SVGTextElement): number;
```

Example of using measureSvgTextElementWidth:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
// ...

let svg: D3.Selection = d3.select("body").append("svg");

svg.append("text")
    .text("Microsoft PowerBI")
    .attr({
        "x": 25,
        "y": 25
    })
    .style({
        "font-family": "sans-serif",
        "font-size": "24px"
    });

let textElement: D3.Selection = svg.select("text");

textMeasurementService.measureSvgTextElementWidth(textElement.node());

// returns: 194.71875
```

### getMeasurementProperties

This function fetches the text measurement properties of the given DOM element.

```typescript
function getMeasurementProperties(element: Element): TextProperties;
```

Example of using `getMeasurementProperties`:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
// ...

let element: JQuery = $(document.createElement("div"));

element.text("Microsoft PowerBI");

element.css({
    "width": 500,
    "height": 500,
    "font-family": "sans-serif",
    "font-size": "32em",
    "font-weight": "bold",
    "font-style": "italic",
    "white-space": "nowrap"
});

textMeasurementService.getMeasurementProperties(element.get(0));

/* returns: {
    fontFamily:"sans-serif",
    fontSize: "32em",
    fontStyle: "italic",
    fontVariant: "",
    fontWeight: "bold",
    text: "Microsoft PowerBI",
    whiteSpace: "nowrap"
}*/
```

### getSvgMeasurementProperties

This function fetches the text measurement properties of the given SVG text element.

```typescript
function getSvgMeasurementProperties(svgElement: SVGTextElement): TextProperties;
```

Example of using `getSvgMeasurementProperties`:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
// ...

let svg: D3.Selection = d3.select("body").append("svg");

let textElement: D3.Selection = svg.append("text")
    .text("Microsoft PowerBI")
    .attr({
        "x": 25,
        "y": 25
    })
    .style({
        "font-family": "sans-serif",
        "font-size": "24px"
    });

textMeasurementService.getSvgMeasurementProperties(textElement.node());

/* returns: {
    "text": "Microsoft PowerBI",
    "fontFamily": "sans-serif",
    "fontSize": "24px",
    "fontWeight": "normal",
    "fontStyle": "normal",
    "fontVariant": "normal",
    "whiteSpace": "nowrap"
}*/
```

## getDivElementWidth

This function returns the width of a div element.

```typescript
function getDivElementWidth(element: JQuery): string;
```

Example of using `getDivElementWidth`:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
// ...

let svg: Element = d3.select("body")
    .append("div")
    .style({
        "width": "150px",
        "height": "150px"
    })
    .node();

textMeasurementService.getDivElementWidth(svg)

// returns: 150px
```

### getTailoredTextOrDefault

Compares a label's text size to the available size, and renders ellipses when the available size is smaller.

```typescript
function getTailoredTextOrDefault(textProperties: TextProperties, maxWidth: number): string;
```

Example of using `getTailoredTextOrDefault`:

```typescript
import { textMeasurementService } from "powerbi-visuals-utils-formattingutils";
import TextProperties = textMeasurementService.TextProperties;
// ...

let textProperties: TextProperties = {
    text: "Microsoft PowerBI!",
    fontFamily: "sans-serif",
    fontSize: "24px"
};

textMeasurementService.getTailoredTextOrDefault(textProperties, 100);

// returns: Micros...
```

## String extensions

The module provides the following functions:

## endsWith

This function checks if a string ends with a substring.

```typescript
function endsWith(str: string, suffix: string): boolean;
```

Example of using `endsWith`:

```typescript
import { stringExtensions } from "powerbi-visuals-utils-formattingutils";
// ...

stringExtensions.endsWith("Power BI", "BI");

// returns: true
```

### equalIgnoreCase

This function compares strings, ignoring case.

```typescript
function equalIgnoreCase(a: string, b: string): boolean;
```

Example of using `equalIgnoreCase`:

```typescript
import { stringExtensions } from "powerbi-visuals-utils-formattingutils";
// ...

stringExtensions.equalIgnoreCase("Power BI", "power bi");

// returns: true
```

### startsWith

This function checks if a string starts with a substring.

```typescript
function startsWith(a: string, b: string): boolean;
```

Example of using `startsWith`:

```typescript
import { stringExtensions } from "powerbi-visuals-utils-formattingutils";
// ...

stringExtensions.startsWith("Power BI", "Power");

// returns: true
```

### contains

This function checks if a string contains a specified substring.

```typescript
function contains(source: string, substring: string): boolean;
```

Example of using `contains` method:

```typescript
import { stringExtensions } from "powerbi-visuals-utils-formattingutils";
// ...

stringExtensions.contains("Microsoft Power BI Visuals", "Power BI");

// returns: true
```

### isNullOrEmpty

Checks if a string is null or undefined or empty.

```typescript
function isNullOrEmpty(value: string): boolean;
```

Example of `isNullOrEmpty` method:

```typescript
import { stringExtensions } from "powerbi-visuals-utils-formattingutils";
// ...

stringExtensions.isNullOrEmpty(null);

// returns: true
```

## Value formatter

The module provides the following functions, interfaces, and classes:

## IValueFormatter

This interface describes public methods and properties of the formatter.

```typescript
interface IValueFormatter {
    format(value: any): string;
    displayUnit?: DisplayUnit;
    options?: ValueFormatterOptions;
}
```

### IValueFormatter.format

This method formats the specified value.

```typescript
function format(value: any, format?: string, allowFormatBeautification?: boolean): string;
```

Examples for `IValueFormatter.format`:

#### The thousand formats

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let iValueFormatter = valueFormatter.create({ value: 1001 });

iValueFormatter.format(5678);

// returns: "5.68K"
```

#### The million formats

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let iValueFormatter = valueFormatter.create({ value: 1e6 });

iValueFormatter.format(1234567890);

// returns: "1234.57M"
```

#### The billion formats

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let iValueFormatter = valueFormatter.create({ value: 1e9 });

iValueFormatter.format(1234567891236);

// returns: 1234.57bn
```

#### The trillion format

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let iValueFormatter = valueFormatter.create({ value: 1e12 });

iValueFormatter.format(1234567891236);

// returns: 1.23T
```

#### The exponent format

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let iValueFormatter = valueFormatter.create({ format: "E" });

iValueFormatter.format(1234567891236);

// returns: 1.234568E+012
```

### The culture selector

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let valueFormatterUK = valueFormatter.create({ cultureSelector: "en-GB" });

valueFormatterUK.format(new Date(2007, 2, 3, 17, 42, 42));

// returns: 02/03/2007 17:42:42

let valueFormatterUSA = valueFormatter.create({ cultureSelector: "en-US" });

valueFormatterUSA.format(new Date(2007, 2, 3, 17, 42, 42));

// returns: 2/3/2007 5:42:42 PM
```

#### The percentage format

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let iValueFormatter = valueFormatter.create({ format: "0.00 %;-0.00 %;0.00 %" });

iValueFormatter.format(0.54);

// returns: 54.00 %
```

#### The dates format

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let date = new Date(2016, 10, 28, 15, 36, 0),
    iValueFormatter = valueFormatter.create({});

iValueFormatter.format(date);

// returns: 10/28/2016 3:36:00 PM
```

#### The boolean format

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let iValueFormatter = valueFormatter.create({});

iValueFormatter.format(true);

// returns: True
```

#### The customized precision

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

let iValueFormatter = valueFormatter.create({ value: 0, precision: 3 });

iValueFormatter.format(3.141592653589793);

// returns: 3.142
```

For an example, see [custom visual code](https://github.com/Microsoft/powerbi-visuals-sankey/blob/4d544ea145b4e15006083a3610dfead3da5f61a4/src/visual.ts#L359).

## ValueFormatterOptions

This interface describes `options` of the IValueFormatter and options of `create` function.

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";
import ValueFormatterOptions = valueFormatter.ValueFormatterOptions;

interface ValueFormatterOptions {
    /** The format string to use. */
    format?: string;
    /** The data value. */
    value?: any;
    /** The data value. */
    value2?: any;
    /** The number of ticks. */
    tickCount?: any;
    /** The display unit system to use */
    displayUnitSystemType?: DisplayUnitSystemType;
    /** True if we are formatting single values in isolation (e.g. card), as opposed to multiple values with a common base (e.g. chart axes) */
    formatSingleValues?: boolean;
    /** True if we want to trim off unnecessary zeroes after the decimal and remove a space before the % symbol */
    allowFormatBeautification?: boolean;
    /** Specifies the maximum number of decimal places to show*/
    precision?: number;
    /** Detect axis precision based on value */
    detectAxisPrecision?: boolean;
    /** Specifies the column type of the data value */
    columnType?: ValueTypeDescriptor;
    /** Specifies the culture */
    cultureSelector?: string;
}
```

## create

This method creates an instance of IValueFormatter.

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";
import create = valueFormatter.create;

function create(options: ValueFormatterOptions): IValueFormatter;
```

### Example of using create

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

valueFormatter.create({});

// returns: an instance of IValueFormatter.
```

## format

Alternative way to format the value without creating `IValueFormatter`. Useful for cases with [dynamic formats string](./dynamic-format.md)

```typescript
import { format } from "powerbi-visuals-utils-formattingutils";
import format = valueFormatter.format;

function format(value: any, format?: string, allowFormatBeautification?: boolean, cultureSelector?: string): string;
```

### Example of using format

```typescript
import { valueFormatter } from "powerbi-visuals-utils-formattingutils";

const value = 12
const format = '¥ #,0'
valueFormatter.format(value, format);

// returns: formatted value as string (¥ 12)
```

## Related content

[Add the local language to your Power BI visual](localization.md)  



================================================
FILE: powerbi-docs/developer/visuals/utils-interactivity-selections.md
================================================
---
title: Power BI visuals interactivity utils
description: Learn how the interactivity utils can help simplify the implementation of cross-selection and cross-filtering in your Power BI visuals.
author: billmath
ms.author: billmath
ms.reviewer: rkarlin
manager: rkarlin
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 01/10/2024
#customer intent: As a Power BI visual developer, I want to learn how to use the interactivity utils to simplify the implementation of cross-selection and cross-filtering in my Power BI visuals.
---

# Power BI visuals interactivity utils

> [!NOTE]
> InteractivityService has been deprecated.

Interactivity utils (`InteractivityUtils`) is a set of functions and classes that can be used to simplify the implementation of cross-selection and cross-filtering.

> [!NOTE]
> The latest updates of interactivity utils support only the latest version of tools (3.x.x and above).

## Installation

1. To install the package, run the following command in the directory with your current Power BI visual project.

    ```bash
    npm install powerbi-visuals-utils-interactivityutils --save
    ```

2. If you're using version 3.0 or later of the tool, install `powerbi-models` to resolve dependencies.

    ```bash
    npm install powerbi-models --save
    ```

3. To use interactivity utils, import the required component in the source code of the Power BI visual.

    ```typescript
    import { interactivitySelectionService } from "powerbi-visuals-utils-interactivityutils";
    ```

### Include CSS files

To use the package with your Power BI visual, import the following CSS file to your `.less` file.

`node_modules/powerbi-visuals-utils-interactivityutils/lib/index.css`

Import the CSS file as a `.less` file because the Power BI visuals tool wraps external CSS rules.

```less
@import (less) "node_modules/powerbi-visuals-utils-interactivityutils/lib/index.css";
```

## SelectableDataPoint properties

Usually, data points contain selections and values. The interface extends the `SelectableDataPoint` interface.

`SelectableDataPoint` already contains properties as follows:

```typescript
  /** Flag for identifying that a data point was selected */
  selected: boolean;

  /** Identity for identifying the selectable data point for selection purposes */
  identity: powerbi.extensibility.ISelectionId;

  /*
   * A specific identity for when data points exist at a finer granularity than
   * selection is performed.  For example, if your data points select based
   * only on series, even if they exist as category/series intersections.
   */

  specificIdentity?: powerbi.extensibility.ISelectionId;
```

## Defining an interface for data points

1. Create an instance of interactivity utils and save the object as a property of the visual.

    ```typescript
    export class Visual implements IVisual {
      // ...
      private interactivity: interactivityBaseService.IInteractivityService<VisualDataPoint>;
      // ...
      constructor(options: VisualConstructorOptions) {
          // ...
          this.interactivity = interactivitySelectionService.createInteractivitySelectionService(this.host);
          // ...
      }
    }
    ```

    ```typescript
    import { interactivitySelectionService } from "powerbi-visuals-utils-interactivityutils";

    export interface VisualDataPoint extends interactivitySelectionService.SelectableDataPoint {
        value: powerbi.PrimitiveValue;
    }
    ```

2. Extend the base behavior class.

    > [!NOTE]
    > `BaseBehavior` was introduced in the [5.6.x version of interactivity utils](https://www.npmjs.com/package/powerbi-visuals-utils-interactivityutils/v/5.6.0). If you use an older version, create a behavior class from the following sample.

3. Define the interface for the behavior class options.

    ```typescript
    import { SelectableDataPoint } from "./interactivitySelectionService";

    import {
        IBehaviorOptions,
        BaseDataPoint
    } from "./interactivityBaseService";

    export interface BaseBehaviorOptions<SelectableDataPointType extends BaseDataPoint> extends IBehaviorOptions<SelectableDataPointType> {

    /** d3 selection object of the main elements on the chart */
    elementsSelection: Selection<any, SelectableDataPoint, any, any>;

    /** d3 selection object of some elements on backgroup, to hadle click of reset selection */
    clearCatcherSelection: d3.Selection<any, any, any, any>;
    }
    ```

4. Define a class for `visual behavior`. Or, extend the `BaseBehavior` class.

    **Define a class for `visual behavior`**

    The class is responsible for `click` and `contextmenu` mouse events.

    When a user clicks data elements, the visual calls the selection handler to select data points. If the user clicks the background element of the visual, it calls the clear selection handler.

    The class has the following correspond methods:
    * `bindClick`
    * `bindClearCatcher`
    * `bindContextMenu`.

    ```typescript
    export class Behavior<SelectableDataPointType extends BaseDataPoint> implements IInteractiveBehavior {

        /** d3 selection object of main elements in the chart */
        protected options: BaseBehaviorOptions<SelectableDataPointType>;
        protected selectionHandler: ISelectionHandler;
    
        protected bindClick() {
          // ...
        }
    
        protected bindClearCatcher() {
          // ...
        }
    
        protected bindContextMenu() {
          // ...
        }
    
        public bindEvents(
            options: BaseBehaviorOptions<SelectableDataPointType>,
            selectionHandler: ISelectionHandler): void {
          // ...
        }
    
        public renderSelection(hasSelection: boolean): void {
          // ...
        }
    }
    ```

    **Extend the `BaseBehavior` class**

    ```typescript
    import powerbi from "powerbi-visuals-api";
    import { interactivitySelectionService, baseBehavior } from "powerbi-visuals-utils-interactivityutils";

    export interface VisualDataPoint extends interactivitySelectionService.SelectableDataPoint {
        value: powerbi.PrimitiveValue;
    }

    export class Behavior extends baseBehavior.BaseBehavior<VisualDataPoint> {
      // ...
    }
    ```

5. To handle a click on elements, call the *d3* selection object `on` method. This also applies for `elementsSelection` and `clearCatcherSelection`.

    ```typescript
    protected bindClick() {
      const {
          elementsSelection
      } = this.options;
    
      elementsSelection.on("click", (datum) => {
          const mouseEvent: MouseEvent = getEvent() as MouseEvent || window.event as MouseEvent;
          mouseEvent && this.selectionHandler.handleSelection(
              datum,
              mouseEvent.ctrlKey);
      });
    }
    ```

6. Add a similar handler for the `contextmenu` event, to call the selection manager's `showContextMenu` method.

    ```typescript
    protected bindContextMenu() {
        const {
            elementsSelection
        } = this.options;
    
        elementsSelection.on("contextmenu", (datum) => {
            const event: MouseEvent = (getEvent() as MouseEvent) || window.event as MouseEvent;
            if (event) {
                this.selectionHandler.handleContextMenu(
                    datum,
                    {
                        x: event.clientX,
                        y: event.clientY
                    });
                event.preventDefault();
            }
        });
    }
    ```

7. To assign functions to handlers, the interactivity utils calls the `bindEvents` method. Add the following calls to the `bindEvents` method:
    * `bindClick`
    * `bindClearCatcher`
    * `bindContextMenu`

    ```typescript
      public bindEvents(
          options: BaseBehaviorOptions<SelectableDataPointType>,
          selectionHandler: ISelectionHandler): void {

          this.options = options;
          this.selectionHandler = selectionHandler;

          this.bindClick();
          this.bindClearCatcher();
          this.bindContextMenu();
      }
    ```

8. The `renderSelection` method is responsible for updating the visual state of elements in the chart. A sample implementation of `renderSelection` follows.

    ```typescript
    public renderSelection(hasSelection: boolean): void {
        this.options.elementsSelection.style("opacity", (category: any) => {
            if (category.selected) {
                return 0.5;
            } else {
                return 1;
            }
        });
    }
    ```

9. The last step is creating an instance of `visual behavior`, and calling the `bind` method of the interactivity utils instance.

    ```typescript
    this.interactivity.bind(<BaseBehaviorOptions<VisualDataPoint>>{
        behavior: this.behavior,
        dataPoints: this.categories,
        clearCatcherSelection: select(this.target),
        elementsSelection: selectionMerge
    });
    ```

    * `selectionMerge` is the *d3* selection object, which represents all the visual's selectable elements.
    * `select(this.target)` is the *d3* selection object, which represents the visual's main DOM elements.
    * `this.categories` are data points with elements, where the interface is `VisualDataPoint` or `categories: VisualDataPoint[];`.
    * `this.behavior` is a new instance of `visual behavior` created in the constructor of the visual, as shown:

      ```typescript
      export class Visual implements IVisual {
        // ...
        constructor(options: VisualConstructorOptions) {
            // ...
            this.behavior = new Behavior();
        }
        // ...
      }
      ```

## Related content

* [Visuals with selection](bookmarks-support.md#visuals-with-selection)

* [Add a context menu to your Power BI visual](context-menu.md)

* [Add interactivity into visual by Power BI visuals selection](selection-api.md)



================================================
FILE: powerbi-docs/developer/visuals/utils-on-object.md
================================================
---
title: On object formatting utils in Power BI visuals
description: This article describes how to use on object utils for on-object formatting in Power BI custom visuals.
author: billmath
ms.author: billmath
ms.reviewer: tebercov , shafeeq
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 02/14/2024
#customer intent: As a Power BI developer, I want to learn how to use on-object formatting utils in Power BI custom visuals, so that I can create custom visuals that support on-object formatting.
---

# On-object utils - subselection helper (preview)

The `HTMLSubSelectionHelper` provides an easy way for your Power BI custom visual to emit subselections to Power BI, get and render outlines.

`HTMLSubSelectionHelper` is a helper class intended to facilitate the creation and subsequent management of subselection outlines. It contains methods for finding subselectable elements.  

The utils exports CSS classes and attributes making it easier for the visual to define and maintain subselections.

> [!NOTE]
> Use version 6.0.1 or higher of the utils.

To define subselectable elements, we also need to add a class to each desired element.

|     CSS Class               |     Purpose                                                                                 |     Required    |
|-----------------------------|---------------------------------------------------------------------------------------------|-----------------|
|     subselectable          |     Provides a selector   for the `HTMLSubSelectionHelper` to find possible subselections    |     yes         |
  
To define subselections for the visual, there are a few attributes that need to be added to the desired elements.

|     Attribute Name                              |     Attribute                                 |     Purpose                                                                                                            |     Required                                                 |     Type                                                        |     Example                                                                                                                                     |
|-------------------------------------------------|-----------------------------------------------|------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------|-----------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------|
|     SubSelectableDisplayNameAttribute           |     data-sub-selection-display-name           |     Provide a localized   string for display name of the subselected element                                          |     yes                                                      |     string                                                      |     data-sub-selection-display-name="Visual   Title"                                                                                            |
|     SubSelectableObjectNameAttribute            |     data-sub-selection-object-name            |     Provide an object   name to associate with subselection shortcuts and style                                       |     yes                                                      |     string                                                      |     data-sub-selection-object-name="title"                                                                                                      |
|     SubSelectableTypeAttribute                  |     data-sub-selection-type                   |     Provide the type of   the subselected style                                                                       |     yes                                                      |     SubSelectionStylesType                                      |     data-sub-selection-type="1"                                                                                                                 |
|     SubSelectableDirectEdit                     |     data-sub-selection-direct-edit            |     Provide direct text   edit references, including the CardUID, GroupUID, and the orientation of the   text box      |     no                                                       |     SubSelectableDirectEdit   should be provided as a string    |     data-sub-selection-direct-edit="{"reference":{"cardUid":"Visual-title","groupUid":"title-text","sliceUid":"title-text-text"},"style":0}"    |
|     SubSelectableHideOutlineAttribute           |     data-sub-selection-hide-outline           |     Provide a boolean   value for subselectable elements that shouldn't have an outline shown                       |     no                                                       |     boolean                                                     |     data-sub-selection-hide-outline="true"                                                                                                      |
|     SubSelectableRestrictingElementAttribute    |     data-sub-selection-restricting-element    |     Used to indicate the element that will be restricted, the outlines, and the type of restriction (clamp or clip)    |     no                                                       |     SubSelectionOutlineRestrictionType                          |     data-sub-selection-restricting-element="1"                                                                                                  |
|     SubSelectableSubSelectedAttribute           |     data-sub-selection-sub-selected           |     Indicate whether the   subselectable is selected or not                                                           |     No, the helper assigns it to the elements when needed    |     Boolean                                                     |     data-subselection-sub-selected="true"                                                                                                       |

## Format mode

When the visual enters format mode, You need to disable interactivity for the visual, as we expect the user to select the visual and visual element to initiate formatting.

### HTMLSubSelectionHelper public methods

The `HTMLSubSelectionHelper` has some public methods that you can use, but there are two main methods and the helper does the rest.

The two methods are `setFormatMode` and `updateOutlinesFromSubSelections`.

The public methods of the helper include:

* createHtmlSubselectionHelper(args: HtmlSubselectionHelperArgs): HtmlSubSelectionHelper - This is a static method that takes args of type `HtmlSubselectionHelperArgs` and returns an instance of `HTMLSubSelectionHelper`.

* setFormatMode(isFormatMode: boolean): void - This method sets the format mode for the HTMLSubSelectionHelper, If isFormatMode is true, the helper attaches relevant event listeners to the host element to enable format mode functionality (subselecting, rendering outlines).

* getSubSelectionSourceFromEvent(event: PointerEvent): *HtmlSubSelectionSource* or *undefined* - returns an `HtmlSubSelectionSource` object that is built according to the event parameter.

* onVisualScroll(): void - Indicates to the HTMLSubSelectionHelper that scrolling is currently occurring. Scrolling should remove outlines until scrolling is finished.

* updateElementOutlines(elements: HTMLElement[], visibility: SubSelectionOutlineVisibility, suppressRender: boolean = false): SubSelectionRegionOutlineId[] - update the outlines (and emits them to Power BI to be rendered) of the elements.

* clearHoveredOutline(): void - This method clears hovered outlines if they exist.

* updateRegionOutlines(regionOutlines: HelperSubSelectionRegionOutline[], suppressRender: boolean = false): void - update and emits the given outlines to get rendered.

* getElementsFromSubSelections(subSelections: CustomVisualSubSelection[]): HTMLElement[] - given subSelections, this method returns the relevant HTMLElements.

* updateOutlinesFromSubSelections(subSelections: CustomVisualSubSelection[], clearExistingOutlines?: boolean, suppressRender?: boolean): void - updates and renders the outlines for the given subSelection with respect to suppressRender and clearExistingOutlines.

* hideAllOutlines(suppressRender: boolean = false): void - hide all the outlines with respect to suppressRender.

* getAllSubSelectables(filterType?: SubSelectionStylesType): CustomVisualSubSelection[] -  returns all the subSelectables according to the filterType.

* createVisualSubSelectionForSingleObject(createVisualSubSelectionArgs: CreateVisualSubSelectionFromObjectArgs): CustomVisualSubSelection - create CustomVisualSubSelection object from the createVisualSubSelectionArgs.

* setDataForElement(el: HTMLElement | SVGElement, data: SubSelectionElementData): void - a static method that sets data for the elements.

* getDataForElement(el: HTMLElement | SVGElement): SubSelectionElementData - a static method that gets the associated previously assigned using setDataForElement.

### HtmlSubselectionHelperArgs

```typescript
interface HtmlSubselectionHelperArgs {
    /** Element which contains the items that can be sub-selected */
    hostElement: HTMLElement; // The host element, the helper will attach the listeners to this element
    subSelectionService: powerbi.extensibility.IVisualSubSelectionService;// subSelectionService which is provided in powerbi-visuals-api
    selectionIdCallback?: ((e: HTMLElement) => ISelectionId);// a callback that gets the selectionId for the specific element
    customOutlineCallback?: ((subSelection: CustomVisualSubSelection) => SubSelectionRegionOutlineFragment[]);// a callback to get custom outline for the specific subSelection
    customElementCallback?: ((subSelection: CustomVisualSubSelection) => HTMLElement[]);
    subSelectionMetadataCallback?: ((subSelectionElement: HTMLElement) => unknown);// a callback to attatch any meta data to the subSelection.
}
```

### SubSelectionStylesType

```typescript
const enum SubSelectionStylesType {
            None = 0,
            Text = 1,
            NumericText = 2,
            Shape = 3,
}
```

### SubSelectableDirectEdit

```typescript
interface SubSelectableDirectEdit {
            reference: SliceFormattingModelReference;
            style: SubSelectableDirectEditStyle;
            displayValue?: string;
}
```

### SubSelectionOutlineRestrictionType

```typescript
const enum SubSelectionOutlineRestrictionType {
            /**
             * A clamping element will adjust the outline to prevent it from extending beyond
             * the restricting element.
             */
            Clamp,
            /**
             * A clipping element will make parts of the outline not visible if the outline extends beyond the
             * restricting element's bounds. 
             */
            Clip
        }
```

To add restriction options to a specific element use the `HTMLSubSelectionHelper` `setDataForElement` with this data type, the helper uses the data to update the outlines:

```typescript
interface SubSelectionElementData {
    outlineRestrictionOptions?: SubSelectionOutlineRestrictionOptions;
}

/** Options used to indicate if a restricting element should allow outlines more space to
  * generate by adding padding or if the restricting element should constrict the outline more
  * by adding a margin.
  */
export interface SubSelectionOutlineRestrictionOptions {
        padding?: IOffset;
        margin?: IOffset;
  }
```

## Example

In this example, we implement `customOutlineCallback` and `selectionIdCallback`:
The following code is in Visual Code.
We have an object in the visual called `arcElement`. We want to render the outline when the element is hovered or subselected.

```typescript
import ISelectionId = powerbi.visuals.ISelectionId;

const enum BarChartObjectNames {
    ArcElement = 'arcElement',
    ColorSelector = 'colorSelector',
    …..
}

private ArcOutlines(subSelection: CustomVisualSubSelection): powerbi.visuals.SubSelectionRegionOutlineFragment[] {
        const outlines: powerbi.visuals.SubSelectionRegionOutlineFragment[] = []
        if (subSelection?.customVisualObjects[0].objectName === BarChartObjectNames.ArcElement) {
            const outline: powerbi.visuals.ArcSubSelectionOutline = {
                type: powerbi.visuals.SubSelectionOutlineType.Arc,
                center: { x: this.arcCenterX, y: this.arcCenterY },
                startAngle: this.arcStartAngle,
                endAngle: this.arcEndAngle,
                innerRadius: this.arcInnerRadius,
                outerRadius: this.arcOuterRadius
            };
            outlines.push({
                id: BarChartObjectNames.ArcElement,
                outline
            });
            return outlines;
        }
    }

public selectionIdCallback(e: Element): ISelectionId {
        const elementType: string = d3.select(e).attr(SubSelectableObjectNameAttribute);
        switch (elementType) {
            case BarChartObjectNames.ColorSelector:
                const datum = d3.select<Element, BarChartDataPoint>(e).datum();
                return datum.selectionId;
            default:
                return undefined;
        }
    }
```

Import the HtmlSubSelectionHelper:

`import {  HtmlSubSelectionHelper } from 'powerbi-visuals-utils-onobjectutils';`

In the constructor code, create the HTMLSubSelectionHelper:

```typescript
constructor(options: VisualConstructorOptions) {
    …….
    this.subSelectionHelper = HtmlSubSelectionHelper.createHtmlSubselectionHelper({
                hostElement: options.element,
                subSelectionService: options.host.subSelectionService,
                selectionIdCallback: (e) => this.selectionIdCallback(e),
                customOutlineCallback: (e) => this.ArcOutlines(e),
            });
    ….
}
```

In update method of the visual add the following code to update the outlines of the subSeselection, update the state of the format mode for the `HTMLSubSelectionHelper` and disable interactions that aren't for format mode if format mode is on:

```typescript
public update(options: VisualUpdateOptions) {
 …
 
 if (this.formatMode) {// disabling interaction with the visual data in format mode
             barSelectionMerged.on('click', null);
             this.svg.on('click', null);
             this.svg.on('contextmenu', null);
         } else {
             this.handleBarClick(barSelectionMerged);
             this.handleClick(barSelectionMerged);
             this.handleContextMenu();
         }
         this.subSelectionHelper.setFormatMode(options.formatMode);
         const shouldUpdateSubSelection = options.type & powerbi.VisualUpdateType.Data
             || options.type & powerbi.VisualUpdateType.Resize
             || options.type & powerbi.VisualUpdateType.FormattingSubSelectionChange;
         if (this.formatMode && shouldUpdateSubSelection) {
             this.subSelectionHelper.updateOutlinesFromSubSelections(options.subSelections, true);
         }
 …
}
```

## Related content

* [Subselection API](./subselection-api.md)
* [On-object formatting API](./on-object-formatting-api.md)



================================================
FILE: powerbi-docs/developer/visuals/utils-svg.md
================================================
---
title: Introduction to SVG utils in Power BI visuals
description: Learn about the SVG utils package and see examples of how you can use them to simplify SVG manipulations for Power BI visuals.
author: billmath
ms.author: billmath
manager: rkarlin
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 01/10/2024
#customer intent: As a developer, I want to learn about the SVG utils package and see examples of how I can use them to simplify SVG manipulations for Power BI visuals.
---

# SVG utils

SVGUtils is a set of functions and classes to simplify SVG manipulations for Power BI visuals.

## Installation

To install the package, you should run the following command in the directory with your current visual:

```bash
npm install powerbi-visuals-utils-svgutils --save
```

## CssConstants

The `CssConstants` module provides the special function and interface to work with class selectors.

The `powerbi.extensibility.utils.svg.CssConstants` module provides the following function and interface:

## ClassAndSelector

This interface describes common properties of the class selector.

```typescript
interface ClassAndSelector {
  class: string;
  selector: string;
}
```

### createClassAndSelector

This function creates an instance of ClassAndSelector with the name of the class.

```typescript
function createClassAndSelector(className: string): ClassAndSelector;
```

Example:

```typescript
import { CssConstants } from "powerbi-visuals-utils-svgutils";
import createClassAndSelector = CssConstants.createClassAndSelector;
import ClassAndSelector = CssConstants.ClassAndSelector;

let divSelector: ClassAndSelector = createClassAndSelector("sample-block");

divSelector.selector === ".sample-block"; // returns: true
divSelector.class === "sample-block"; // returns: true
```

## manipulation

The `manipulation` method provides some special functions to generate strings that you can use with the SVG transform property.

The module provides the following functions:

### translate

This function creates a translate string for use with the SVG transform property.

```typescript
function translate(x: number, y: number): string;
```

Example:

```typescript
import { manipulation } from "powerbi-visuals-utils-svgutils";
// ...

manipulation.translate(100, 100);

// returns: translate(100,100)
```

### translateXWithPixels

This function creates a translateX string for use with the SVG transform property.

```typescript
function translateXWithPixels(x: number): string;
```

Example:

```typescript
import { manipulation } from "powerbi-visuals-utils-svgutils";
// ...

manipulation.translateXWithPixels(100);

// returns: translateX(100px)
```

### translateWithPixels

This function creates a translate string for use with the SVG transform property.

```typescript
function translateWithPixels(x: number, y: number): string;
```

Example:

```typescript
import { manipulation } from "powerbi-visuals-utils-svgutils";
// ...

manipulation.translateWithPixels(100, 100);

// returns: translate(100px,100px)
```

### translateAndRotate

This function creates a translate-rotate string for use with the SVG transform property.

```typescript
function translateAndRotate(
  x: number,
  y: number,
  px: number,
  py: number,
  angle: number
): string;
```

Example:

```typescript
import { manipulation } from "powerbi-visuals-utils-svgutils";
// ...

manipulation.translateAndRotate(100, 100, 50, 50, 35);

// returns: translate(100,100) rotate(35,50,50)
```

### scale

This function creates a scale string for use in a CSS transform property.

```typescript
function scale(scale: number): string;
```

Example:

```typescript
import { manipulation } from "powerbi-visuals-utils-svgutils";
// ...

manipulation.scale(50);

// returns: scale(50)
```

### transformOrigin

This function creates a transform-origin string for use in a CSS transform-origin property.

```typescript
function transformOrigin(xOffset: string, yOffset: string): string;
```

Example:

```typescript
import { manipulation } from "powerbi-visuals-utils-svgutils";
// ...

manipulation.transformOrigin(5, 5);

// returns: 5 5
```

### flushAllD3Transitions

This function forces every transition of D3 to complete.

```typescript
function flushAllD3Transitions(): void;
```

Example:

```typescript
import { manipulation } from "powerbi-visuals-utils-svgutils";
// ...

manipulation.flushAllD3Transitions();

// forces every transition of D3 to complete
```

### parseTranslateTransform

This function parses the transform string with value "translate(x,y)".

```typescript
function parseTranslateTransform(input: string): { x: string; y: string };
```

Example:

```typescript
import { manipulation } from "powerbi-visuals-utils-svgutils";
// ...

manipulation.parseTranslateTransform("translate(100px,100px)");

// returns: { "x":"100px", "y":"100px" }
```

### createArrow

This function creates an arrow.

```typescript
function createArrow(
  width: number,
  height: number,
  rotate: number
): { path: string; transform: string };
```

Example:

```typescript
import { manipulation } from "powerbi-visuals-utils-svgutils";
// ...

manipulation.createArrow(10, 20, 5);

/* returns: {
    "path": "M0 0L0 20L10 10 Z",
    "transform": "rotate(5 5 10)"
}*/
```

## Rect

The `Rect` module provides some special functions to manipulate rectangles.

The module provides the following functions:

### getOffset

This function returns an offset of the rectangle.

```typescript
function getOffset(rect: IRect): IPoint;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.getOffset({ left: 25, top: 25, width: 100, height: 100 });

/* returns: {
    x: 25,
    y: 25
}*/
```

### getSize

This function returns the size of the rectangle.

```typescript
function getSize(rect: IRect): ISize;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.getSize({ left: 25, top: 25, width: 100, height: 100 });

/* returns: {
    width: 100,
    height: 100
}*/
```

### setSize

This function modifies the size of the rectangle.

```typescript
function setSize(rect: IRect, value: ISize): void;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

let rectangle = { left: 25, top: 25, width: 100, height: 100 };

Rect.setSize(rectangle, { width: 250, height: 250 });

// rectangle === { left: 25, top: 25, width: 250, height: 250 }
```

### right

This function returns a right position of the rectangle.

```typescript
function right(rect: IRect): number;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.right({ left: 25, top: 25, width: 100, height: 100 });

// returns: 125
```

### bottom

This function returns a bottom position of the rectangle.

```typescript
function bottom(rect: IRect): number;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.bottom({ left: 25, top: 25, width: 100, height: 100 });

// returns: 125
```

### topLeft

This function returns a top-left position of the rectangle.

```typescript
function topLeft(rect: IRect): IPoint;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.topLeft({ left: 25, top: 25, width: 100, height: 100 });

// returns: { x: 25, y: 25 }
```

### topRight

This function returns a top-right position of the rectangle.

```typescript
function topRight(rect: IRect): IPoint;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.topRight({ left: 25, top: 25, width: 100, height: 100 });

// returns: { x: 125, y: 25 }
```

### bottomLeft

This function returns a bottom-left position of the rectangle.

```typescript
function bottomLeft(rect: IRect): IPoint;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.bottomLeft({ left: 25, top: 25, width: 100, height: 100 });

// returns: { x: 25, y: 125 }
```

### bottomRight

This function returns a bottom-right position of the rectangle.

```typescript
function bottomRight(rect: IRect): IPoint;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.bottomRight({ left: 25, top: 25, width: 100, height: 100 });

// returns: { x: 125, y: 125 }
```

### clone

This function creates a copy of the rectangle.

```typescript
function clone(rect: IRect): IRect;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.clone({ left: 25, top: 25, width: 100, height: 100 });

/* returns: {
    left: 25, top: 25, width: 100, height: 100}
*/
```

### toString

This function converts the rectangle to a string.

```typescript
function toString(rect: IRect): string;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.toString({ left: 25, top: 25, width: 100, height: 100 });

// returns: {left:25, top:25, width:100, height:100}
```

### offset

This function applies an offset to the rectangle.

```typescript
function offset(rect: IRect, offsetX: number, offsetY: number): IRect;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.offset({ left: 25, top: 25, width: 100, height: 100 }, 50, 50);

/* returns: {
    left: 75,
    top: 75,
    width: 100,
    height: 100
}*/
```

### add

This function adds the first rectangle to the second rectangle.

```typescript
function add(rect: IRect, rect2: IRect): IRect;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.add(
  { left: 25, top: 25, width: 100, height: 100 },
  { left: 50, top: 50, width: 75, height: 75 }
);

/* returns: {
    left: 75,
    top: 75,
    height: 175,
    width: 175
}*/
```

### getClosestPoint

This function returns the closest point on the rectangle to a specific point.

```typescript
function getClosestPoint(rect: IRect, x: number, y: number): IPoint;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.getClosestPoint({ left: 0, top: 0, width: 100, height: 100 }, 50, 50);

/* returns: {
    x: 50,
    y: 50
}*/
```

### equal

This function compares rectangles and returns true if they're the same.

```typescript
function equal(rect1: IRect, rect2: IRect): boolean;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.equal(
  { left: 0, top: 0, width: 100, height: 100 },
  { left: 50, top: 50, width: 100, height: 100 }
);

// returns: false
```

### equalWithPrecision

This function compares rectangles by considering precision of the values.

```typescript
function equalWithPrecision(rect1: IRect, rect2: IRect): boolean;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.equalWithPrecision(
  { left: 0, top: 0, width: 100, height: 100 },
  { left: 50, top: 50, width: 100, height: 100 }
);

// returns: false
```

### isEmpty

This function checks if a rectangle is empty.

```typescript
function isEmpty(rect: IRect): boolean;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.isEmpty({ left: 0, top: 0, width: 0, height: 0 });

// returns: true
```

### containsPoint

This function checks if a rectangle contains a specific point.

```typescript
function containsPoint(rect: IRect, point: IPoint): boolean;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.containsPoint(
  { left: 0, top: 0, width: 100, height: 100 },
  { x: 50, y: 50 }
);

// returns: true
```

### isIntersecting

This function checks if rectangles are intersecting.

```typescript
function isIntersecting(rect1: IRect, rect2: IRect): boolean;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.isIntersecting(
  { left: 0, top: 0, width: 100, height: 100 },
  { left: 0, top: 0, width: 50, height: 50 }
);

// returns: true
```

### intersect

This function returns an intersection of rectangles.

```typescript
function intersect(rect1: IRect, rect2: IRect): IRect;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.intersect(
  { left: 0, top: 0, width: 100, height: 100 },
  { left: 0, top: 0, width: 50, height: 50 }
);

/* returns: {
    left: 0,
    top: 0,
    width: 50,
    height: 50
}*/
```

### combine

This function combines rectangles.

```typescript
function combine(rect1: IRect, rect2: IRect): IRect;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.combine(
  { left: 0, top: 0, width: 100, height: 100 },
  { left: 0, top: 0, width: 50, height: 120 }
);

/* returns: {
    left: 0,
    top: 0,
    width: 100,
    height: 120
}*/
```

### getCentroid

This function returns a center point of the rectangle.

```typescript
function getCentroid(rect: IRect): IPoint;
```

Example:

```typescript
import { shapes } from "powerbi-visuals-utils-svgutils";
import Rect = shapes.Rect;
// ...

Rect.getCentroid({ left: 0, top: 0, width: 100, height: 100 });

/* returns: {
    x: 50,
    y: 50
}*/
```



================================================
FILE: powerbi-docs/developer/visuals/utils-test.md
================================================
---
title:  Introduction to usage of test utils in Power BI visual
description: Learn how to install, import, and use the Power BI visuals test utils for unit testing, including mocks and methods for elements.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 01/12/2024
#customer intent: As a Power BI visual developer, I want to learn how to use the Power BI visuals test utils so I can create more efficient visuals.
---

# Power BI visuals test utils

This article helps you install, import, and use the Power BI visuals test utils. These test utilities can be used for unit testing and include mocks and methods for elements, such as data views, selections, and color schemas.

## Prerequisites

To use this package, install:

* [node.js](https://nodejs.org), it's recommended to use the LTS version
* [npm](https://www.npmjs.com/), version 3.0.0 or higher
* The [`PowerBI-visuals-tools`](https://github.com/Microsoft/PowerBI-visuals-tools) package

## Installation

To install test utils and add its dependency to your *package.json*, run the following command from your Power BI visuals directory:

```bash
npm install powerbi-visuals-utils-testutils --save
```

The following provide descriptions and examples on the test utils public API.

## VisualBuilderBase

Used by **VisualBuilder** in unit tests with the most frequently used methods, `build`, `update`, and `updateRenderTimeout`. 

The `build` method returns a created instance of the visual.

The `enumerateObjectInstances` and `updateEnumerateObjectInstancesRenderTimeout` methods are required to check changes on the bucket and formatting options.

```typescript
abstract class VisualBuilderBase<T extends IVisual> {
    element: JQuery;
    viewport: IViewport;
    visualHost: IVisualHost;
    protected visual: T;
    constructor(width?: number, height?: number, guid?: string, element?: JQuery);
    protected abstract build(options: VisualConstructorOptions): T;
     nit(): void;
    destroy(): void;
    update(dataView: DataView[] | DataView): void;
    updateRenderTimeout(dataViews: DataView[] | DataView, fn: Function, timeout?: number): number;
    updateEnumerateObjectInstancesRenderTimeout(dataViews: DataView[] | DataView, options: EnumerateVisualObjectInstancesOptions, fn: (enumeration: VisualObjectInstance[]) => void, timeout?: number): number;
    updateFlushAllD3Transitions(dataViews: DataView[] | DataView): void;
    updateflushAllD3TransitionsRenderTimeout(dataViews: DataView[] | DataView, fn: Function, timeout?: number): number;
    enumerateObjectInstances(options: EnumerateVisualObjectInstancesOptions): VisualObjectInstance[];
}
```

> [!NOTE]
> For more examples, see [Writing VisualBuilderBase unit tests](./unit-tests-introduction.md#create-a-visual-instance-builder) and a [Real usage VisualBuilderBase scenario](https://github.com/microsoft/powerbi-visuals-gantt/blob/master/test/visualBuilder.ts).

## DataViewBuilder

Used by **TestDataViewBuilder**, this module provides a **CategoricalDataViewBuilder** class used in the `createCategoricalDataViewBuilder` method. It also specifies interfaces and methods required for working with mocked **DataView** in unit tests.

* `withValues` adds static series columns, and `withGroupedValues` adds dynamic series columns.

  Don't apply both dynamic series and static series in a visual **DataViewCategorical**. You can only use them both in the  **DataViewCategorical** query, where **DataViewTransform** is expected to split them into separate visual **DataViewCategorical** objects.

* `build` returns the **DataView** with metadata and **DataViewCategorical**.

  `build` returns **Undefined** if the combination of parameters is illegal, such as including both dynamic and static series when building the visual **DataView**.

```typescript
class CategoricalDataViewBuilder implements IDataViewBuilderCategorical {
    withCategory(options: DataViewBuilderCategoryColumnOptions): IDataViewBuilderCategorical;
    withCategories(categories: DataViewCategoryColumn[]): IDataViewBuilderCategorical;
    withValues(options: DataViewBuilderValuesOptions): IDataViewBuilderCategorical;
    withGroupedValues(options: DataViewBuilderGroupedValuesOptions): IDataViewBuilderCategorical;
    build(): DataView;
}

function createCategoricalDataViewBuilder(): IDataViewBuilderCategorical;
```

## TestDataViewBuilder

Used for **VisualData** creation in unit tests. When data is placed in data-field buckets, Power BI produces a categorical **DataView** object based on the data. The **TestDataViewBuilder** helps simulate categorical **DataView** creation.

```typescript
abstract class TestDataViewBuilder {
    static DataViewName: string;
    private aggregateFunction;
    static setDefaultQueryName(source: DataViewMetadataColumn): DataViewMetadataColumn;
    static getDataViewBuilderColumnIdentitySources(options: TestDataViewBuilderColumnOptions[] | TestDataViewBuilderColumnOptions): DataViewBuilderColumnIdentitySource[];
    static getValuesTable(categories?: DataViewCategoryColumn[], values?: DataViewValueColumn[]): any[][];
    static createDataViewBuilderColumnOptions(categoriesColumns: (TestDataViewBuilderCategoryColumnOptions | TestDataViewBuilderCategoryColumnOptions[])[], valuesColumns: (DataViewBuilderValuesColumnOptions | DataViewBuilderValuesColumnOptions[])[], filter?: (options: TestDataViewBuilderColumnOptions) => boolean, customizeColumns?: CustomizeColumnFn): DataViewBuilderAllColumnOptions;
    static setUpDataViewBuilderColumnOptions(options: DataViewBuilderAllColumnOptions, aggregateFunction: (array: number[]) => number): DataViewBuilderAllColumnOptions;
    static setUpDataView(dataView: DataView, options: DataViewBuilderAllColumnOptions): DataView;
    protected createCategoricalDataViewBuilder(categoriesColumns: (TestDataViewBuilderCategoryColumnOptions | TestDataViewBuilderCategoryColumnOptions[])[], valuesColumns: (DataViewBuilderValuesColumnOptions | DataViewBuilderValuesColumnOptions[])[], columnNames: string[], customizeColumns?: CustomizeColumnFn): IDataViewBuilderCategorical;
    abstract getDataView(columnNames?: string[]): DataView;
}
```

  The following lists the most frequently used interfaces when creating a `testDataView`:

  ```typescript
  interface TestDataViewBuilderColumnOptions extends DataViewBuilderColumnOptions {
      values: any[];
  }

  interface TestDataViewBuilderCategoryColumnOptions extends TestDataViewBuilderColumnOptions {
      objects?: DataViewObjects[];
      isGroup?: boolean;
  }

  interface DataViewBuilderColumnOptions {
      source: DataViewMetadataColumn;
  }

  interface DataViewBuilderSeriesData {
      values: PrimitiveValue[];
      highlights?: PrimitiveValue[];
      /** Client-computed maximum value for a column. */
      maxLocal?: any;
      /** Client-computed maximum value for a column. */
      minLocal?: any;
  }

  interface DataViewBuilderColumnIdentitySource {
      fields: any[];
      identities?: CustomVisualOpaqueIdentity[];
  }
  ```
   
> [!NOTE]
> For more examples, see [Writing TestDataViewBuilder unit tests](./unit-tests-introduction.md#how-to-add-static-data-for-unit-tests) and a [Real usage TestDataViewBuilder scenario](https://github.com/microsoft/powerbi-visuals-gantt/blob/master/test/visualData.ts).

## Mocks

### MockIVisualHost

Implements **IVisualHost** to test Power BI visuals without external dependencies, such as the Power BI framework.

Useful methods include `createSelectionIdBuilder`, `createSelectionManager`, `createLocalizationManager`, and getter properties.

```typescript
import powerbi from "powerbi-visuals-api";

import VisualObjectInstancesToPersist = powerbi.VisualObjectInstancesToPersist;
import ISelectionIdBuilder = powerbi.visuals.ISelectionIdBuilder;
import ISelectionManager = powerbi.extensibility.ISelectionManager;
import IColorPalette = powerbi.extensibility.IColorPalette;
import IVisualEventService = powerbi.extensibility.IVisualEventService;
import ITooltipService = powerbi.extensibility.ITooltipService;
import IVisualHost = powerbi.extensibility.visual.IVisualHost;

class MockIVisualHost implements IVisualHost {
      constructor(
          colorPalette?: IColorPalette,
          selectionManager?: ISelectionManager,
          tooltipServiceInstance?: ITooltipService,
          localeInstance?: MockILocale,
          allowInteractionsInstance?: MockIAllowInteractions,
          localizationManager?: powerbi.extensibility.ILocalizationManager,
          telemetryService?: powerbi.extensibility.ITelemetryService,
          authService?: powerbi.extensibility.IAuthenticationService,
          storageService?: ILocalVisualStorageService,
          eventService?: IVisualEventService);
      createSelectionIdBuilder(): ISelectionIdBuilder;
      createSelectionManager(): ISelectionManager;
      createLocalizationManager(): ILocalizationManager;
      colorPalette: IColorPalette;
      locale: string;
      telemetry: ITelemetryService;
      tooltipService: ITooltipService;
      allowInteractios: boolean;
      storageService: ILocalVisualStorageService;
      eventService: IVisualEventService;
      persistProperties(changes: VisualObjectInstancesToPersist): void;
}
```
   
- `createVisualHost` creates and returns an instance of **IVisualHost**, actually **MockIVisualHost**.
  ```typescript
  function createVisualHost(locale?: Object, allowInteractions?: boolean, colors?: IColorInfo[], isEnabled?: boolean, displayNames?: any, token?: string): IVisualHost;
  ```

    Example:
    ```typescript
    import { createVisualHost } from "powerbi-visuals-utils-testutils"

    let host: IVisualHost = createVisualHost();
    ```

> [!IMPORTANT]
> **MockIVisualHost** is a fake implementation of **IVisualHost** and should only be used with unit tests.

### MockIColorPalette

Implements **IColorPalette** to test Power BI visuals without external dependencies, such as the Power BI framework.

**MockIColorPalette** provides useful properties for checking color schema or high-contrast mode in unit tests.

  ```typescript
  import powerbi from "powerbi-visuals-api";
  import IColorPalette = powerbi.extensibility.ISandboxExtendedColorPalette;
  import IColorInfo = powerbi.IColorInfo;

  class MockIColorPalette implements IColorPalette {
      constructor(colors?: IColorInfo[]);
      getColor(key: string): IColorInfo;
      reset(): IColorPalette;
      isHighContrastMode: boolean;
      foreground: {value: string};
      foregroundLight: {value: string};
      ...
      background: {value: string};
      backgroundLight: {value: string};
      ...
      shapeStroke: {value: string};
  }
  ```
  - `createColorPalette` creates and returns an instance of **IColorPalette**, actually **MockIColorPalette**.
    ```typescript
    function createColorPalette(colors?: IColorInfo[]): IColorPalette;
    ```

    Example:
    ```typescript
    import { createColorPalette } from "powerbi-visuals-utils-testutils"

    let colorPalette: IColorPalette = createColorPalette();
    ```
    
> [!IMPORTANT]
> **MockIColorPalette** is a fake implementation of **IColorPalette** and should only be used with unit tests.

### MockISelectionId

Implements **ISelectionId** to test Power BI visuals without external dependencies, such as the Power BI framework.

  ```typescript
  import powerbi from "powerbi-visuals-api";
  import Selector = powerbi.data.Selector;
  import ISelectionId = powerbi.visuals.ISelectionId;

  class MockISelectionId implements ISelectionId {
      constructor(key: string);
      equals(other: ISelectionId): boolean;
      includes(other: ISelectionId, ignoreHighlight?: boolean): boolean;
      getKey(): string;
      getSelector(): Selector;
      getSelectorsByColumn(): Selector;
      hasIdentity(): boolean;
  }
  ```

  - `createSelectionId` creates and returns an instance of **ISelectionId**, actually **MockISelectionId**.
    ```typescript
    function createSelectionId(key?: string): ISelectionId;
    ```

    Example:
    ```typescript
    import { createColorPalette } from "powerbi-visuals-utils-testutils"

    let selectionId: ISelectionId = createSelectionId();
    ```
    
> [!NOTE]
> **MockISelectionId** is a fake implementation of **ISelectionId** and should only be used with unit tests.

### MockISelectionIdBuilder

Implements **ISelectionIdBuilder** to test Power BI visuals without external dependencies, such as the Power BI framework. 

  ```typescript
  import DataViewCategoryColumn = powerbi.DataViewCategoryColumn;
  import DataViewValueColumn = powerbi.DataViewValueColumn;
  import DataViewValueColumnGroup = powerbi.DataViewValueColumnGroup;
  import DataViewValueColumns = powerbi.DataViewValueColumns;
  import ISelectionIdBuilder = powerbi.visuals.ISelectionIdBuilder;
  import ISelectionId = powerbi.visuals.ISelectionId;

  class MockISelectionIdBuilder implements ISelectionIdBuilder {
      withCategory(categoryColumn: DataViewCategoryColumn, index: number): this;
      withSeries(seriesColumn: DataViewValueColumns, valueColumn: DataViewValueColumn | DataViewValueColumnGroup): this;
      withMeasure(measureId: string): this;
      createSelectionId(): ISelectionId;
      withMatrixNode(matrixNode: DataViewMatrixNode, levels: DataViewHierarchyLevel[]): this;
      withTable(table: DataViewTable, rowIndex: number): this;
  }
  ```

  - `createSelectionIdBuilder` creates and returns an instance of **ISelectionIdBuilder**, actually **MockISelectionIdBuilder**.
    ```typescript
    function createSelectionIdBuilder(): ISelectionIdBuilder;
    ```

    Example:
    ```typescript
    import { selectionIdBuilder } from "powerbi-visuals-utils-testutils";

    let selectionIdBuilder = createSelectionIdBuilder();
    ```

> [!NOTE]
> **MockISelectionIdBuilder** is a fake implementation of **ISelectionIdBuilder** and should only be used with unit tests.

### MockISelectionManager

Implements **ISelectionManager** to test Power BI visuals without external dependencies, such as the Power BI framework. 

  ```typescript
  import powerbi from "powerbi-visuals-api";
  import IPromise = powerbi.IPromise;
  import ISelectionId = powerbi.visuals.ISelectionId;
  import ISelectionManager = powerbi.extensibility.ISelectionManager;

  class MockISelectionManager implements ISelectionManager {
      select(selectionId: ISelectionId | ISelectionId[], multiSelect?: boolean): IPromise<ISelectionId[]>;
      hasSelection(): boolean;
      clear(): IPromise<{}>;
      getSelectionIds(): ISelectionId[];
      containsSelection(id: ISelectionId): boolean;
      showContextMenu(selectionId: ISelectionId, position: IPoint): IPromise<{}>;
      registerOnSelectCallback(callback: (ids: ISelectionId[]) => void): void;
      simutateSelection(selections: ISelectionId[]): void;
  }
  ```

  - `createSelectionManager` creates and returns an instance of **ISelectionManager**, actually **MockISelectionManager**.
    ```typescript
    function createSelectionManager(): ISelectionManager
    ```

    Example:
    ```typescript
    import { createSelectionManager } from "powerbi-visuals-utils-testutils";

    let selectionManager: ISelectionManager = createSelectionManager();
    ```

> [!NOTE]
> **MockISelectionManager** is a fake implementation of **ISelectionManager** and should only be used with unit tests.

### MockILocale

  Sets the locale and changes it for your needs during a unit testing process.
  ```typescript
  class MockILocale {
      constructor(locales?: Object): void; // Default locales are en-US and ru-RU 
      locale(key: string): void;// setter property
      locale(): string; // getter property
  }
  ```
  - `createLocale` creates and returns an instance of **MockILocale**.
    ```typescript
    funciton createLocale(locales?: Object): MockILocale;
    ```

### <a id="mockitooltipservice"></a> MockITooltipService
Simulates `TooltipService` and calls it for your needs during a unit testing process.
  ```typescript
  class MockITooltipService implements ITooltipService {
      constructor(isEnabled: boolean = true);
      enabled(): boolean;
      show(options: TooltipShowOptions): void;
      move(options: TooltipMoveOptions): void;
      hide(options: TooltipHideOptions): void;
  }
  ```
  - `createTooltipService` creates and returns an instance of **MockITooltipService**.
    ```typescript
    function createTooltipService(isEnabled?: boolean): ITooltipService;
    ```

### MockIAllowInteractions

```typescript
export class MockIAllowInteractions {
    constructor(public isEnabled?: boolean); // false by default
}
```
  - `createAllowInteractions` creates and returns an instance of **MockIAllowInteractions**.
    ```typescript
    function createAllowInteractions(isEnabled?: boolean): MockIAllowInteractions;
    ```

### <a id="mockilocalizationmanager"></a> MockILocalizationManager
Provides basic abilities of **LocalizationManager**, which are needed for unit testing.
```typescript
class MockILocalizationManager implements ILocalizationManager {
    constructor(displayNames: {[key: string]: string});
    getDisplayName(key: string): string; // returns default or setted displayNames for localized elements
}
```
  - `createLocalizationManager` creates and returns an instance of **ILocalizationManager**, actually **MockILocalizationManager**.
    ```typescript
    function createLocalizationManager(displayNames?: any): ILocalizationManager;
    ```

    Example:
    ```typescript
    import { createLocalizationManager } from "powerbi-visuals-utils-testutils";
    let localizationManagerMock: ILocalizationManager = createLocalizationManager();
    ```

### MockITelemetryService
Simulates **TelemetryService** usage.
```typescript
class MockITelemetryService implements ITelemetryService {
    instanceId: string;
    trace(veType: powerbi.VisualEventType, payload?: string) {
    }
}
```
  Creation of `MockITelemetryService`
    ```typescript
    function createTelemetryService(): ITelemetryService;
    ```
### MockIAuthenticationService
Simulates the work of **AuthenticationService** by providing a mocked Microsoft Entra token.
```typescript
class MockIAuthenticationService implements IAuthenticationService  {
    constructor(token: string);
    getAADToken(visualId?: string): powerbi.IPromise<string>
}
```
  - `createAuthenticationService` creates and returns an instance of **IAuthenticationService**, actually **MockIAuthenticationService**.
    ```typescript
    function createAuthenticationService(token?: string): IAuthenticationService;
    ```

### MockIStorageService
Allows you to use **ILocalVisualStorageService** with the same behavior as **LocalStorage**.
```typescript
class MockIStorageService implements ILocalVisualStorageService {
  get(key: string): IPromise<string>;
  set(key: string, data: string): IPromise<number>;
  remove(key: string): void;
}
```
  - `createStorageService` creates and returns an instance of **ILocalVisualStorageService**, actually **MockIStorageService**.
    ```typescript
    function createStorageService(): ILocalVisualStorageService;
    ```

### MockIEventService
```typescript
import powerbi from "powerbi-visuals-api";
import IVisualEventService = powerbi.extensibility.IVisualEventService;
import VisualUpdateOptions = powerbi.extensibility.VisualUpdateOptions;

class MockIEventService implements IVisualEventService {
      renderingStarted(options: VisualUpdateOptions): void;
      renderingFinished(options: VisualUpdateOptions): void;
      renderingFailed(options: VisualUpdateOptions, reason?: string): void;
}
```
  - `createEventService` creates and returns an instance of **IVisualEventService**, actually **MockIEventService**.
    ```typescript
    function createEventService(): IVisualEventService;
    ```

## Utils

Utils include helper methods for Power BI visuals' unit testing, including helpers related to colors, numbers, and events.

- `renderTimeout` returns a timeout.
  ```typescript
  function renderTimeout(fn: Function, timeout: number = DefaultWaitForRender): number
  ```

- `testDom` helps set a fixture in unit tests.
  ```typescript
  function testDom(height: number | string, width: number | string): JQuery
  ```
  Example:
  ```typescript
  import { testDom }  from "powerbi-visuals-utils-testutils";
  describe("testDom", () => {
      it("should return an element", () => {
          let element: JQuery = testDom(500, 500);
          expect(element.get(0)).toBeDefined();
      });
  });
  ```

### Color-related helper methods

- `getSolidColorStructuralObject`
  ```typescript
  function getSolidColorStructuralObject(color: string): any
  ```
  Returns the following structure:

  ```json
  { solid: { color: color } }
  ```

- `assertColorsMatch` compares **RgbColor** objects parsed from input strings.
  ```typescript
  function assertColorsMatch(actual: string, expected: string, invert: boolean = false): boolean
  ```

- `parseColorString` parses color from the input string and returns it in specified interface **RgbColor**.
  ```typescript
  function parseColorString(color: string): RgbColor
  ```

### Number-related helper methods

- `getRandomNumbers` generates a random number using min and max values. You can specify `exceptionList` and provide a function for result change.
  ```typescript
  function getRandomNumber(
      min: number,
      max: number,
      exceptionList?: number[],
      changeResult: (value: any) => number = x => x): number
  ```

- `getRandomNumbers` provides an array of random numbers generated by the `getRandomNumber` method with specified min and max values.
  ```typescript
  function getRandomNumbers(count: number, min: number = 0, max: number = 1): number[]
  ```

### Event-related helper methods
The following methods are written for web page event simulation in unit tests.

- `clickElement` simulates a click on the specified element.
  ```typescript
  function clickElement(element: JQuery, ctrlKey: boolean = false): void
  ```

- `createTouch` returns a **Touch** object to help simulate a touch event.
  ```typescript
  function createTouch(x: number, y: number, element: JQuery, id: number = 0): Touch
  ```

- `createTouchesList` returns a list of simulated **Touch** events.
  ```typescript
  function createTouchesList(touches: Touch[]): TouchList
  ```

- `createContextMenuEvent` returns **MouseEvent**.
  ```typescript
  function createContextMenuEvent(x: number, y: number): MouseEvent
  ```

- `createMouseEvent` creates and returns **MouseEvent**.
  ```typescript
  function createMouseEvent(
      mouseEventType: MouseEventType,
      eventType: ClickEventType,
      x: number,
      y: number,
      button: number = 0): MouseEvent
  ```

- `createTouchEndEvent`
  ```typescript
  function createTouchEndEvent(touchList?: TouchList): UIEvent
  ```

- `createTouchMoveEvent`
  ```typescript
  function createTouchMoveEvent(touchList?: TouchList): UIEvent
  ```

- `createTouchStartEvent`
  ```typescript
  function createTouchStartEvent(touchList?: TouchList): UIEvent
  ```

### D3 event-related helper methods

The following methods are used to simulate D3 events in unit tests.

- `flushAllD3Transitions` forces all D3 transitions to complete.

  ```typescript
  function flushAllD3Transitions()
  ```
  
  > [!NOTE]
  > Normally, zero-delay transitions are executed after an instantaneous delay (<10 ms), but this can cause a brief flicker if the browser renders the page twice. Once at the end of the first event loop, then again immediately on the first timer callback.
  >
  > These flickers are more noticeable on IE and with a large number of webviews and aren't recommended for iOS.
  > 
  > By flushing the timer queue at the end of the first event loop, you can run any zero-delay transitions immediately and avoid the flicker.

The following methods are also included:
```typescript
function d3Click(element: JQuery, x: number, y: number, eventType?: ClickEventType, button?: number): void
function d3MouseUp(element: JQuery, x: number, y: number, eventType?: ClickEventType, button?: number): void
function d3MouseDown(element: JQuery, x: number, y: number, eventType?: ClickEventType, button?: number): void
function d3MouseOver(element: JQuery, x: number, y: number, eventType?: ClickEventType, button?: number): void
function d3MouseMove(element: JQuery, x: number, y: number, eventType?: ClickEventType, button?: number): void
function d3MouseOut(element: JQuery, x: number, y: number, eventType?: ClickEventType, button?: number): void
function d3KeyEvent(element: JQuery, typeArg: string, keyArg: string, keyCode: number): void
function d3TouchStart(element: JQuery, touchList?: TouchList): void
function d3TouchMove(element: JQuery, touchList?: TouchList): void
function d3TouchEnd(element: JQuery, touchList?: TouchList): void
function d3ContextMenu(element: JQuery, x: number, y: number): void
```

### Helper interfaces
The following interface and enumerations are used in the helper function.

```typescript
interface RgbColor {
    R: number;
    G: number;
    B: number;
    A?: number; 
}

enum ClickEventType {
    Default = 0,
    CtrlKey = 1,
    AltKey = 2,
    ShiftKey = 4,
    MetaKey = 8,
}

enum MouseEventType {
    click,
    mousedown,
    mouseup,
    mouseover,
    mousemove,
    mouseout,
}
```

## Related content

To write unit tests for webpack-based Power BI visuals, and unit test with `karma` and `jasmine`, see [Tutorial: Add unit tests for Power BI visual projects](./unit-tests-introduction.md).



================================================
FILE: powerbi-docs/developer/visuals/utils-tooltip.md
================================================
---
title:  Introduction to tooltip utils in Power BI visuals
description: Learn how to install, import, and use tooltip utils to simplify tooltip customization in your Power BI visuals.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 01/10/2024
#customer intent: As a Power BI developer, I want to learn how to use tooltip utils to simplify tooltip customization in my Power BI visuals.
---
# Tooltip utils

This article will help you to install, import, and use tooltip utils. This util is useful for tooltip customizations in Power BI visuals.

## Prerequisites

To use the package, you need:

* [Node.js](https://nodejs.org) (we recommend the latest LTS version)
* [npm](https://www.npmjs.com/) (the minimal supported version is 3.0.0)
* The custom visual created by [`PowerBI-visuals-tools`](https://www.npmjs.com/package/powerbi-visuals-tools)

## Installation

To install the package, you should run the following command in the directory with your current visual:

```bash
npm install powerbi-visuals-utils-tooltiputils --save
```

This command installs the package and adds a package as a dependency to your `package.json` file.

## Usage

> The Usage Guide describes a public API of the package. You will find a description and some examples for each public interface of the package.

This package provides you with a way to create `TooltipServiceWrapper` and methods to help handle tooltip actions. It uses tooltip interfaces - `ITooltipServiceWrapper`, `TooltipEventArgs`, `TooltipEnabledDataPoint`. 

It has specific methods (touch events handlers) related to mobile development: `touchEndEventName`, `touchStartEventName`, `usePointerEvents`.

`TooltipServiceWrapper` provides the simplest way to manipulate tooltips.

This module provides the following interface and function:

* [ITooltipServiceWrapper](#itooltipservicewrapper)
  * [addTooltip](#itooltipservicewrapperaddtooltip)
  * [hide](#itooltipservicewrapperhide)

* [Interfaces](#interfaces)
  * [TooltipEventArgs](#tooltipeventargs)
  * [TooltipEnabledDataPoint](#tooltipenableddatapoint)
  * [TooltipServiceWrapperOptions](#tooltipservicewrapperoptions)
* [Touch events](#touch-events)

### `createTooltipServiceWrapper`

This function creates an instance of `ITooltipServiceWrapper`.

```typescript
function createTooltipServiceWrapper(tooltipService: ITooltipService, rootElement: Element, handleTouchDelay?: number,  getEventMethod?: () => MouseEvent): ITooltipServiceWrapper;
```

The ```ITooltipService``` is available in IVisualHost.

Example:

```typescript
import { createTooltipServiceWrapper } from "powerbi-visuals-utils-tooltiputils";

export class YourVisual implements IVisual {
    // implementation of IVisual.

    constructor(options: VisualConstructorOptions) {
        createTooltipServiceWrapper(
            options.host.tooltipService,
            options.element);

        // returns: an instance of ITooltipServiceWrapper.
    }
}
```

See an example of the custom visual [here](https://github.com/microsoft/powerbi-visuals-gantt/blob/master/src/gantt.ts#L391).

### `ITooltipServiceWrapper`

This interface describes public methods of the TooltipService.

```typescript
interface ITooltipServiceWrapper {
    addTooltip<T>(selection: d3.Selection<any, any, any, any>, getTooltipInfoDelegate: (args: TooltipEventArgs<T>) => powerbi.extensibility.VisualTooltipDataItem[], getDataPointIdentity?: (args: TooltipEventArgs<T>) => powerbi.visuals.ISelectionId, reloadTooltipDataOnMouseMove?: boolean): void;
    hide(): void;
}
```

#### `ITooltipServiceWrapper.addTooltip`

This method adds tooltips to the current selection.

```typescript
addTooltip<T>(selection: d3.Selection<any>, getTooltipInfoDelegate: (args: TooltipEventArgs<T>) => VisualTooltipDataItem[], getDataPointIdentity?: (args: TooltipEventArgs<T>) => ISelectionId, reloadTooltipDataOnMouseMove?: boolean): void;
```

Example:

```typescript
import { createTooltipServiceWrapper, TooltipEventArgs, ITooltipServiceWrapper, TooltipEnabledDataPoint } from "powerbi-visuals-utils-tooltiputils";

let bodyElement = d3.select("body");

let element = bodyElement
    .append("div")
    .style({
        "background-color": "green",
        "width": "150px",
        "height": "150px"
    })
    .classed("visual", true)
    .data([{
        tooltipInfo: [{
            displayName: "Power BI",
            value: 2016
        }]
    }]);

let tooltipServiceWrapper: ITooltipServiceWrapper = createTooltipServiceWrapper(tooltipService, bodyElement.get(0)); // tooltipService is from the IVisualHost.

tooltipServiceWrapper.addTooltip<TooltipEnabledDataPoint>(element, (eventArgs: TooltipEventArgs<TooltipEnabledDataPoint>) => {
    return eventArgs.data.tooltipInfo;
});

// You will see a tooltip if you mouseover the element.
```

See an example of the custom visual [here](https://github.com/microsoft/powerbi-visuals-gantt/blob/master/src/gantt.ts#L2931).

See an example of tooltip customization in a Gantt custom visual [here](https://github.com/microsoft/powerbi-visuals-gantt/blob/master/src/gantt.ts#L573-L648).

### `ITooltipServiceWrapper.hide`

This method hides the tooltip.

```typescript
hide(): void;
```

Example:

```typescript
import {createTooltipServiceWrapper} from "powerbi-visuals-utils-tooltiputils";

let tooltipServiceWrapper = createTooltipServiceWrapper(options.host.tooltipService, options.element); // options are from the VisualConstructorOptions.

tooltipServiceWrapper.hide();
```

### `Interfaces`

Interfaces are used during TooltipServiceWrapper creation and when it's used. They were mentioned in examples from previous articles [here](#itooltipservicewrapperaddtooltip).

#### `TooltipEventArgs`
```typescript
interface TooltipEventArgs<TData> {
    data: TData;
    coordinates: number[];
    elementCoordinates: number[];
    context: HTMLElement;
    isTouchEvent: boolean;
}
```

#### `TooltipEnabledDataPoint`
```typescript
interface TooltipEnabledDataPoint {
    tooltipInfo?: powerbi.extensibility.VisualTooltipDataItem[];
}
```

#### `TooltipServiceWrapperOptions`
```typescript
interface TooltipServiceWrapperOptions {
    tooltipService: ITooltipService;
    rootElement: Element;
    handleTouchDelay: number;
```

### `Touch events`

Now tooltip utils can handle several touch events that are useful for mobile development.

#### `touchStartEventName`

```typescript
function touchStartEventName(): string
```

This method returns a touch start event name.

#### `touchEndEventName`

```typescript
function touchEndEventName(): string
```

This method returns a touch end event name.

#### `usePointerEvents`

```typescript
function usePointerEvents(): boolean
```

This method returns the current touchStart event related to a pointer or not.



================================================
FILE: powerbi-docs/developer/visuals/utils-type.md
================================================
---
title: Introduction to use type utils in Power BI visual
description: This article describes how to use SVG utils to extend the basic types for Power BI visuals and provides examples for each function.
author: billmath
ms.author: billmath
manager: rkarlin
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 01/04/2025
#customer intent: As a developer, I want to understand how to use type utils to enhance my Power BI visuals.
---

# Type utils

TypeUtils is a set of functions and classes to extend the basic types for Power BI visuals.

## Installation

To install the package, run the following command in the directory with your current custom visual:

`npm install powerbi-visuals-utils-typeutils --save`

This command installs the package and adds a package as a dependency to your `package.json` file.

## Double

The `Double` module provides abilities to manipulate precision of the numbers.

It provides the following functions:

### pow10

This function returns power of 10.

```typescript
function pow10(exp: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.pow10(25);

// returns: 1e+25
```

### log10

This function returns a 10 base logarithm of the number.

```typescript
function log10(val: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.log10(25);

// returns: 1
```

## getPrecision

This function returns a power of 10 representing precision of the number.

```typescript
function getPrecision(x: number, decimalDigits?: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.getPrecision(562344, 6);

// returns: 0.1
```

### equalWithPrecision

This function checks if a delta between two numbers is less than provided precision.

```typescript
function equalWithPrecision(x: number, y: number, precision?: number): boolean;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.equalWithPrecision(1, 1.005, 0.01);

// returns: true
```

### lessWithPrecision

This function checks if the first value is less than the second value.

```typescript
function lessWithPrecision(x: number, y: number, precision?: number): boolean;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.lessWithPrecision(0.995, 1, 0.001);

// returns: true
```

### lessOrEqualWithPrecision

This function checks if the first value is less than or equal to the second value.

```typescript
function lessOrEqualWithPrecision(x: number, y: number, precision?: number): boolean;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.lessOrEqualWithPrecision(1.005, 1, 0.01);

// returns: true
```

### greaterWithPrecision

This function checks if the first value is greater than the second value.

```typescript
function greaterWithPrecision(x: number, y: number, precision?: number): boolean;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.greaterWithPrecision(1, 0.995, 0.01);

// returns: false
```

### greaterOrEqualWithPrecision

This function checks if the first value is greater than or equal to the second value.

```typescript
function greaterOrEqualWithPrecision(x: number, y: number, precision?: number): boolean;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.greaterOrEqualWithPrecision(1, 1.005, 0.01);

// returns: true
```

### floorWithPrecision

This function floors the number with the provided precision.

```typescript
function floorWithPrecision(x: number, precision?: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.floorWithPrecision(5.96, 0.001);

// returns: 5
```

### ceilWithPrecision

This function `ceils` the number with the provided precision.

```typescript
function ceilWithPrecision(x: number, precision?: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.ceilWithPrecision(5.06, 0.001);

// returns: 6
```

### floorToPrecision

This function floors the number to the provided precision.

```typescript
function floorToPrecision(x: number, precision?: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.floorToPrecision(5.96, 0.1);

// returns: 5.9
```

### ceilToPrecision

This function `ceils` the number to the provided precision.

```typescript
function ceilToPrecision(x: number, precision?: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.ceilToPrecision(-506, 10);

// returns: -500
```

### roundToPrecision

This function rounds the number to the provided precision.

```typescript
function roundToPrecision(x: number, precision?: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.roundToPrecision(596, 10);

// returns: 600
```

### ensureInRange

This function returns a number that is between min and max.

```typescript
function ensureInRange(x: number, min: number, max: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.ensureInRange(-27.2, -10, -5);

// returns: -10
```

### round

This function rounds the number.

```typescript
function round(x: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.round(27.45);

// returns: 27
```

### removeDecimalNoise

This function rounds the number to eliminate some decimal spaces.

```typescript
function removeDecimalNoise(value: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.removeDecimalNoise(21.493000000000002);

// returns: 21.493
```

### isInteger

This function checks if the number is an integer.

```typescript
function isInteger(value: number): boolean;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.isInteger(21.493000000000002);

// returns: false
```

### toIncrement

This function increments the number by the provided number and returns the rounded number.

```typescript
function toIncrement(value: number, increment: number): number;
```

Example:

```typescript
import { double } from "powerbi-visuals-utils-typeutils";
// ...

double.toIncrement(0.6383723, 0.05);

// returns: 0.65
```

## Prototype

The `Prototype` module provides the ability to inherit objects.

It provides the following functions:

## inherit

This function returns a new object with the provided object as its prototype.

```typescript
function inherit<T>(obj: T, extension?: (inherited: T) => void): T;
```

Example:

```typescript
import { prototype } from "powerbi-visuals-utils-typeutils";
// ...

let base = { Microsoft: "Power BI" };

prototype.inherit(base);

/* returns: {
    __proto__: {
        Microsoft: "Power BI"
    }
}*/
```

## inheritSingle

This function returns a new object with the provided object as its prototype if, and only if, the prototype hasn't been set.

```typescript
function inheritSingle<T>(obj: T): T;
```

Example:

```typescript
import { prototype } from "powerbi-visuals-utils-typeutils";
// ...

let base = { Microsoft: "Power BI" };

prototype.inheritSingle(base);

/* returns: {
    __proto__: {
        Microsoft: "Power BI"
    }
}*/
```

## PixelConverter

The `PixelConverter` module provides the ability to convert pixels to points, and points to pixels.

It provides the following functions:

## toString

This function converts the pixel value to a string.

```typescript
function toString(px: number): string;
```

Example:

```typescript
import { pixelConverter } from "powerbi-visuals-utils-typeutils";
// ...

pixelConverter.toString(25);

// returns: 25px
```

## fromPoint

This function converts the provided point value to the pixel value and returns the string interpretation.

```typescript
function fromPoint(pt: number): string;
```

Example:

```typescript
import { pixelConverter } from "powerbi-visuals-utils-typeutils";
// ...

pixelConverter.fromPoint(8);

// returns: 33.33333333333333px
```

## fromPointToPixel

This function converts the provided point value to the pixel value.

```typescript
function fromPointToPixel(pt: number): number;
```

Example:

```typescript
import { pixelConverter } from "powerbi-visuals-utils-typeutils";
// ...

pixelConverter.fromPointToPixel(8);

// returns: 10.666666666666666
```

## toPoint

This function converts the pixel value to the point value.

```typescript
function toPoint(px: number): number;
```

Example:

```typescript
import { pixelConverter } from "powerbi-visuals-utils-typeutils";
// ...

pixelConverter.toPoint(8);

// returns: 6
```



================================================
FILE: powerbi-docs/developer/visuals/visual-api.md
================================================
---
title:  Visual API for Power BI Visuals
description: This article provides a comprehensive guide on how to use the IVisual API for Power BI visuals, including step-by-step instructions and code examples.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: reference
ms.date: 12/17/2023
---

# Visual API

All visuals start with a class that implements the `IVisual` interface. You can name the class anything as long as there's exactly one class that implements the `IVisual` interface.

> [!NOTE]
> The visual class name must be the same as the `visualClassName` in the `pbiviz.json` file.

The visual class should implement the following methods as shown in the following sample:

* [`constructor`](#constructor) - a standard constructor that initializes the visual's state
* [`update`](#update) - updates the visual's data
* [`getFormattingModel`](#getformattingmodel-optional), returns a formatting model that populates the property pane (formatting options) where you can modify properties as needed
* [`destroy`](#destroy-optional) - a standard destructor for cleanup

```typescript
class MyVisual implements IVisual {
    
    constructor(options: VisualConstructorOptions) {
        //one time setup code goes here (called once)
    }
    
    public update(options: VisualUpdateOptions): void {
        //code to update your visual goes here (called on all view or data changes)
    }

    public getFormattingModel(): FormattingModel {
        // returns modern format pane formatting model that contain all format pane components and properties (called on opening format and analytics pane or on editing format properties)
    }
    
    public destroy(): void {
        //one time cleanup code goes here (called once)
    }
}
```

## constructor

The `constructor` of the visual class is called when the visual is instantiated. It can be used for any set-up operations the visual needs.

```typescript
constructor(options: VisualConstructorOptions)
```

### VisualConstructorOptions

These interfaces get updated with each new API version. For the most updated interface format, go to our [GitHub repo](https://github.com/microsoft/powerbi-visuals-api/blob/main/src/visuals-api.d.ts#L1783C9-L1783C25).

The following list describes some of the properties of the `VisualConstructorOptions` interface:

* `element: HTMLElement` - a reference to the DOM element that contains your visual
* `host: IVisualHost` - a collection of properties and services that can be used to interact with the visual host (Power BI)

   `IVisualHost` contains the following services:

  * `createSelectionIdBuilder` - generates and stores metadata for selectable items in your visual
  * `createSelectionManager` - creates the communication bridge used to notify the visual's host about changes in the selection state, see [Selection API](./selection-api.md).
  * `hostCapabilities`
  * `refreshHostData`
  * `downloadService` - returns expanded result information of the [download](./file-download-api.md).
  * `eventService` - returns information about [rendering events](./event-service.md).
  * `hostEnv`
  * `displayWarningIcon` - returns [error or warning message](./visual-display-warning-icon.md).
  * `licenseManager` - returns [license information](./licensing-api.md).
  * `createLocalizationManager` - generates a manager to help with [localization](./localization.md)
  * `applyJsonFilter` - applies specific filter types. See [Filter API](./filter-api.md)
  * `applyCustomSort` - allows [custom sorting options](./sort-options.md#custom-sorting).
  * `acquireAADTokenService` - returns Microsoft Entra ID [authentication information](./authentication-api.md).
  * `webAccessService` - returns permission status for [accessing remote resources](./permissions-api.md#web-access).
  * `openModalDialog` - returns a [dialog box](./create-display-dialog-box.md).
  * `persistProperties` - allows users to create persistent settings and save them along with the visual definition, so they're available on the next reload
  * `eventService` - returns an [event service](./event-service.md) to support **Render** events
  * `storageService` - returns a service to help use [local storage](./local-storage.md) in the visual
  * `storageV2Service` - returns a service to help use [local storage](./local-storage.md) version 2 in the visual
  * `tooltipService` - returns a [tooltip service](./add-tooltips.md) to help use tooltips in the visual
  * `telemetry`
  * `drill`
  * `launchUrl` - helps to [launch URL](./launch-url.md) in next tab
  * `authenticationService` - returns a Microsoft Entra ID token.
  * `locale` - returns a locale string, see [Localization](./localization.md)
  * `instanceId` - returns a string to identify the current visual instance
  * `colorPalette` - returns the colorPalette required to apply colors to your data
  * `fetchMoreData` - supports using more data than the standard limit (1,000 rows). See [Fetch more data](./fetch-more-data.md)
  * `switchFocusModeState` - helps to change the focus mode state

## update

All visuals must implement a public update method that's called whenever there's a change in the data or host environment.

```typescript
public update(options: VisualUpdateOptions): void
```

### VisualUpdateOptions

* `viewport: IViewport` - dimensions of the viewport that the visual should be rendered within
* `dataViews: DataView[]` - the data view object that contains all data needed to render your visual (a visual generally uses the categorical property under DataView)
* `type: VisualUpdateType` - flags indicating the type of data being updated (**Data** | **Resize** | **ViewMode** | **Style** | **ResizeEnd**)
* `viewMode: ViewMode` - flags indicating the view mode of the visual (**View** | **Edit** | **InFocusEdit**)
* `editMode: EditMode` - flag indicating the edit mode of the visual (**Default** | **Advanced**) (if the visual supports **AdvancedEditMode**, it should render its advanced UI controls only when **editMode** is set to **Advanced**, see [AdvancedEditMode](./advanced-edit-mode.md))
* `operationKind?: VisualDataChangeOperationKind` - flag indicating type of data change (**Create** | **Append**)
* `jsonFilters?: IFilter[]` - collection of applied json filters
* `isInFocus?: boolean` - flag to indicate if the visual is in focus mode or not
* `pendingChanges?: PendingChanges` - flag to indicate that local filter changes are made but yet applied to the report, usually triggered when **apply all slicers** button exists `pendingChanges[Filter]: boolean`


## getFormattingModel *(optional)*

This method is called once each time we open the properties pane or the user edits any of the properties in the pane. It returns [`FormattingModel`](./format-pane-general.md) with all information on the properties pane design, hierarchy, properties, and latest formatting values.

```typescript
getFormattingModel(): visuals.FormattingModel;
```

## destroy *(optional)*

The destroy function is called when your visual is unloaded and can be used for clean-up tasks such as removing event listeners.

``` typescript
public destroy(): void
```

> [!TIP]
> Power BI generally doesn't call `destroy` since it's faster to remove the entire IFrame that contains the visual.

## Related content

* [Visual project structure](visual-project-structure.md)

* [Local storage API](local-storage.md)



================================================
FILE: powerbi-docs/developer/visuals/visual-display-warning-icon.md
================================================
---
title: Power BI visuals display warning icon
description: Learn how to add a display warning icon to your Power BI visual. A display warning icon can notify the user of a possible problem or an error.
author: billmath
ms.author: billmath
ms.reviewer: ""
featuredvideoid: ''
ms.service: powerbi
ms.topic: how-to
ms.subservice: powerbi-custom-visuals
ms.date: 03/16/2024
#customer intent: As a Power BI developer, I want to learn how to add a display warning icon to my Power BI visual to notify users of possible problems or errors.
---

# Add a display warning icon to your visual

In a Power BI visual, a display warning icon can notify the user of a possible problem or an error. Display warning icons can be useful in many cases, such as:

* A map  visual can display a warning icon when values are outside the latitude or longitude valid range.

* A pie chart visual can display a warning icon when it's displaying negative values that are mixed with positive ones.

* A cartesian chart can display a warning icon when infinity values are calculated. For example, if **Y** is zero, when dividing **X** by **Y**, the result is infinity.

When the icon appears, the user can hover over it to see the title of the warning message.

:::image type="content" source="media/visual-display-warning-icon/warning-icon.png" alt-text="A screenshot showing a warning icon in a Power BI visual.":::

When the user selects the warning icon, a message that describes the problem appears in a pop-up window.

:::image type="content" source="media/visual-display-warning-icon/warning-message.png" alt-text="A screenshot showing a warning message triggered by selecting a warning icon in a Power BI visual.":::

## Create a warning icon

You can create a warning icon with a customized message for a custom visual. The decision whether to raise the warning icon or not is up to you. As these examples demonstrate, the visual continues to function when the warning icon is displayed.

### Add a call to the update method

To add a display warning icon to your visual, invoke the `displayWarningIcon` method. The method is part of `IVisualHost` and is exposed using `powerbi-visuals-api`.

Add the following import to your file:

```javascript
import powerbiVisualsApi from "powerbi-visuals-api"; 
```

After you add the import, add a condition that determines when to display the warning icon. Use the examples in this article to view two optional conditions.

### Example 1: Check language compatibility

Localization is used to display visuals in the customer's native language, which is determent by the operating system's settings.

In this example, the visual compares the language of the visual, which is set to US English, to the language of the operating system. If the languages don't match, the warning icon is displayed.

```javascript
if (this.locale != 'en-US') { 

            this.host.displayWarningIcon('Language inconsistency', 'This visual supports only US English. For the visual to work as expected, set your browser's language to US English.'); 
        }
```

:::image type="content" source="media/visual-display-warning-icon/language-mismatch.png" alt-text="A screenshot showing the language mismatch warning message.":::

### Example 2: Compare colors in adjacent columns  

In this example, the display warning icon appears when two columns that are next to each other have the same color.

The `getColumnColorByIndex` method iterates through all the columns. If two adjacent columns have the same color, a warning icon is displayed.  

```javascript
let category = options.dataViews[0].categorical.categories[0]; 

let dataValue = options.dataViews[0].categorical.values[0]; 

let colorPalette = this.host.colorPalette; 

for (let i = 0, len = Math.max(category.values.length, dataValue.values.length); i < len-1; i++) { 

    const color1: string = getColumnColorByIndex(category, i, colorPalette); 

    const color2: string = getColumnColorByIndex(category, i+1, colorPalette); 

    if (color1 == color2) { 

        this.host.displayWarningIcon('Adjacent columns have the same color.', 'Columns that are next to each other have the same color. To change a column's color, use the data colors option in the Format tab.'); 
    } 

} 
```

## Considerations and limitations

* Some errors and warnings aren't caused by the visual. For example, the *Too many values. Not showing all data* error is derived from the Power BI service. Such errors and warnings get propagated before to your visual's calls. They take precedence over errors that originate from your visual's code. If an error occurs while loading data, before the visual's code is run and the display warning icon condition is met, the visual displays that error instead of the display warning icon error.

* The display warning is cleared during each rendering of the visual, for example, when new data is dragged into the visual. The visual's `update()` method is invoked after the visual is rendered. If the visual's warning is raised based on a condition that's checked in the update method, each time the visual is rendered, if the condition is met, the visual displays the warning again.

* Resizing a visual doesn't affect the warning icon.

The following limitations refer to the display icon text:

* The maximum length of the title is 70 characters

* The maximum length of the text is 2,000 characters

* The text is only displayed as plain text

## Related content

[DataViewUtils](utils-dataview.md)



================================================
FILE: powerbi-docs/developer/visuals/visual-project-structure.md
================================================
---
title: Power BI visual project structure
description: Learn about the files and their contents that are created by the Power BI visuals tool when you create a new visual.
author: billmath
ms.author: billmath
ms.reviewer: ""
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: concept-article
ms.date: 06/09/2024
#customer intent: As a Power BI developer, I want to learn about the files and their contents that are created by the Power BI visuals tool when I create a new visual.
---

# Power BI visual project structure

The best way to start creating a new Power BI visual is to use the Power BI visuals [pbiviz](https://www.npmjs.com/package/powerbi-visuals-tools) tool.

To create a new visual, navigate to the directory you want the Power BI visual to reside in, and run the command:

`pbiviz new <visual project name>`

Running this command creates a Power BI visual folder that contains the following files:

```markdown
project
├───.vscode
│   ├───launch.json
│   └───settings.json
├───assets
│   └───icon.png
├───node_modules
├───src
│   ├───settings.ts
│   └───visual.ts
├───style
│   └───visual.less
├───capabilities.json
├───package-lock.json
├───package.json
├───pbiviz.json
├───tsconfig.json
└───tslint.json
```

## Folder and file description

This section provides information for each folder and file in the directory that the Power BI visuals **pbiviz** tool creates.  

### .vscode

This folder contains the VS Code project settings.

To configure your workspace, edit the `.vscode/settings.json` file.

For more information, see [User and workspace settings](https://code.visualstudio.com/docs/getstarted/settings).

### assets

This folder contains the `icon.png` file.

The Power BI visuals tool uses this file as the new Power BI visual icon in the Power BI visualization pane. This icon must be a **PNG** file with dimensions *20 pixels by 20 pixels*.

### src

This folder contains the visual's source code.

In this folder, the Power BI visuals tool creates the following files:

* `visual.ts` - The visual's main source code. Read about the [Visual API](./visual-api.md).
* `settings.ts` - The code of the visual's settings. The classes in the file provide an interface for defining your [visual's properties](./objects-properties.md#properties).

### style

This folder contains the `visual.less` file, which holds the visual's styles.

### capabilities.json

This file contains the main properties and settings (or [capabilities](./capabilities.md)) for the visual. It allows the visual to declare supported features, objects, properties, and [data view mapping](./dataview-mappings.md).

### package-lock.json

This file is automatically generated for any operations where *npm* modifies either the `node_modules` tree, or the `package.json` file.

For more information about this file, see the official [npm-package-lock.json](https://docs.npmjs.com/files/package-lock.json) documentation.

### package.json

This file describes the project package. It contains information about the project such as authors, description, and project dependencies.

For more information about this file, see the official [npm-package.json](https://docs.npmjs.com/files/package.json.html) documentation.

### pbiviz.json

This file contains the visual metadata.

To view an example `pbiviz.json` file with comments describing the metadata entries, see the [metadata entries](#metadata-entries) section.

### tsconfig.json

A configuration file for [TypeScript](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html).

This file must contain the path to **\*.ts** file where the main class of the visual is located, as specified in the `visualClassName` property in the `pbiviz.json` file.

### tslint.json

This file contains the [TSLint configuration](https://palantir.github.io/tslint/usage/configuration/).

## Metadata entries

The comments in the following code caption from the `pbiviz.json` file describe the metadata entries. Certain metadata, like the author's name and email, are required before you can package the visual.

> [!NOTE]
>
> * From version 3.x.x of the **pbiviz** tool,`externalJS` isn't supported.
> * Version numbers should contain four digits in the following format `x.x.x.x`. If your visual only has three digits, add a `.0` at the end.
> * For localization support, [add the Power BI locale to your visual](./localization.md).

```json
{
  "visual": {
     // The visual's internal name.
    "name": "<visual project name>",

    // The visual's display name.
    "displayName": "<visual project name>",

    // The visual's unique ID.
    "guid": "<visual project name>23D8B823CF134D3AA7CC0A5D63B20B7F",

    // The name of the visual's main class. Power BI creates the instance of this class to start using the visual in a Power BI report.
    "visualClassName": "Visual",

    // The visual's version number.
    "version": "1.0.0.0",
    
    // The visual's description (optional)
    "description": "",

    // A URL linking to the visual's support page (optional).
    "supportUrl": "",

    // A link to the source code available from GitHub (optional).
    "gitHubUrl": ""
  },
  // The version of the Power BI API the visual is using.
  "apiVersion": "2.6.0",

  // The name of the visual's author and email.
  "author": { "name": "", "email": "" },

  // 'icon' holds the path to the icon file in the assets folder; the visual's display icon.
  "assets": { "icon": "assets/icon.png" },

  // Contains the paths for JS libraries used in the visual.
  // Note: externalJS' isn't used in the Power BI visuals tool version 3.x.x or higher.
  "externalJS": null,

  // The path to the 'visual.less' style file.
  "style": "style/visual.less",

  // The path to the `capabilities.json` file.
  "capabilities": "capabilities.json",

  // The path to the `dependencies.json` file which contains information about R packages used in R based visuals.
  "dependencies": null,

  // An array of paths to files with localizations.
  "stringResources": []
}
```

## Related content

* [Power BI visuals system integration](power-bi-visuals-concept.md)
* [Develop a Power BI circle card visual](develop-circle-card.md)



================================================
FILE: powerbi-docs/developer/visuals/visuals-how-to-debug.md
================================================
---
title: Debug Power BI custom visuals
description: This article describes procedures that developers can use to debug Power BI custom visuals, and it provides helpful tips for troubleshooting.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: troubleshooting
ms.date: 07/31/2024
---

# Debug Power BI custom visuals

This article describes some basic debugging procedures that you can use when developing your visual. After you read this article, you should be able to debug your visual by inserting breakpoints and working with exceptions.

## Insert breakpoints

The visual's entire JavaScript is reloaded every time the visual is updated. Any breakpoints that you add will be lost when the debug visual is refreshed.

As a workaround, use `debugger` statements in your code. We recommend that you turn off automatic reload while using `debugger` in your code.
Here's an example of how to use a `debugger` statement in your `update` method:

```typescript
public update(options: VisualUpdateOptions) {
    console.log('Visual update', options);
    debugger;
    this.target.innerHTML = `<p>Update count: <em>${(this.updateCount</em></p>`;
}
```

## Catch exceptions

When you're working on your visual, you notice that the Power BI service "consumes" all errors. This behavior is an intentional feature of Power BI. It prevents misbehaving visuals from causing the entire app to become unstable.

As a workaround, add code to catch and log your exceptions, or set your debugger to break on caught exceptions.

### Log exceptions with a decorator

To log exceptions in your Power BI visual, you need define an exception-logging decorator. To define the decorator, add the following code to your visual:

```typescript
export function logExceptions(): MethodDecorator {
    return function (target: Object, propertyKey: string, descriptor: TypedPropertyDescriptor<any>): TypedPropertyDescriptor<any> {
        return {
            value: function () {
                try {
                    return descriptor.value.apply(this, arguments);
                } catch (e) {
                    console.error(e);
                    throw e;
                }
            }
        }
    }
}
```

You can use this decorator on any function to see error logging as follows:

```typescript
@logExceptions()
public update(options: VisualUpdateOptions) {
```

### Break on exceptions

You can set the browser to break on caught exceptions. Breaking stops code execution wherever an error happens, and you can debug from there.

#### [Microsoft Edge](#tab/Edge)

1. Open DevTools (F12).
2. Go to the **Sources** tab.
3. Select the **Pause on exceptions** icon (stop sign with a pause symbol).
4. Select the **Pause on caught exceptions** checkbox.

    ![Screenshot of DevTools in Edge that shows the Sources tab with the pause option selected.](media/visuals-how-to-debug/how-to-debug-edge-2.png)

#### [Google Chrome](#tab/Chrome)

1. Open DevTools (F12).
2. Go to the **Sources** tab.
3. Select the **Pause on exceptions** icon (stop sign with a pause symbol).
4. Select the **Pause On Caught Exceptions** checkbox.

    ![Screenshot of DevTools in Chrome that shows the Sources tab with the pause option selected.](media/visuals-how-to-debug/how-to-debug-chrome.png)

---

## Related content

* [Troubleshoot your Power BI developer environment setup](power-bi-custom-visuals-troubleshoot.md)
* [Frequently asked questions about Power BI visuals](power-bi-custom-visuals-faq.yml)



================================================
FILE: powerbi-docs/developer/visuals/visuals-interactions.md
================================================
---
title: Visual interactions in Power BI visuals
description: This article discusses how to check whether Power BI visuals allows users to interact with a visual.
author: billmath
ms.author: billmath
ms.reviewer: tebercov 
ms.service: powerbi
ms.subservice: powerbi-custom-visuals
ms.topic: how-to
ms.date: 10/22/2024
#customer intent: As a Power BI developer, I want to learn how to check whether Power BI visuals should allow visual interactions so that I can create effective interactive visuals.
---

# Visual interactions in Power BI visuals

Sometimes you want to allow the user to interact with the visual by selecting, zooming, or clicking on it. Other times you want the visual to be static, so the user can't interact with the visual.

Visuals can query the value of the `allowInteractions` flag, which indicates if the visual allows visual interactions. For example, visuals can be interactive during [report](../../create-reports/desktop-report-view.md) viewing or editing, but visuals can be non-interactive when they're viewed in a [dashboard](../../create-reports/service-dashboards.md). These interactions include *click*, *pan*, *zoom*, *selection*, and others.

> [!NOTE]
> Best practice is to [enable tooltips](add-tooltips.md#manage-tooltips) in all scenarios, regardless of the indicated flag.

## Set interactive permissions

The `allowInteractions` flag is passed as a boolean value during the initialization of the visual as a member of the `IVisualHost` interface.

For any Power BI scenario that requires non-interactive visuals (for example, dashboard tiles), set the `allowInteractions` flag to `false`. Otherwise (for example, Report), set `allowInteractions` to `true`.

The following code sample shows how to use the `allowInteractions` flag to set interactive permissions.

```typescript
   ...
   let allowInteractions = options.host.hostCapabilities.allowInteractions;
   bars.on('click', function(d) {
       if (allowInteractions) {
           selectionManager.select(d.selectionId);
           ...
       }
   });
```

For more information about using the `allowInteractions` flag, see the [SampleBarChart visual repository](https://github.com/Microsoft/PowerBI-visuals-sampleBarChart/commit/59a47935d8f5272ce145fe804193599ddb7e2001).

## Related content

[Visual API](visual-api.md)


